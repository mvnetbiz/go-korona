// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Validity validity
//
// swagger:model Validity
type Validity struct {

	// daily
	Daily *DayTimePeriod `json:"daily,omitempty"`

	// days of month
	// Unique: true
	DaysOfMonth []int32 `json:"daysOfMonth"`

	// days of week
	// Unique: true
	DaysOfWeek []string `json:"daysOfWeek"`

	// total
	Total *TotalPeriod `json:"total,omitempty"`
}

// Validate validates this validity
func (m *Validity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDaily(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDaysOfMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDaysOfWeek(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Validity) validateDaily(formats strfmt.Registry) error {

	if swag.IsZero(m.Daily) { // not required
		return nil
	}

	if m.Daily != nil {
		if err := m.Daily.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("daily")
			}
			return err
		}
	}

	return nil
}

func (m *Validity) validateDaysOfMonth(formats strfmt.Registry) error {

	if swag.IsZero(m.DaysOfMonth) { // not required
		return nil
	}

	if err := validate.UniqueItems("daysOfMonth", "body", m.DaysOfMonth); err != nil {
		return err
	}

	return nil
}

var validityDaysOfWeekItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		validityDaysOfWeekItemsEnum = append(validityDaysOfWeekItemsEnum, v)
	}
}

func (m *Validity) validateDaysOfWeekItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, validityDaysOfWeekItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *Validity) validateDaysOfWeek(formats strfmt.Registry) error {

	if swag.IsZero(m.DaysOfWeek) { // not required
		return nil
	}

	if err := validate.UniqueItems("daysOfWeek", "body", m.DaysOfWeek); err != nil {
		return err
	}

	for i := 0; i < len(m.DaysOfWeek); i++ {

		// value enum
		if err := m.validateDaysOfWeekItemsEnum("daysOfWeek"+"."+strconv.Itoa(i), "body", m.DaysOfWeek[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *Validity) validateTotal(formats strfmt.Registry) error {

	if swag.IsZero(m.Total) { // not required
		return nil
	}

	if m.Total != nil {
		if err := m.Total.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Validity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Validity) UnmarshalBinary(b []byte) error {
	var res Validity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
