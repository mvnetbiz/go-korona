// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Weather weather
//
// swagger:model Weather
type Weather struct {

	// code
	Code int32 `json:"code,omitempty"`

	// temperature
	Temperature int32 `json:"temperature,omitempty"`

	// temperature unit
	// Enum: [CELSIUS FAHRENHEIT KELVIN]
	TemperatureUnit string `json:"temperatureUnit,omitempty"`
}

// Validate validates this weather
func (m *Weather) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTemperatureUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var weatherTypeTemperatureUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CELSIUS","FAHRENHEIT","KELVIN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		weatherTypeTemperatureUnitPropEnum = append(weatherTypeTemperatureUnitPropEnum, v)
	}
}

const (

	// WeatherTemperatureUnitCELSIUS captures enum value "CELSIUS"
	WeatherTemperatureUnitCELSIUS string = "CELSIUS"

	// WeatherTemperatureUnitFAHRENHEIT captures enum value "FAHRENHEIT"
	WeatherTemperatureUnitFAHRENHEIT string = "FAHRENHEIT"

	// WeatherTemperatureUnitKELVIN captures enum value "KELVIN"
	WeatherTemperatureUnitKELVIN string = "KELVIN"
)

// prop value enum
func (m *Weather) validateTemperatureUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, weatherTypeTemperatureUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Weather) validateTemperatureUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.TemperatureUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateTemperatureUnitEnum("temperatureUnit", "body", m.TemperatureUnit); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Weather) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Weather) UnmarshalBinary(b []byte) error {
	var res Weather
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
