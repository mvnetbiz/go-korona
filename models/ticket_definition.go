// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TicketDefinition ticket definition
//
// swagger:model TicketDefinition
type TicketDefinition struct {

	// activation delay after purchase
	ActivationDelayAfterPurchase *TimePeriod `json:"activationDelayAfterPurchase,omitempty"`

	// indicates whether the object is active for use or not
	// Read Only: true
	Active *bool `json:"active,omitempty"`

	// entry gates
	// Unique: true
	EntryGates []*ModelReference `json:"entryGates"`

	// global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// number of the object, like it is set in backoffice; will be removed when active=false
	Number string `json:"number,omitempty"`

	// possible admissions
	PossibleAdmissions *Admission `json:"possibleAdmissions,omitempty"`

	// the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.
	// Read Only: true
	Revision int64 `json:"revision,omitempty"`

	// validity period after activation
	ValidityPeriodAfterActivation *TimePeriod `json:"validityPeriodAfterActivation,omitempty"`

	// validity period after entrance
	ValidityPeriodAfterEntrance *TimePeriod `json:"validityPeriodAfterEntrance,omitempty"`

	// validity period daily
	ValidityPeriodDaily *Interval `json:"validityPeriodDaily,omitempty"`

	// validity period total
	ValidityPeriodTotal *Interval `json:"validityPeriodTotal,omitempty"`
}

// Validate validates this ticket definition
func (m *TicketDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivationDelayAfterPurchase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntryGates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePossibleAdmissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidityPeriodAfterActivation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidityPeriodAfterEntrance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidityPeriodDaily(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidityPeriodTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TicketDefinition) validateActivationDelayAfterPurchase(formats strfmt.Registry) error {

	if swag.IsZero(m.ActivationDelayAfterPurchase) { // not required
		return nil
	}

	if m.ActivationDelayAfterPurchase != nil {
		if err := m.ActivationDelayAfterPurchase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activationDelayAfterPurchase")
			}
			return err
		}
	}

	return nil
}

func (m *TicketDefinition) validateEntryGates(formats strfmt.Registry) error {

	if swag.IsZero(m.EntryGates) { // not required
		return nil
	}

	if err := validate.UniqueItems("entryGates", "body", m.EntryGates); err != nil {
		return err
	}

	for i := 0; i < len(m.EntryGates); i++ {
		if swag.IsZero(m.EntryGates[i]) { // not required
			continue
		}

		if m.EntryGates[i] != nil {
			if err := m.EntryGates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entryGates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TicketDefinition) validatePossibleAdmissions(formats strfmt.Registry) error {

	if swag.IsZero(m.PossibleAdmissions) { // not required
		return nil
	}

	if m.PossibleAdmissions != nil {
		if err := m.PossibleAdmissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("possibleAdmissions")
			}
			return err
		}
	}

	return nil
}

func (m *TicketDefinition) validateValidityPeriodAfterActivation(formats strfmt.Registry) error {

	if swag.IsZero(m.ValidityPeriodAfterActivation) { // not required
		return nil
	}

	if m.ValidityPeriodAfterActivation != nil {
		if err := m.ValidityPeriodAfterActivation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validityPeriodAfterActivation")
			}
			return err
		}
	}

	return nil
}

func (m *TicketDefinition) validateValidityPeriodAfterEntrance(formats strfmt.Registry) error {

	if swag.IsZero(m.ValidityPeriodAfterEntrance) { // not required
		return nil
	}

	if m.ValidityPeriodAfterEntrance != nil {
		if err := m.ValidityPeriodAfterEntrance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validityPeriodAfterEntrance")
			}
			return err
		}
	}

	return nil
}

func (m *TicketDefinition) validateValidityPeriodDaily(formats strfmt.Registry) error {

	if swag.IsZero(m.ValidityPeriodDaily) { // not required
		return nil
	}

	if m.ValidityPeriodDaily != nil {
		if err := m.ValidityPeriodDaily.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validityPeriodDaily")
			}
			return err
		}
	}

	return nil
}

func (m *TicketDefinition) validateValidityPeriodTotal(formats strfmt.Registry) error {

	if swag.IsZero(m.ValidityPeriodTotal) { // not required
		return nil
	}

	if m.ValidityPeriodTotal != nil {
		if err := m.ValidityPeriodTotal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validityPeriodTotal")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TicketDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TicketDefinition) UnmarshalBinary(b []byte) error {
	var res TicketDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
