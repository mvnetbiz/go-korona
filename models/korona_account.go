// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KoronaAccount korona account
//
// swagger:model KoronaAccount
type KoronaAccount struct {

	// indicates whether the object is active for use or not
	// Read Only: true
	Active *bool `json:"active,omitempty"`

	// active packages
	// Unique: true
	ActivePackages []string `json:"activePackages"`

	// address
	Address *AddressInformation `json:"address,omitempty"`

	// cloud subscription
	CloudSubscription *CloudSubscription `json:"cloudSubscription,omitempty"`

	// company
	Company string `json:"company,omitempty"`

	// global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
	ID string `json:"id,omitempty"`

	// identification
	Identification *CompanyIdentification `json:"identification,omitempty"`

	// number of the object, like it is set in backoffice; will be removed when active=false
	Number string `json:"number,omitempty"`

	// the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.
	// Read Only: true
	Revision int64 `json:"revision,omitempty"`

	// test mode
	TestMode bool `json:"testMode,omitempty"`
}

// Validate validates this korona account
func (m *KoronaAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivePackages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudSubscription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var koronaAccountActivePackagesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INVOICING","FOOD","PLUS","RETAIL","SUPPORT","TICKET","FRANCHISE","VOUCHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		koronaAccountActivePackagesItemsEnum = append(koronaAccountActivePackagesItemsEnum, v)
	}
}

func (m *KoronaAccount) validateActivePackagesItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, koronaAccountActivePackagesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *KoronaAccount) validateActivePackages(formats strfmt.Registry) error {

	if swag.IsZero(m.ActivePackages) { // not required
		return nil
	}

	if err := validate.UniqueItems("activePackages", "body", m.ActivePackages); err != nil {
		return err
	}

	for i := 0; i < len(m.ActivePackages); i++ {

		// value enum
		if err := m.validateActivePackagesItemsEnum("activePackages"+"."+strconv.Itoa(i), "body", m.ActivePackages[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *KoronaAccount) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *KoronaAccount) validateCloudSubscription(formats strfmt.Registry) error {

	if swag.IsZero(m.CloudSubscription) { // not required
		return nil
	}

	if m.CloudSubscription != nil {
		if err := m.CloudSubscription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudSubscription")
			}
			return err
		}
	}

	return nil
}

func (m *KoronaAccount) validateIdentification(formats strfmt.Registry) error {

	if swag.IsZero(m.Identification) { // not required
		return nil
	}

	if m.Identification != nil {
		if err := m.Identification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identification")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KoronaAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KoronaAccount) UnmarshalBinary(b []byte) error {
	var res KoronaAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
