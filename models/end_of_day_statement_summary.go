// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EndOfDayStatementSummary end of day statement summary
//
// swagger:model EndOfDayStatementSummary
type EndOfDayStatementSummary struct {

	// accounts
	// Unique: true
	Accounts []*AccountSummary `json:"accounts"`

	// cashiers
	// Unique: true
	Cashiers []*CashierSummary `json:"cashiers"`

	// commodity groups
	// Unique: true
	CommodityGroups []*CommodityGroupSummary `json:"commodityGroups"`

	// customer groups
	// Unique: true
	CustomerGroups []*CustomerGroupSummary `json:"customerGroups"`

	// payments
	// Unique: true
	Payments []*PaymentSummary `json:"payments"`

	// taxes
	// Unique: true
	Taxes []*TaxSummary `json:"taxes"`
}

// Validate validates this end of day statement summary
func (m *EndOfDayStatementSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCashiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommodityGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EndOfDayStatementSummary) validateAccounts(formats strfmt.Registry) error {

	if swag.IsZero(m.Accounts) { // not required
		return nil
	}

	if err := validate.UniqueItems("accounts", "body", m.Accounts); err != nil {
		return err
	}

	for i := 0; i < len(m.Accounts); i++ {
		if swag.IsZero(m.Accounts[i]) { // not required
			continue
		}

		if m.Accounts[i] != nil {
			if err := m.Accounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EndOfDayStatementSummary) validateCashiers(formats strfmt.Registry) error {

	if swag.IsZero(m.Cashiers) { // not required
		return nil
	}

	if err := validate.UniqueItems("cashiers", "body", m.Cashiers); err != nil {
		return err
	}

	for i := 0; i < len(m.Cashiers); i++ {
		if swag.IsZero(m.Cashiers[i]) { // not required
			continue
		}

		if m.Cashiers[i] != nil {
			if err := m.Cashiers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cashiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EndOfDayStatementSummary) validateCommodityGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.CommodityGroups) { // not required
		return nil
	}

	if err := validate.UniqueItems("commodityGroups", "body", m.CommodityGroups); err != nil {
		return err
	}

	for i := 0; i < len(m.CommodityGroups); i++ {
		if swag.IsZero(m.CommodityGroups[i]) { // not required
			continue
		}

		if m.CommodityGroups[i] != nil {
			if err := m.CommodityGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commodityGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EndOfDayStatementSummary) validateCustomerGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerGroups) { // not required
		return nil
	}

	if err := validate.UniqueItems("customerGroups", "body", m.CustomerGroups); err != nil {
		return err
	}

	for i := 0; i < len(m.CustomerGroups); i++ {
		if swag.IsZero(m.CustomerGroups[i]) { // not required
			continue
		}

		if m.CustomerGroups[i] != nil {
			if err := m.CustomerGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customerGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EndOfDayStatementSummary) validatePayments(formats strfmt.Registry) error {

	if swag.IsZero(m.Payments) { // not required
		return nil
	}

	if err := validate.UniqueItems("payments", "body", m.Payments); err != nil {
		return err
	}

	for i := 0; i < len(m.Payments); i++ {
		if swag.IsZero(m.Payments[i]) { // not required
			continue
		}

		if m.Payments[i] != nil {
			if err := m.Payments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("payments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EndOfDayStatementSummary) validateTaxes(formats strfmt.Registry) error {

	if swag.IsZero(m.Taxes) { // not required
		return nil
	}

	if err := validate.UniqueItems("taxes", "body", m.Taxes); err != nil {
		return err
	}

	for i := 0; i < len(m.Taxes); i++ {
		if swag.IsZero(m.Taxes[i]) { // not required
			continue
		}

		if m.Taxes[i] != nil {
			if err := m.Taxes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taxes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EndOfDayStatementSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EndOfDayStatementSummary) UnmarshalBinary(b []byte) error {
	var res EndOfDayStatementSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
