// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Receipt receipt
//
// swagger:model Receipt
type Receipt struct {

	// account transactions
	AccountTransactions []*AccountTransaction `json:"accountTransactions"`

	// indicates whether the object is active for use or not
	// Read Only: true
	Active *bool `json:"active,omitempty"`

	// additional info
	// Unique: true
	AdditionalInfo []*AdditionalInfo `json:"additionalInfo"`

	// booking time
	// Format: date-time
	BookingTime strfmt.DateTime `json:"bookingTime,omitempty"`

	// cancelled
	Cancelled bool `json:"cancelled,omitempty"`

	// cashier
	Cashier *ModelReference `json:"cashier,omitempty"`

	// creation time
	// Format: date-time
	CreationTime strfmt.DateTime `json:"creationTime,omitempty"`

	// currency
	Currency *ModelReference `json:"currency,omitempty"`

	// customer
	Customer *ModelReference `json:"customer,omitempty"`

	// customer group
	CustomerGroup *ModelReference `json:"customerGroup,omitempty"`

	// deposit amount
	DepositAmount float64 `json:"depositAmount,omitempty"`

	// geo location
	GeoLocation *GeoLocation `json:"geoLocation,omitempty"`

	// global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
	ID string `json:"id,omitempty"`

	// info texts
	InfoTexts []string `json:"infoTexts"`

	// items
	Items []*ReceiptItem `json:"items"`

	// number of the object, like it is set in backoffice; will be removed when active=false
	Number string `json:"number,omitempty"`

	// order number
	OrderNumber string `json:"orderNumber,omitempty"`

	// organizational unit
	// Read Only: true
	OrganizationalUnit *ModelReference `json:"organizationalUnit,omitempty"`

	// payments
	Payments []*Payment `json:"payments"`

	// point of sale
	// Read Only: true
	PointOfSale *ModelReference `json:"pointOfSale,omitempty"`

	// price group
	PriceGroup *ModelReference `json:"priceGroup,omitempty"`

	// the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.
	// Read Only: true
	Revision int64 `json:"revision,omitempty"`

	// signature
	Signature *Signature `json:"signature,omitempty"`

	// voided
	Voided bool `json:"voided,omitempty"`

	// zcounter
	Zcounter int64 `json:"zcounter,omitempty"`
}

// Validate validates this receipt
func (m *Receipt) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountTransactions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdditionalInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBookingTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCashier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeoLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationalUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePointOfSale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Receipt) validateAccountTransactions(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountTransactions) { // not required
		return nil
	}

	for i := 0; i < len(m.AccountTransactions); i++ {
		if swag.IsZero(m.AccountTransactions[i]) { // not required
			continue
		}

		if m.AccountTransactions[i] != nil {
			if err := m.AccountTransactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accountTransactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Receipt) validateAdditionalInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalInfo) { // not required
		return nil
	}

	if err := validate.UniqueItems("additionalInfo", "body", m.AdditionalInfo); err != nil {
		return err
	}

	for i := 0; i < len(m.AdditionalInfo); i++ {
		if swag.IsZero(m.AdditionalInfo[i]) { // not required
			continue
		}

		if m.AdditionalInfo[i] != nil {
			if err := m.AdditionalInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additionalInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Receipt) validateBookingTime(formats strfmt.Registry) error {

	if swag.IsZero(m.BookingTime) { // not required
		return nil
	}

	if err := validate.FormatOf("bookingTime", "body", "date-time", m.BookingTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Receipt) validateCashier(formats strfmt.Registry) error {

	if swag.IsZero(m.Cashier) { // not required
		return nil
	}

	if m.Cashier != nil {
		if err := m.Cashier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cashier")
			}
			return err
		}
	}

	return nil
}

func (m *Receipt) validateCreationTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("creationTime", "body", "date-time", m.CreationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Receipt) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	if m.Currency != nil {
		if err := m.Currency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency")
			}
			return err
		}
	}

	return nil
}

func (m *Receipt) validateCustomer(formats strfmt.Registry) error {

	if swag.IsZero(m.Customer) { // not required
		return nil
	}

	if m.Customer != nil {
		if err := m.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

func (m *Receipt) validateCustomerGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerGroup) { // not required
		return nil
	}

	if m.CustomerGroup != nil {
		if err := m.CustomerGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customerGroup")
			}
			return err
		}
	}

	return nil
}

func (m *Receipt) validateGeoLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.GeoLocation) { // not required
		return nil
	}

	if m.GeoLocation != nil {
		if err := m.GeoLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geoLocation")
			}
			return err
		}
	}

	return nil
}

func (m *Receipt) validateItems(formats strfmt.Registry) error {

	if swag.IsZero(m.Items) { // not required
		return nil
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Receipt) validateOrganizationalUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganizationalUnit) { // not required
		return nil
	}

	if m.OrganizationalUnit != nil {
		if err := m.OrganizationalUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organizationalUnit")
			}
			return err
		}
	}

	return nil
}

func (m *Receipt) validatePayments(formats strfmt.Registry) error {

	if swag.IsZero(m.Payments) { // not required
		return nil
	}

	for i := 0; i < len(m.Payments); i++ {
		if swag.IsZero(m.Payments[i]) { // not required
			continue
		}

		if m.Payments[i] != nil {
			if err := m.Payments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("payments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Receipt) validatePointOfSale(formats strfmt.Registry) error {

	if swag.IsZero(m.PointOfSale) { // not required
		return nil
	}

	if m.PointOfSale != nil {
		if err := m.PointOfSale.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pointOfSale")
			}
			return err
		}
	}

	return nil
}

func (m *Receipt) validatePriceGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.PriceGroup) { // not required
		return nil
	}

	if m.PriceGroup != nil {
		if err := m.PriceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("priceGroup")
			}
			return err
		}
	}

	return nil
}

func (m *Receipt) validateSignature(formats strfmt.Registry) error {

	if swag.IsZero(m.Signature) { // not required
		return nil
	}

	if m.Signature != nil {
		if err := m.Signature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signature")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Receipt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Receipt) UnmarshalBinary(b []byte) error {
	var res Receipt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
