// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MethodNotAllowedError method not allowed error
//
// swagger:model MethodNotAllowedError
type MethodNotAllowedError struct {

	// the code for client-side evaluation of the error
	// Enum: [NOT_PERMITTED]
	Code string `json:"code,omitempty"`

	// a short description of the error in english
	Message string `json:"message,omitempty"`
}

// Validate validates this method not allowed error
func (m *MethodNotAllowedError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var methodNotAllowedErrorTypeCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NOT_PERMITTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		methodNotAllowedErrorTypeCodePropEnum = append(methodNotAllowedErrorTypeCodePropEnum, v)
	}
}

const (

	// MethodNotAllowedErrorCodeNOTPERMITTED captures enum value "NOT_PERMITTED"
	MethodNotAllowedErrorCodeNOTPERMITTED string = "NOT_PERMITTED"
)

// prop value enum
func (m *MethodNotAllowedError) validateCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, methodNotAllowedErrorTypeCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MethodNotAllowedError) validateCode(formats strfmt.Registry) error {

	if swag.IsZero(m.Code) { // not required
		return nil
	}

	// value enum
	if err := m.validateCodeEnum("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MethodNotAllowedError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MethodNotAllowedError) UnmarshalBinary(b []byte) error {
	var res MethodNotAllowedError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
