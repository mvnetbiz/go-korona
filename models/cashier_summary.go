// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CashierSummary cashier summary
//
// swagger:model CashierSummary
type CashierSummary struct {

	// cancelled items
	CancelledItems *AmountCountData `json:"cancelledItems,omitempty"`

	// cancelled receipts
	CancelledReceipts *AmountCountData `json:"cancelledReceipts,omitempty"`

	// cashier
	Cashier *ModelReference `json:"cashier,omitempty"`

	// receipts
	Receipts *AmountCountData `json:"receipts,omitempty"`

	// returns
	Returns *AmountCountData `json:"returns,omitempty"`

	// voided receipts
	VoidedReceipts *AmountCountData `json:"voidedReceipts,omitempty"`
}

// Validate validates this cashier summary
func (m *CashierSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCancelledItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCancelledReceipts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCashier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceipts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVoidedReceipts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CashierSummary) validateCancelledItems(formats strfmt.Registry) error {

	if swag.IsZero(m.CancelledItems) { // not required
		return nil
	}

	if m.CancelledItems != nil {
		if err := m.CancelledItems.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cancelledItems")
			}
			return err
		}
	}

	return nil
}

func (m *CashierSummary) validateCancelledReceipts(formats strfmt.Registry) error {

	if swag.IsZero(m.CancelledReceipts) { // not required
		return nil
	}

	if m.CancelledReceipts != nil {
		if err := m.CancelledReceipts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cancelledReceipts")
			}
			return err
		}
	}

	return nil
}

func (m *CashierSummary) validateCashier(formats strfmt.Registry) error {

	if swag.IsZero(m.Cashier) { // not required
		return nil
	}

	if m.Cashier != nil {
		if err := m.Cashier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cashier")
			}
			return err
		}
	}

	return nil
}

func (m *CashierSummary) validateReceipts(formats strfmt.Registry) error {

	if swag.IsZero(m.Receipts) { // not required
		return nil
	}

	if m.Receipts != nil {
		if err := m.Receipts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receipts")
			}
			return err
		}
	}

	return nil
}

func (m *CashierSummary) validateReturns(formats strfmt.Registry) error {

	if swag.IsZero(m.Returns) { // not required
		return nil
	}

	if m.Returns != nil {
		if err := m.Returns.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("returns")
			}
			return err
		}
	}

	return nil
}

func (m *CashierSummary) validateVoidedReceipts(formats strfmt.Registry) error {

	if swag.IsZero(m.VoidedReceipts) { // not required
		return nil
	}

	if m.VoidedReceipts != nil {
		if err := m.VoidedReceipts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("voidedReceipts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CashierSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CashierSummary) UnmarshalBinary(b []byte) error {
	var res CashierSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
