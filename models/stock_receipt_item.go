// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StockReceiptItem stock receipt item
//
// swagger:model StockReceiptItem
type StockReceiptItem struct {

	// amount
	Amount *StockReceiptItemAmount `json:"amount,omitempty"`

	// identification
	Identification *StockReceiptItemIdentification `json:"identification,omitempty"`

	// index
	// Read Only: true
	Index int32 `json:"index,omitempty"`

	// product
	Product *ModelReference `json:"product,omitempty"`

	// purchase price
	PurchasePrice *StockReceiptItemPurchasePrice `json:"purchasePrice,omitempty"`

	// revision
	// Read Only: true
	Revision int64 `json:"revision,omitempty"`

	// shelf life
	// Format: date-time
	ShelfLife strfmt.DateTime `json:"shelfLife,omitempty"`
}

// Validate validates this stock receipt item
func (m *StockReceiptItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurchasePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShelfLife(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockReceiptItem) validateAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

func (m *StockReceiptItem) validateIdentification(formats strfmt.Registry) error {

	if swag.IsZero(m.Identification) { // not required
		return nil
	}

	if m.Identification != nil {
		if err := m.Identification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identification")
			}
			return err
		}
	}

	return nil
}

func (m *StockReceiptItem) validateProduct(formats strfmt.Registry) error {

	if swag.IsZero(m.Product) { // not required
		return nil
	}

	if m.Product != nil {
		if err := m.Product.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("product")
			}
			return err
		}
	}

	return nil
}

func (m *StockReceiptItem) validatePurchasePrice(formats strfmt.Registry) error {

	if swag.IsZero(m.PurchasePrice) { // not required
		return nil
	}

	if m.PurchasePrice != nil {
		if err := m.PurchasePrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("purchasePrice")
			}
			return err
		}
	}

	return nil
}

func (m *StockReceiptItem) validateShelfLife(formats strfmt.Registry) error {

	if swag.IsZero(m.ShelfLife) { // not required
		return nil
	}

	if err := validate.FormatOf("shelfLife", "body", "date-time", m.ShelfLife.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StockReceiptItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StockReceiptItem) UnmarshalBinary(b []byte) error {
	var res StockReceiptItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
