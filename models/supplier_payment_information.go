// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SupplierPaymentInformation supplier payment information
//
// swagger:model SupplierPaymentInformation
type SupplierPaymentInformation struct {

	// account number
	AccountNumber string `json:"accountNumber,omitempty"`

	// bank
	Bank string `json:"bank,omitempty"`

	// bank number
	BankNumber string `json:"bankNumber,omitempty"`

	// bic
	Bic string `json:"bic,omitempty"`

	// creditor identifier
	CreditorIdentifier string `json:"creditorIdentifier,omitempty"`

	// currency
	Currency *ModelReference `json:"currency,omitempty"`

	// iban
	Iban string `json:"iban,omitempty"`

	// minimum order value
	MinimumOrderValue float64 `json:"minimumOrderValue,omitempty"`

	// payment method
	// Enum: [INVOICE PREPAYMENT CASH_ON_DELIVERY DIRECT_DEBIT]
	PaymentMethod string `json:"paymentMethod,omitempty"`
}

// Validate validates this supplier payment information
func (m *SupplierPaymentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SupplierPaymentInformation) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	if m.Currency != nil {
		if err := m.Currency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency")
			}
			return err
		}
	}

	return nil
}

var supplierPaymentInformationTypePaymentMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INVOICE","PREPAYMENT","CASH_ON_DELIVERY","DIRECT_DEBIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		supplierPaymentInformationTypePaymentMethodPropEnum = append(supplierPaymentInformationTypePaymentMethodPropEnum, v)
	}
}

const (

	// SupplierPaymentInformationPaymentMethodINVOICE captures enum value "INVOICE"
	SupplierPaymentInformationPaymentMethodINVOICE string = "INVOICE"

	// SupplierPaymentInformationPaymentMethodPREPAYMENT captures enum value "PREPAYMENT"
	SupplierPaymentInformationPaymentMethodPREPAYMENT string = "PREPAYMENT"

	// SupplierPaymentInformationPaymentMethodCASHONDELIVERY captures enum value "CASH_ON_DELIVERY"
	SupplierPaymentInformationPaymentMethodCASHONDELIVERY string = "CASH_ON_DELIVERY"

	// SupplierPaymentInformationPaymentMethodDIRECTDEBIT captures enum value "DIRECT_DEBIT"
	SupplierPaymentInformationPaymentMethodDIRECTDEBIT string = "DIRECT_DEBIT"
)

// prop value enum
func (m *SupplierPaymentInformation) validatePaymentMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, supplierPaymentInformationTypePaymentMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SupplierPaymentInformation) validatePaymentMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validatePaymentMethodEnum("paymentMethod", "body", m.PaymentMethod); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SupplierPaymentInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SupplierPaymentInformation) UnmarshalBinary(b []byte) error {
	var res SupplierPaymentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
