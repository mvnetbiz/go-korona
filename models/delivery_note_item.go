// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeliveryNoteItem delivery note item
//
// swagger:model DeliveryNoteItem
type DeliveryNoteItem struct {

	// commodity group
	CommodityGroup *ModelReference `json:"commodityGroup,omitempty"`

	// indent
	Indent int32 `json:"indent,omitempty"`

	// info texts
	InfoTexts []string `json:"infoTexts"`

	// product
	Product *ModelReference `json:"product,omitempty"`

	// quantity
	Quantity float64 `json:"quantity,omitempty"`

	// sector
	Sector *ModelReference `json:"sector,omitempty"`

	// serial numbers
	SerialNumbers []string `json:"serialNumbers"`

	// total
	Total *TotalPrice `json:"total,omitempty"`
}

// Validate validates this delivery note item
func (m *DeliveryNoteItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommodityGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeliveryNoteItem) validateCommodityGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.CommodityGroup) { // not required
		return nil
	}

	if m.CommodityGroup != nil {
		if err := m.CommodityGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commodityGroup")
			}
			return err
		}
	}

	return nil
}

func (m *DeliveryNoteItem) validateProduct(formats strfmt.Registry) error {

	if swag.IsZero(m.Product) { // not required
		return nil
	}

	if m.Product != nil {
		if err := m.Product.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("product")
			}
			return err
		}
	}

	return nil
}

func (m *DeliveryNoteItem) validateSector(formats strfmt.Registry) error {

	if swag.IsZero(m.Sector) { // not required
		return nil
	}

	if m.Sector != nil {
		if err := m.Sector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sector")
			}
			return err
		}
	}

	return nil
}

func (m *DeliveryNoteItem) validateTotal(formats strfmt.Registry) error {

	if swag.IsZero(m.Total) { // not required
		return nil
	}

	if m.Total != nil {
		if err := m.Total.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeliveryNoteItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeliveryNoteItem) UnmarshalBinary(b []byte) error {
	var res DeliveryNoteItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
