// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SalesTax sales tax
//
// swagger:model SalesTax
type SalesTax struct {

	// indicates whether the object is active for use or not
	// Read Only: true
	Active *bool `json:"active,omitempty"`

	// economic zone
	EconomicZone *ModelReference `json:"economicZone,omitempty"`

	// global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
	ID string `json:"id,omitempty"`

	// included
	Included bool `json:"included,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// number of the object, like it is set in backoffice; will be removed when active=false
	Number string `json:"number,omitempty"`

	// rates
	Rates []*SalesTaxRate `json:"rates"`

	// the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.
	// Read Only: true
	Revision int64 `json:"revision,omitempty"`
}

// Validate validates this sales tax
func (m *SalesTax) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEconomicZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SalesTax) validateEconomicZone(formats strfmt.Registry) error {

	if swag.IsZero(m.EconomicZone) { // not required
		return nil
	}

	if m.EconomicZone != nil {
		if err := m.EconomicZone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("economicZone")
			}
			return err
		}
	}

	return nil
}

func (m *SalesTax) validateRates(formats strfmt.Registry) error {

	if swag.IsZero(m.Rates) { // not required
		return nil
	}

	for i := 0; i < len(m.Rates); i++ {
		if swag.IsZero(m.Rates[i]) { // not required
			continue
		}

		if m.Rates[i] != nil {
			if err := m.Rates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SalesTax) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SalesTax) UnmarshalBinary(b []byte) error {
	var res SalesTax
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
