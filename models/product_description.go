// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductDescription product description
//
// swagger:model ProductDescription
type ProductDescription struct {

	// language
	Language *ModelReference `json:"language,omitempty"`

	// text
	Text string `json:"text,omitempty"`

	// type
	// Enum: [ALLERGENS MANUAL DESCRIPTION ORDER_TEXT RECEIPT_TEXT INGREDIENTS NUTRITIONAL_VALUE CARE_INSTRUCTIONS RECIPE CERTIFICATE WARRANTY_TEXT INFO_URL ADDITIVES LABEL_TEXT MANUFACTURER]
	Type string `json:"type,omitempty"`
}

// Validate validates this product description
func (m *ProductDescription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductDescription) validateLanguage(formats strfmt.Registry) error {

	if swag.IsZero(m.Language) { // not required
		return nil
	}

	if m.Language != nil {
		if err := m.Language.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language")
			}
			return err
		}
	}

	return nil
}

var productDescriptionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALLERGENS","MANUAL","DESCRIPTION","ORDER_TEXT","RECEIPT_TEXT","INGREDIENTS","NUTRITIONAL_VALUE","CARE_INSTRUCTIONS","RECIPE","CERTIFICATE","WARRANTY_TEXT","INFO_URL","ADDITIVES","LABEL_TEXT","MANUFACTURER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productDescriptionTypeTypePropEnum = append(productDescriptionTypeTypePropEnum, v)
	}
}

const (

	// ProductDescriptionTypeALLERGENS captures enum value "ALLERGENS"
	ProductDescriptionTypeALLERGENS string = "ALLERGENS"

	// ProductDescriptionTypeMANUAL captures enum value "MANUAL"
	ProductDescriptionTypeMANUAL string = "MANUAL"

	// ProductDescriptionTypeDESCRIPTION captures enum value "DESCRIPTION"
	ProductDescriptionTypeDESCRIPTION string = "DESCRIPTION"

	// ProductDescriptionTypeORDERTEXT captures enum value "ORDER_TEXT"
	ProductDescriptionTypeORDERTEXT string = "ORDER_TEXT"

	// ProductDescriptionTypeRECEIPTTEXT captures enum value "RECEIPT_TEXT"
	ProductDescriptionTypeRECEIPTTEXT string = "RECEIPT_TEXT"

	// ProductDescriptionTypeINGREDIENTS captures enum value "INGREDIENTS"
	ProductDescriptionTypeINGREDIENTS string = "INGREDIENTS"

	// ProductDescriptionTypeNUTRITIONALVALUE captures enum value "NUTRITIONAL_VALUE"
	ProductDescriptionTypeNUTRITIONALVALUE string = "NUTRITIONAL_VALUE"

	// ProductDescriptionTypeCAREINSTRUCTIONS captures enum value "CARE_INSTRUCTIONS"
	ProductDescriptionTypeCAREINSTRUCTIONS string = "CARE_INSTRUCTIONS"

	// ProductDescriptionTypeRECIPE captures enum value "RECIPE"
	ProductDescriptionTypeRECIPE string = "RECIPE"

	// ProductDescriptionTypeCERTIFICATE captures enum value "CERTIFICATE"
	ProductDescriptionTypeCERTIFICATE string = "CERTIFICATE"

	// ProductDescriptionTypeWARRANTYTEXT captures enum value "WARRANTY_TEXT"
	ProductDescriptionTypeWARRANTYTEXT string = "WARRANTY_TEXT"

	// ProductDescriptionTypeINFOURL captures enum value "INFO_URL"
	ProductDescriptionTypeINFOURL string = "INFO_URL"

	// ProductDescriptionTypeADDITIVES captures enum value "ADDITIVES"
	ProductDescriptionTypeADDITIVES string = "ADDITIVES"

	// ProductDescriptionTypeLABELTEXT captures enum value "LABEL_TEXT"
	ProductDescriptionTypeLABELTEXT string = "LABEL_TEXT"

	// ProductDescriptionTypeMANUFACTURER captures enum value "MANUFACTURER"
	ProductDescriptionTypeMANUFACTURER string = "MANUFACTURER"
)

// prop value enum
func (m *ProductDescription) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, productDescriptionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProductDescription) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductDescription) UnmarshalBinary(b []byte) error {
	var res ProductDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
