// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InfoText info text
//
// swagger:model InfoText
type InfoText struct {

	// indicates whether the object is active for use or not
	// Read Only: true
	Active *bool `json:"active,omitempty"`

	// global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
	ID string `json:"id,omitempty"`

	// number of the object, like it is set in backoffice; will be removed when active=false
	Number string `json:"number,omitempty"`

	// the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.
	// Read Only: true
	Revision int64 `json:"revision,omitempty"`

	// text
	Text string `json:"text,omitempty"`

	// type
	// Enum: [ITEM POPUP RECEIPT]
	Type string `json:"type,omitempty"`
}

// Validate validates this info text
func (m *InfoText) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var infoTextTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ITEM","POPUP","RECEIPT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		infoTextTypeTypePropEnum = append(infoTextTypeTypePropEnum, v)
	}
}

const (

	// InfoTextTypeITEM captures enum value "ITEM"
	InfoTextTypeITEM string = "ITEM"

	// InfoTextTypePOPUP captures enum value "POPUP"
	InfoTextTypePOPUP string = "POPUP"

	// InfoTextTypeRECEIPT captures enum value "RECEIPT"
	InfoTextTypeRECEIPT string = "RECEIPT"
)

// prop value enum
func (m *InfoText) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, infoTextTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InfoText) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InfoText) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfoText) UnmarshalBinary(b []byte) error {
	var res InfoText
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
