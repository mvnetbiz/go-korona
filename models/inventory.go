// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Inventory inventory
//
// swagger:model Inventory
type Inventory struct {

	// indicates whether the object is active for use or not
	// Read Only: true
	Active *bool `json:"active,omitempty"`

	// automatic booking
	AutomaticBooking bool `json:"automaticBooking,omitempty"`

	// only if isAutomaticBooking=true
	AutomaticBookingAfterDays int32 `json:"automaticBookingAfterDays,omitempty"`

	// check product assortment validity
	CheckProductAssortmentValidity bool `json:"checkProductAssortmentValidity,omitempty"`

	// check product listing
	CheckProductListing bool `json:"checkProductListing,omitempty"`

	// create time
	// Format: date-time
	CreateTime strfmt.DateTime `json:"createTime,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// only if type=PERPETUAL_INVENTORY
	// Unique: true
	ExecutionDays []string `json:"executionDays"`

	// execution time
	// Format: date-time
	ExecutionTime strfmt.DateTime `json:"executionTime,omitempty"`

	// has booked receipts
	HasBookedReceipts bool `json:"hasBookedReceipts,omitempty"`

	// global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
	ID string `json:"id,omitempty"`

	// only if type=ANNUAL_INVENTORY | INVENTORY_IRREGULARITY
	MaxProductsPerList int32 `json:"maxProductsPerList,omitempty"`

	// number of the object, like it is set in backoffice; will be removed when active=false
	Number string `json:"number,omitempty"`

	// only if type=ANNUAL_INVENTORY | INVENTORY_IRREGULARITY
	OneCommodityGroupPerInventoryList bool `json:"oneCommodityGroupPerInventoryList,omitempty"`

	// only if type=INVENTORY_IRREGULARITY
	OnlyNegativeProductStocks bool `json:"onlyNegativeProductStocks,omitempty"`

	// organizational units
	// Unique: true
	OrganizationalUnits []*ModelReference `json:"organizationalUnits"`

	// product filter
	// Enum: [ACTIVE ALL DEACTIVATED]
	ProductFilter string `json:"productFilter,omitempty"`

	// the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.
	// Read Only: true
	Revision int64 `json:"revision,omitempty"`

	// type
	// Enum: [ANNUAL_INVENTORY INVENTORY_IRREGULARITY INVENTORY_SAMPLING PERPETUAL_INVENTORY]
	Type string `json:"type,omitempty"`
}

// Validate validates this inventory
func (m *Inventory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationalUnits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Inventory) validateCreateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("createTime", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var inventoryExecutionDaysItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		inventoryExecutionDaysItemsEnum = append(inventoryExecutionDaysItemsEnum, v)
	}
}

func (m *Inventory) validateExecutionDaysItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, inventoryExecutionDaysItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *Inventory) validateExecutionDays(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecutionDays) { // not required
		return nil
	}

	if err := validate.UniqueItems("executionDays", "body", m.ExecutionDays); err != nil {
		return err
	}

	for i := 0; i < len(m.ExecutionDays); i++ {

		// value enum
		if err := m.validateExecutionDaysItemsEnum("executionDays"+"."+strconv.Itoa(i), "body", m.ExecutionDays[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *Inventory) validateExecutionTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecutionTime) { // not required
		return nil
	}

	if err := validate.FormatOf("executionTime", "body", "date-time", m.ExecutionTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Inventory) validateOrganizationalUnits(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganizationalUnits) { // not required
		return nil
	}

	if err := validate.UniqueItems("organizationalUnits", "body", m.OrganizationalUnits); err != nil {
		return err
	}

	for i := 0; i < len(m.OrganizationalUnits); i++ {
		if swag.IsZero(m.OrganizationalUnits[i]) { // not required
			continue
		}

		if m.OrganizationalUnits[i] != nil {
			if err := m.OrganizationalUnits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("organizationalUnits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var inventoryTypeProductFilterPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","ALL","DEACTIVATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		inventoryTypeProductFilterPropEnum = append(inventoryTypeProductFilterPropEnum, v)
	}
}

const (

	// InventoryProductFilterACTIVE captures enum value "ACTIVE"
	InventoryProductFilterACTIVE string = "ACTIVE"

	// InventoryProductFilterALL captures enum value "ALL"
	InventoryProductFilterALL string = "ALL"

	// InventoryProductFilterDEACTIVATED captures enum value "DEACTIVATED"
	InventoryProductFilterDEACTIVATED string = "DEACTIVATED"
)

// prop value enum
func (m *Inventory) validateProductFilterEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, inventoryTypeProductFilterPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Inventory) validateProductFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductFilter) { // not required
		return nil
	}

	// value enum
	if err := m.validateProductFilterEnum("productFilter", "body", m.ProductFilter); err != nil {
		return err
	}

	return nil
}

var inventoryTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ANNUAL_INVENTORY","INVENTORY_IRREGULARITY","INVENTORY_SAMPLING","PERPETUAL_INVENTORY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		inventoryTypeTypePropEnum = append(inventoryTypeTypePropEnum, v)
	}
}

const (

	// InventoryTypeANNUALINVENTORY captures enum value "ANNUAL_INVENTORY"
	InventoryTypeANNUALINVENTORY string = "ANNUAL_INVENTORY"

	// InventoryTypeINVENTORYIRREGULARITY captures enum value "INVENTORY_IRREGULARITY"
	InventoryTypeINVENTORYIRREGULARITY string = "INVENTORY_IRREGULARITY"

	// InventoryTypeINVENTORYSAMPLING captures enum value "INVENTORY_SAMPLING"
	InventoryTypeINVENTORYSAMPLING string = "INVENTORY_SAMPLING"

	// InventoryTypePERPETUALINVENTORY captures enum value "PERPETUAL_INVENTORY"
	InventoryTypePERPETUALINVENTORY string = "PERPETUAL_INVENTORY"
)

// prop value enum
func (m *Inventory) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, inventoryTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Inventory) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Inventory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Inventory) UnmarshalBinary(b []byte) error {
	var res Inventory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
