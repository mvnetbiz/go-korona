// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrganizationalUnit organizational unit
//
// swagger:model OrganizationalUnit
type OrganizationalUnit struct {

	// indicates whether the object is active for use or not
	// Read Only: true
	Active *bool `json:"active,omitempty"`

	// address
	Address *AddressInformation `json:"address,omitempty"`

	// cost center
	// Read Only: true
	CostCenter *ModelReference `json:"costCenter,omitempty"`

	// economic zone
	EconomicZone *ModelReference `json:"economicZone,omitempty"`

	// eh number
	EhNumber int64 `json:"ehNumber,omitempty"`

	// global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
	ID string `json:"id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// number of the object, like it is set in backoffice; will be removed when active=false
	Number string `json:"number,omitempty"`

	// opening hours
	// Unique: true
	OpeningHours []*OpeningHours `json:"openingHours"`

	// parent organizational unit
	ParentOrganizationalUnit *ModelReference `json:"parentOrganizationalUnit,omitempty"`

	// price group
	PriceGroup *ModelReference `json:"priceGroup,omitempty"`

	// the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.
	// Read Only: true
	Revision int64 `json:"revision,omitempty"`

	// warehouse
	Warehouse bool `json:"warehouse,omitempty"`
}

// Validate validates this organizational unit
func (m *OrganizationalUnit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCostCenter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEconomicZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpeningHours(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentOrganizationalUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationalUnit) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationalUnit) validateCostCenter(formats strfmt.Registry) error {

	if swag.IsZero(m.CostCenter) { // not required
		return nil
	}

	if m.CostCenter != nil {
		if err := m.CostCenter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("costCenter")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationalUnit) validateEconomicZone(formats strfmt.Registry) error {

	if swag.IsZero(m.EconomicZone) { // not required
		return nil
	}

	if m.EconomicZone != nil {
		if err := m.EconomicZone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("economicZone")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationalUnit) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *OrganizationalUnit) validateOpeningHours(formats strfmt.Registry) error {

	if swag.IsZero(m.OpeningHours) { // not required
		return nil
	}

	if err := validate.UniqueItems("openingHours", "body", m.OpeningHours); err != nil {
		return err
	}

	for i := 0; i < len(m.OpeningHours); i++ {
		if swag.IsZero(m.OpeningHours[i]) { // not required
			continue
		}

		if m.OpeningHours[i] != nil {
			if err := m.OpeningHours[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("openingHours" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrganizationalUnit) validateParentOrganizationalUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentOrganizationalUnit) { // not required
		return nil
	}

	if m.ParentOrganizationalUnit != nil {
		if err := m.ParentOrganizationalUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentOrganizationalUnit")
			}
			return err
		}
	}

	return nil
}

func (m *OrganizationalUnit) validatePriceGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.PriceGroup) { // not required
		return nil
	}

	if m.PriceGroup != nil {
		if err := m.PriceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("priceGroup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrganizationalUnit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrganizationalUnit) UnmarshalBinary(b []byte) error {
	var res OrganizationalUnit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
