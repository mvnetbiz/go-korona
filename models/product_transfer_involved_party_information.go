// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProductTransferInvolvedPartyInformation product transfer involved party information
//
// swagger:model ProductTransferInvolvedPartyInformation
type ProductTransferInvolvedPartyInformation struct {

	// buyer
	Buyer *ProductTransferInvolvedPartyInformationData `json:"buyer,omitempty"`

	// delivery address
	DeliveryAddress *ProductTransferInvolvedPartyInformationData `json:"deliveryAddress,omitempty"`

	// final recipient
	FinalRecipient *ProductTransferInvolvedPartyInformationData `json:"finalRecipient,omitempty"`

	// invoice recipient
	InvoiceRecipient *ProductTransferInvolvedPartyInformationData `json:"invoiceRecipient,omitempty"`

	// supplier
	Supplier *ProductTransferInvolvedPartyInformationData `json:"supplier,omitempty"`

	// transport service provider
	TransportServiceProvider *ProductTransferInvolvedPartyInformationData `json:"transportServiceProvider,omitempty"`
}

// Validate validates this product transfer involved party information
func (m *ProductTransferInvolvedPartyInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuyer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinalRecipient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceRecipient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupplier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransportServiceProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductTransferInvolvedPartyInformation) validateBuyer(formats strfmt.Registry) error {

	if swag.IsZero(m.Buyer) { // not required
		return nil
	}

	if m.Buyer != nil {
		if err := m.Buyer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buyer")
			}
			return err
		}
	}

	return nil
}

func (m *ProductTransferInvolvedPartyInformation) validateDeliveryAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.DeliveryAddress) { // not required
		return nil
	}

	if m.DeliveryAddress != nil {
		if err := m.DeliveryAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliveryAddress")
			}
			return err
		}
	}

	return nil
}

func (m *ProductTransferInvolvedPartyInformation) validateFinalRecipient(formats strfmt.Registry) error {

	if swag.IsZero(m.FinalRecipient) { // not required
		return nil
	}

	if m.FinalRecipient != nil {
		if err := m.FinalRecipient.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("finalRecipient")
			}
			return err
		}
	}

	return nil
}

func (m *ProductTransferInvolvedPartyInformation) validateInvoiceRecipient(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoiceRecipient) { // not required
		return nil
	}

	if m.InvoiceRecipient != nil {
		if err := m.InvoiceRecipient.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invoiceRecipient")
			}
			return err
		}
	}

	return nil
}

func (m *ProductTransferInvolvedPartyInformation) validateSupplier(formats strfmt.Registry) error {

	if swag.IsZero(m.Supplier) { // not required
		return nil
	}

	if m.Supplier != nil {
		if err := m.Supplier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supplier")
			}
			return err
		}
	}

	return nil
}

func (m *ProductTransferInvolvedPartyInformation) validateTransportServiceProvider(formats strfmt.Registry) error {

	if swag.IsZero(m.TransportServiceProvider) { // not required
		return nil
	}

	if m.TransportServiceProvider != nil {
		if err := m.TransportServiceProvider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transportServiceProvider")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductTransferInvolvedPartyInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductTransferInvolvedPartyInformation) UnmarshalBinary(b []byte) error {
	var res ProductTransferInvolvedPartyInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
