// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Cashier cashier
//
// swagger:model Cashier
type Cashier struct {

	// indicates whether the object is active for use or not
	// Read Only: true
	Active *bool `json:"active,omitempty"`

	// alias
	Alias string `json:"alias,omitempty"`

	// deactivated
	Deactivated bool `json:"deactivated,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// firstname
	Firstname string `json:"firstname,omitempty"`

	// gender
	// Enum: [MALE FEMALE]
	Gender string `json:"gender,omitempty"`

	// global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
	ID string `json:"id,omitempty"`

	// contains the md5 hash of the cashiers login code
	LoginCode string `json:"loginCode,omitempty"`

	// contains the md5 hash of the cashiers login password
	LoginPassword string `json:"loginPassword,omitempty"`

	// number of the object, like it is set in backoffice; will be removed when active=false
	Number string `json:"number,omitempty"`

	// permissions
	// Unique: true
	Permissions []string `json:"permissions"`

	// the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.
	// Read Only: true
	Revision int64 `json:"revision,omitempty"`

	// role
	Role string `json:"role,omitempty"`

	// surname
	Surname string `json:"surname,omitempty"`
}

// Validate validates this cashier
func (m *Cashier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cashierTypeGenderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MALE","FEMALE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cashierTypeGenderPropEnum = append(cashierTypeGenderPropEnum, v)
	}
}

const (

	// CashierGenderMALE captures enum value "MALE"
	CashierGenderMALE string = "MALE"

	// CashierGenderFEMALE captures enum value "FEMALE"
	CashierGenderFEMALE string = "FEMALE"
)

// prop value enum
func (m *Cashier) validateGenderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cashierTypeGenderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Cashier) validateGender(formats strfmt.Registry) error {

	if swag.IsZero(m.Gender) { // not required
		return nil
	}

	// value enum
	if err := m.validateGenderEnum("gender", "body", m.Gender); err != nil {
		return err
	}

	return nil
}

var cashierPermissionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BLANK_RECEIPT","CANCEL_ITEM","CANCEL_LAST_RECEIPT_ITEM","CANCEL_RECEIPT","DELETE_RECEIPT","EXTERNAL_POINT_OF_SALE","FOREIGN_RECEIPT","MDE_ADMIN","PRICE","REPORTS","RETURN","REVISION","TERMINATE_BREAK_LOCK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cashierPermissionsItemsEnum = append(cashierPermissionsItemsEnum, v)
	}
}

func (m *Cashier) validatePermissionsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cashierPermissionsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *Cashier) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	if err := validate.UniqueItems("permissions", "body", m.Permissions); err != nil {
		return err
	}

	for i := 0; i < len(m.Permissions); i++ {

		// value enum
		if err := m.validatePermissionsItemsEnum("permissions"+"."+strconv.Itoa(i), "body", m.Permissions[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Cashier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Cashier) UnmarshalBinary(b []byte) error {
	var res Cashier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
