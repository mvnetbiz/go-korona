// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BadRequestError bad request error
//
// swagger:model BadRequestError
type BadRequestError struct {

	// the code for client-side evaluation of the error
	// Enum: [BATCH_SIZE_OUT_OF_RANGE DATE_NOT_EXISTS INVALID_MODEL_PROPERTY INVALID_QUERY_PARAMETER MALFORMED_MODEL_ID_OR_DATE MALFORMED_MODEL_ID_OR_NUMBER MISSING_MODEL MISSING_QUERY_PARAMETER NUMBER_ALREADY_IN_USE NUMBER_NOT_EXISTS SUBMITTED_DATA_NOT_WELLFORMED]
	Code string `json:"code,omitempty"`

	// a short description of the error in english
	Message string `json:"message,omitempty"`
}

// Validate validates this bad request error
func (m *BadRequestError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var badRequestErrorTypeCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BATCH_SIZE_OUT_OF_RANGE","DATE_NOT_EXISTS","INVALID_MODEL_PROPERTY","INVALID_QUERY_PARAMETER","MALFORMED_MODEL_ID_OR_DATE","MALFORMED_MODEL_ID_OR_NUMBER","MISSING_MODEL","MISSING_QUERY_PARAMETER","NUMBER_ALREADY_IN_USE","NUMBER_NOT_EXISTS","SUBMITTED_DATA_NOT_WELLFORMED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		badRequestErrorTypeCodePropEnum = append(badRequestErrorTypeCodePropEnum, v)
	}
}

const (

	// BadRequestErrorCodeBATCHSIZEOUTOFRANGE captures enum value "BATCH_SIZE_OUT_OF_RANGE"
	BadRequestErrorCodeBATCHSIZEOUTOFRANGE string = "BATCH_SIZE_OUT_OF_RANGE"

	// BadRequestErrorCodeDATENOTEXISTS captures enum value "DATE_NOT_EXISTS"
	BadRequestErrorCodeDATENOTEXISTS string = "DATE_NOT_EXISTS"

	// BadRequestErrorCodeINVALIDMODELPROPERTY captures enum value "INVALID_MODEL_PROPERTY"
	BadRequestErrorCodeINVALIDMODELPROPERTY string = "INVALID_MODEL_PROPERTY"

	// BadRequestErrorCodeINVALIDQUERYPARAMETER captures enum value "INVALID_QUERY_PARAMETER"
	BadRequestErrorCodeINVALIDQUERYPARAMETER string = "INVALID_QUERY_PARAMETER"

	// BadRequestErrorCodeMALFORMEDMODELIDORDATE captures enum value "MALFORMED_MODEL_ID_OR_DATE"
	BadRequestErrorCodeMALFORMEDMODELIDORDATE string = "MALFORMED_MODEL_ID_OR_DATE"

	// BadRequestErrorCodeMALFORMEDMODELIDORNUMBER captures enum value "MALFORMED_MODEL_ID_OR_NUMBER"
	BadRequestErrorCodeMALFORMEDMODELIDORNUMBER string = "MALFORMED_MODEL_ID_OR_NUMBER"

	// BadRequestErrorCodeMISSINGMODEL captures enum value "MISSING_MODEL"
	BadRequestErrorCodeMISSINGMODEL string = "MISSING_MODEL"

	// BadRequestErrorCodeMISSINGQUERYPARAMETER captures enum value "MISSING_QUERY_PARAMETER"
	BadRequestErrorCodeMISSINGQUERYPARAMETER string = "MISSING_QUERY_PARAMETER"

	// BadRequestErrorCodeNUMBERALREADYINUSE captures enum value "NUMBER_ALREADY_IN_USE"
	BadRequestErrorCodeNUMBERALREADYINUSE string = "NUMBER_ALREADY_IN_USE"

	// BadRequestErrorCodeNUMBERNOTEXISTS captures enum value "NUMBER_NOT_EXISTS"
	BadRequestErrorCodeNUMBERNOTEXISTS string = "NUMBER_NOT_EXISTS"

	// BadRequestErrorCodeSUBMITTEDDATANOTWELLFORMED captures enum value "SUBMITTED_DATA_NOT_WELLFORMED"
	BadRequestErrorCodeSUBMITTEDDATANOTWELLFORMED string = "SUBMITTED_DATA_NOT_WELLFORMED"
)

// prop value enum
func (m *BadRequestError) validateCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, badRequestErrorTypeCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BadRequestError) validateCode(formats strfmt.Registry) error {

	if swag.IsZero(m.Code) { // not required
		return nil
	}

	// value enum
	if err := m.validateCodeEnum("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BadRequestError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BadRequestError) UnmarshalBinary(b []byte) error {
	var res BadRequestError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
