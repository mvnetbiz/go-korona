// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Customer customer
//
// swagger:model Customer
type Customer struct {

	// indicates whether the object is active for use or not
	// Read Only: true
	Active *bool `json:"active,omitempty"`

	// address
	Address *AddressInformation `json:"address,omitempty"`

	// birthday
	// Format: date-time
	Birthday strfmt.DateTime `json:"birthday,omitempty"`

	// cards
	// Unique: true
	Cards []*CustomerCard `json:"cards"`

	// company
	Company string `json:"company,omitempty"`

	// customer group
	CustomerGroup *ModelReference `json:"customerGroup,omitempty"`

	// economic zone
	EconomicZone *ModelReference `json:"economicZone,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// firstname
	Firstname string `json:"firstname,omitempty"`

	// gender
	// Enum: [MALE FEMALE]
	Gender string `json:"gender,omitempty"`

	// global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
	ID string `json:"id,omitempty"`

	// informations
	Informations []*CustomerInformation `json:"informations"`

	// lastname
	Lastname string `json:"lastname,omitempty"`

	// marketing contact permitted
	MarketingContactPermitted bool `json:"marketingContactPermitted,omitempty"`

	// number of the object, like it is set in backoffice; will be removed when active=false
	Number string `json:"number,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`

	// privacy policy accepted
	PrivacyPolicyAccepted bool `json:"privacyPolicyAccepted,omitempty"`

	// the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.
	// Read Only: true
	Revision int64 `json:"revision,omitempty"`

	// tax Id
	TaxID string `json:"taxId,omitempty"`
}

// Validate validates this customer
func (m *Customer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBirthday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEconomicZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInformations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Customer) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *Customer) validateBirthday(formats strfmt.Registry) error {

	if swag.IsZero(m.Birthday) { // not required
		return nil
	}

	if err := validate.FormatOf("birthday", "body", "date-time", m.Birthday.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateCards(formats strfmt.Registry) error {

	if swag.IsZero(m.Cards) { // not required
		return nil
	}

	if err := validate.UniqueItems("cards", "body", m.Cards); err != nil {
		return err
	}

	for i := 0; i < len(m.Cards); i++ {
		if swag.IsZero(m.Cards[i]) { // not required
			continue
		}

		if m.Cards[i] != nil {
			if err := m.Cards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Customer) validateCustomerGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerGroup) { // not required
		return nil
	}

	if m.CustomerGroup != nil {
		if err := m.CustomerGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customerGroup")
			}
			return err
		}
	}

	return nil
}

func (m *Customer) validateEconomicZone(formats strfmt.Registry) error {

	if swag.IsZero(m.EconomicZone) { // not required
		return nil
	}

	if m.EconomicZone != nil {
		if err := m.EconomicZone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("economicZone")
			}
			return err
		}
	}

	return nil
}

var customerTypeGenderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MALE","FEMALE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerTypeGenderPropEnum = append(customerTypeGenderPropEnum, v)
	}
}

const (

	// CustomerGenderMALE captures enum value "MALE"
	CustomerGenderMALE string = "MALE"

	// CustomerGenderFEMALE captures enum value "FEMALE"
	CustomerGenderFEMALE string = "FEMALE"
)

// prop value enum
func (m *Customer) validateGenderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, customerTypeGenderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Customer) validateGender(formats strfmt.Registry) error {

	if swag.IsZero(m.Gender) { // not required
		return nil
	}

	// value enum
	if err := m.validateGenderEnum("gender", "body", m.Gender); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateInformations(formats strfmt.Registry) error {

	if swag.IsZero(m.Informations) { // not required
		return nil
	}

	for i := 0; i < len(m.Informations); i++ {
		if swag.IsZero(m.Informations[i]) { // not required
			continue
		}

		if m.Informations[i] != nil {
			if err := m.Informations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("informations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Customer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Customer) UnmarshalBinary(b []byte) error {
	var res Customer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
