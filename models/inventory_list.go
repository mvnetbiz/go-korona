// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InventoryList inventory list
//
// swagger:model InventoryList
type InventoryList struct {

	// indicates whether the object is active for use or not
	// Read Only: true
	Active *bool `json:"active,omitempty"`

	// booking time
	// Read Only: true
	// Format: date-time
	BookingTime strfmt.DateTime `json:"bookingTime,omitempty"`

	// booking user
	// Read Only: true
	BookingUser *ModelReference `json:"bookingUser,omitempty"`

	// cashier
	// Read Only: true
	Cashier *ModelReference `json:"cashier,omitempty"`

	// create time
	// Read Only: true
	// Format: date-time
	CreateTime strfmt.DateTime `json:"createTime,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// finish time
	// Read Only: true
	// Format: date-time
	FinishTime strfmt.DateTime `json:"finishTime,omitempty"`

	// global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
	ID string `json:"id,omitempty"`

	// inventory
	// Read Only: true
	Inventory *ModelReference `json:"inventory,omitempty"`

	// modified time
	// Read Only: true
	// Format: date-time
	ModifiedTime strfmt.DateTime `json:"modifiedTime,omitempty"`

	// number of the object, like it is set in backoffice; will be removed when active=false
	Number string `json:"number,omitempty"`

	// organizational unit
	// Read Only: true
	OrganizationalUnit *ModelReference `json:"organizationalUnit,omitempty"`

	// point of sale
	// Read Only: true
	PointOfSale *ModelReference `json:"pointOfSale,omitempty"`

	// the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.
	// Read Only: true
	Revision int64 `json:"revision,omitempty"`

	// status
	// Read Only: true
	// Enum: [BOOKED IN_PROGRESS]
	Status string `json:"status,omitempty"`
}

// Validate validates this inventory list
func (m *InventoryList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBookingTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBookingUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCashier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationalUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePointOfSale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryList) validateBookingTime(formats strfmt.Registry) error {

	if swag.IsZero(m.BookingTime) { // not required
		return nil
	}

	if err := validate.FormatOf("bookingTime", "body", "date-time", m.BookingTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InventoryList) validateBookingUser(formats strfmt.Registry) error {

	if swag.IsZero(m.BookingUser) { // not required
		return nil
	}

	if m.BookingUser != nil {
		if err := m.BookingUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bookingUser")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryList) validateCashier(formats strfmt.Registry) error {

	if swag.IsZero(m.Cashier) { // not required
		return nil
	}

	if m.Cashier != nil {
		if err := m.Cashier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cashier")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryList) validateCreateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("createTime", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InventoryList) validateFinishTime(formats strfmt.Registry) error {

	if swag.IsZero(m.FinishTime) { // not required
		return nil
	}

	if err := validate.FormatOf("finishTime", "body", "date-time", m.FinishTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InventoryList) validateInventory(formats strfmt.Registry) error {

	if swag.IsZero(m.Inventory) { // not required
		return nil
	}

	if m.Inventory != nil {
		if err := m.Inventory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inventory")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryList) validateModifiedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("modifiedTime", "body", "date-time", m.ModifiedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InventoryList) validateOrganizationalUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganizationalUnit) { // not required
		return nil
	}

	if m.OrganizationalUnit != nil {
		if err := m.OrganizationalUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organizationalUnit")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryList) validatePointOfSale(formats strfmt.Registry) error {

	if swag.IsZero(m.PointOfSale) { // not required
		return nil
	}

	if m.PointOfSale != nil {
		if err := m.PointOfSale.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pointOfSale")
			}
			return err
		}
	}

	return nil
}

var inventoryListTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BOOKED","IN_PROGRESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		inventoryListTypeStatusPropEnum = append(inventoryListTypeStatusPropEnum, v)
	}
}

const (

	// InventoryListStatusBOOKED captures enum value "BOOKED"
	InventoryListStatusBOOKED string = "BOOKED"

	// InventoryListStatusINPROGRESS captures enum value "IN_PROGRESS"
	InventoryListStatusINPROGRESS string = "IN_PROGRESS"
)

// prop value enum
func (m *InventoryList) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, inventoryListTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InventoryList) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InventoryList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryList) UnmarshalBinary(b []byte) error {
	var res InventoryList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
