// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdditionalReceiptInfoType additional receipt info type
//
// swagger:model AdditionalReceiptInfoType
type AdditionalReceiptInfoType struct {

	// indicates whether the object is active for use or not
	// Read Only: true
	Active *bool `json:"active,omitempty"`

	// cashier input required
	CashierInputRequired bool `json:"cashierInputRequired,omitempty"`

	// customer groups
	// Unique: true
	CustomerGroups []*ModelReference `json:"customerGroups"`

	// description
	Description string `json:"description,omitempty"`

	// global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
	ID string `json:"id,omitempty"`

	// min item quantity
	MinItemQuantity float64 `json:"minItemQuantity,omitempty"`

	// min total
	MinTotal float64 `json:"minTotal,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// number of the object, like it is set in backoffice; will be removed when active=false
	Number string `json:"number,omitempty"`

	// options
	// Unique: true
	Options []string `json:"options"`

	// organizational units
	// Unique: true
	OrganizationalUnits []*ModelReference `json:"organizationalUnits"`

	// required
	Required bool `json:"required,omitempty"`

	// the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.
	// Read Only: true
	Revision int64 `json:"revision,omitempty"`

	// tag
	Tag *ModelReference `json:"tag,omitempty"`

	// validity
	Validity *Validity `json:"validity,omitempty"`
}

// Validate validates this additional receipt info type
func (m *AdditionalReceiptInfoType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomerGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationalUnits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdditionalReceiptInfoType) validateCustomerGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerGroups) { // not required
		return nil
	}

	if err := validate.UniqueItems("customerGroups", "body", m.CustomerGroups); err != nil {
		return err
	}

	for i := 0; i < len(m.CustomerGroups); i++ {
		if swag.IsZero(m.CustomerGroups[i]) { // not required
			continue
		}

		if m.CustomerGroups[i] != nil {
			if err := m.CustomerGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customerGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AdditionalReceiptInfoType) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	if err := validate.UniqueItems("options", "body", m.Options); err != nil {
		return err
	}

	return nil
}

func (m *AdditionalReceiptInfoType) validateOrganizationalUnits(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganizationalUnits) { // not required
		return nil
	}

	if err := validate.UniqueItems("organizationalUnits", "body", m.OrganizationalUnits); err != nil {
		return err
	}

	for i := 0; i < len(m.OrganizationalUnits); i++ {
		if swag.IsZero(m.OrganizationalUnits[i]) { // not required
			continue
		}

		if m.OrganizationalUnits[i] != nil {
			if err := m.OrganizationalUnits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("organizationalUnits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AdditionalReceiptInfoType) validateTag(formats strfmt.Registry) error {

	if swag.IsZero(m.Tag) { // not required
		return nil
	}

	if m.Tag != nil {
		if err := m.Tag.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tag")
			}
			return err
		}
	}

	return nil
}

func (m *AdditionalReceiptInfoType) validateValidity(formats strfmt.Registry) error {

	if swag.IsZero(m.Validity) { // not required
		return nil
	}

	if m.Validity != nil {
		if err := m.Validity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdditionalReceiptInfoType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdditionalReceiptInfoType) UnmarshalBinary(b []byte) error {
	var res AdditionalReceiptInfoType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
