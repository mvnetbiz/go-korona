// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StockReceipt stock receipt
//
// swagger:model StockReceipt
type StockReceipt struct {

	// indicates whether the object is active for use or not
	// Read Only: true
	Active *bool `json:"active,omitempty"`

	// arrival date
	// Format: date-time
	ArrivalDate strfmt.DateTime `json:"arrivalDate,omitempty"`

	// booking time
	// Format: date-time
	BookingTime strfmt.DateTime `json:"bookingTime,omitempty"`

	// booking user
	BookingUser *ModelReference `json:"bookingUser,omitempty"`

	// cashier
	Cashier *ModelReference `json:"cashier,omitempty"`

	// comment
	Comment string `json:"comment,omitempty"`

	// create time
	// Format: date-time
	CreateTime strfmt.DateTime `json:"createTime,omitempty"`

	// create user
	CreateUser *ModelReference `json:"createUser,omitempty"`

	// customer
	Customer *ModelReference `json:"customer,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// dispatch notification
	DispatchNotification *ModelReference `json:"dispatchNotification,omitempty"`

	// global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
	ID string `json:"id,omitempty"`

	// items count
	ItemsCount int32 `json:"itemsCount,omitempty"`

	// number of the object, like it is set in backoffice; will be removed when active=false
	Number string `json:"number,omitempty"`

	// organizational unit
	OrganizationalUnit *ModelReference `json:"organizationalUnit,omitempty"`

	// party information
	PartyInformation *ProductTransferInvolvedPartyInformation `json:"partyInformation,omitempty"`

	// point of sale
	PointOfSale *ModelReference `json:"pointOfSale,omitempty"`

	// product stock order
	ProductStockOrder *ModelReference `json:"productStockOrder,omitempty"`

	// the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.
	// Read Only: true
	Revision int64 `json:"revision,omitempty"`

	// source organizational unit
	SourceOrganizationalUnit *ModelReference `json:"sourceOrganizationalUnit,omitempty"`

	// status
	// Read Only: true
	// Enum: [BOOKED IN_PROGRESS]
	Status string `json:"status,omitempty"`

	// supplier
	Supplier *ModelReference `json:"supplier,omitempty"`
}

// Validate validates this stock receipt
func (m *StockReceipt) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArrivalDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBookingTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBookingUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCashier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDispatchNotification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationalUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartyInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePointOfSale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductStockOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceOrganizationalUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupplier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StockReceipt) validateArrivalDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ArrivalDate) { // not required
		return nil
	}

	if err := validate.FormatOf("arrivalDate", "body", "date-time", m.ArrivalDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StockReceipt) validateBookingTime(formats strfmt.Registry) error {

	if swag.IsZero(m.BookingTime) { // not required
		return nil
	}

	if err := validate.FormatOf("bookingTime", "body", "date-time", m.BookingTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StockReceipt) validateBookingUser(formats strfmt.Registry) error {

	if swag.IsZero(m.BookingUser) { // not required
		return nil
	}

	if m.BookingUser != nil {
		if err := m.BookingUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bookingUser")
			}
			return err
		}
	}

	return nil
}

func (m *StockReceipt) validateCashier(formats strfmt.Registry) error {

	if swag.IsZero(m.Cashier) { // not required
		return nil
	}

	if m.Cashier != nil {
		if err := m.Cashier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cashier")
			}
			return err
		}
	}

	return nil
}

func (m *StockReceipt) validateCreateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("createTime", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StockReceipt) validateCreateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.CreateUser) { // not required
		return nil
	}

	if m.CreateUser != nil {
		if err := m.CreateUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createUser")
			}
			return err
		}
	}

	return nil
}

func (m *StockReceipt) validateCustomer(formats strfmt.Registry) error {

	if swag.IsZero(m.Customer) { // not required
		return nil
	}

	if m.Customer != nil {
		if err := m.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

func (m *StockReceipt) validateDispatchNotification(formats strfmt.Registry) error {

	if swag.IsZero(m.DispatchNotification) { // not required
		return nil
	}

	if m.DispatchNotification != nil {
		if err := m.DispatchNotification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dispatchNotification")
			}
			return err
		}
	}

	return nil
}

func (m *StockReceipt) validateOrganizationalUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganizationalUnit) { // not required
		return nil
	}

	if m.OrganizationalUnit != nil {
		if err := m.OrganizationalUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organizationalUnit")
			}
			return err
		}
	}

	return nil
}

func (m *StockReceipt) validatePartyInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.PartyInformation) { // not required
		return nil
	}

	if m.PartyInformation != nil {
		if err := m.PartyInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("partyInformation")
			}
			return err
		}
	}

	return nil
}

func (m *StockReceipt) validatePointOfSale(formats strfmt.Registry) error {

	if swag.IsZero(m.PointOfSale) { // not required
		return nil
	}

	if m.PointOfSale != nil {
		if err := m.PointOfSale.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pointOfSale")
			}
			return err
		}
	}

	return nil
}

func (m *StockReceipt) validateProductStockOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductStockOrder) { // not required
		return nil
	}

	if m.ProductStockOrder != nil {
		if err := m.ProductStockOrder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("productStockOrder")
			}
			return err
		}
	}

	return nil
}

func (m *StockReceipt) validateSourceOrganizationalUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceOrganizationalUnit) { // not required
		return nil
	}

	if m.SourceOrganizationalUnit != nil {
		if err := m.SourceOrganizationalUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceOrganizationalUnit")
			}
			return err
		}
	}

	return nil
}

var stockReceiptTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BOOKED","IN_PROGRESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stockReceiptTypeStatusPropEnum = append(stockReceiptTypeStatusPropEnum, v)
	}
}

const (

	// StockReceiptStatusBOOKED captures enum value "BOOKED"
	StockReceiptStatusBOOKED string = "BOOKED"

	// StockReceiptStatusINPROGRESS captures enum value "IN_PROGRESS"
	StockReceiptStatusINPROGRESS string = "IN_PROGRESS"
)

// prop value enum
func (m *StockReceipt) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, stockReceiptTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StockReceipt) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *StockReceipt) validateSupplier(formats strfmt.Registry) error {

	if swag.IsZero(m.Supplier) { // not required
		return nil
	}

	if m.Supplier != nil {
		if err := m.Supplier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supplier")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StockReceipt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StockReceipt) UnmarshalBinary(b []byte) error {
	var res StockReceipt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
