// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ForbiddenError forbidden error
//
// swagger:model ForbiddenError
type ForbiddenError struct {

	// the code for client-side evaluation of the error
	// Enum: [CLOUD_ACCOUNT_DISABLED POINT_OF_SALE_NOT_EXTERNAL POINT_OF_SALE_NOT_COUPLED POINT_OF_SALE_COUPLED_WITH_OTHER_DEVICE DELETE_NOT_ALLOWED SAVE_OR_UPDATE_NOT_ALLOWED ADDITIONAL_CLOUD_PACKAGE_REQUIRED ADDITIONAL_API_ACCESS_REQUIRED API_USAGE_DISABLED]
	Code string `json:"code,omitempty"`

	// a short description of the error in english
	Message string `json:"message,omitempty"`
}

// Validate validates this forbidden error
func (m *ForbiddenError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var forbiddenErrorTypeCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLOUD_ACCOUNT_DISABLED","POINT_OF_SALE_NOT_EXTERNAL","POINT_OF_SALE_NOT_COUPLED","POINT_OF_SALE_COUPLED_WITH_OTHER_DEVICE","DELETE_NOT_ALLOWED","SAVE_OR_UPDATE_NOT_ALLOWED","ADDITIONAL_CLOUD_PACKAGE_REQUIRED","ADDITIONAL_API_ACCESS_REQUIRED","API_USAGE_DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		forbiddenErrorTypeCodePropEnum = append(forbiddenErrorTypeCodePropEnum, v)
	}
}

const (

	// ForbiddenErrorCodeCLOUDACCOUNTDISABLED captures enum value "CLOUD_ACCOUNT_DISABLED"
	ForbiddenErrorCodeCLOUDACCOUNTDISABLED string = "CLOUD_ACCOUNT_DISABLED"

	// ForbiddenErrorCodePOINTOFSALENOTEXTERNAL captures enum value "POINT_OF_SALE_NOT_EXTERNAL"
	ForbiddenErrorCodePOINTOFSALENOTEXTERNAL string = "POINT_OF_SALE_NOT_EXTERNAL"

	// ForbiddenErrorCodePOINTOFSALENOTCOUPLED captures enum value "POINT_OF_SALE_NOT_COUPLED"
	ForbiddenErrorCodePOINTOFSALENOTCOUPLED string = "POINT_OF_SALE_NOT_COUPLED"

	// ForbiddenErrorCodePOINTOFSALECOUPLEDWITHOTHERDEVICE captures enum value "POINT_OF_SALE_COUPLED_WITH_OTHER_DEVICE"
	ForbiddenErrorCodePOINTOFSALECOUPLEDWITHOTHERDEVICE string = "POINT_OF_SALE_COUPLED_WITH_OTHER_DEVICE"

	// ForbiddenErrorCodeDELETENOTALLOWED captures enum value "DELETE_NOT_ALLOWED"
	ForbiddenErrorCodeDELETENOTALLOWED string = "DELETE_NOT_ALLOWED"

	// ForbiddenErrorCodeSAVEORUPDATENOTALLOWED captures enum value "SAVE_OR_UPDATE_NOT_ALLOWED"
	ForbiddenErrorCodeSAVEORUPDATENOTALLOWED string = "SAVE_OR_UPDATE_NOT_ALLOWED"

	// ForbiddenErrorCodeADDITIONALCLOUDPACKAGEREQUIRED captures enum value "ADDITIONAL_CLOUD_PACKAGE_REQUIRED"
	ForbiddenErrorCodeADDITIONALCLOUDPACKAGEREQUIRED string = "ADDITIONAL_CLOUD_PACKAGE_REQUIRED"

	// ForbiddenErrorCodeADDITIONALAPIACCESSREQUIRED captures enum value "ADDITIONAL_API_ACCESS_REQUIRED"
	ForbiddenErrorCodeADDITIONALAPIACCESSREQUIRED string = "ADDITIONAL_API_ACCESS_REQUIRED"

	// ForbiddenErrorCodeAPIUSAGEDISABLED captures enum value "API_USAGE_DISABLED"
	ForbiddenErrorCodeAPIUSAGEDISABLED string = "API_USAGE_DISABLED"
)

// prop value enum
func (m *ForbiddenError) validateCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, forbiddenErrorTypeCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ForbiddenError) validateCode(formats strfmt.Registry) error {

	if swag.IsZero(m.Code) { // not required
		return nil
	}

	// value enum
	if err := m.validateCodeEnum("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ForbiddenError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ForbiddenError) UnmarshalBinary(b []byte) error {
	var res ForbiddenError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
