// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountTransaction account transaction
//
// swagger:model AccountTransaction
type AccountTransaction struct {

	// account
	Account *ModelReference `json:"account,omitempty"`

	// amount
	Amount float64 `json:"amount,omitempty"`

	// booking time
	// Format: date-time
	BookingTime strfmt.DateTime `json:"bookingTime,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// info texts
	InfoTexts []string `json:"infoTexts"`

	// serial numbers
	// Unique: true
	SerialNumbers []string `json:"serialNumbers"`
}

// Validate validates this account transaction
func (m *AccountTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBookingTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSerialNumbers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountTransaction) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account")
			}
			return err
		}
	}

	return nil
}

func (m *AccountTransaction) validateBookingTime(formats strfmt.Registry) error {

	if swag.IsZero(m.BookingTime) { // not required
		return nil
	}

	if err := validate.FormatOf("bookingTime", "body", "date-time", m.BookingTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AccountTransaction) validateSerialNumbers(formats strfmt.Registry) error {

	if swag.IsZero(m.SerialNumbers) { // not required
		return nil
	}

	if err := validate.UniqueItems("serialNumbers", "body", m.SerialNumbers); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountTransaction) UnmarshalBinary(b []byte) error {
	var res AccountTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
