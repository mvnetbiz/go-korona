// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Pos pos
//
// swagger:model Pos
type Pos struct {

	// indicates whether the object is active for use or not
	// Read Only: true
	Active *bool `json:"active,omitempty"`

	// contra account
	// Read Only: true
	ContraAccount *ModelReference `json:"contraAccount,omitempty"`

	// coupled
	// Read Only: true
	Coupled *bool `json:"coupled,omitempty"`

	// coupling Id
	CouplingID string `json:"couplingId,omitempty"`

	// default customer group
	// Read Only: true
	DefaultCustomerGroup *ModelReference `json:"defaultCustomerGroup,omitempty"`

	// default payment method
	// Read Only: true
	DefaultPaymentMethod *ModelReference `json:"defaultPaymentMethod,omitempty"`

	// only for updating-purposes through PATCH, not shown on GET requests.
	DeviceInformation *DeviceInformation `json:"deviceInformation,omitempty"`

	// external
	// Read Only: true
	External *bool `json:"external,omitempty"`

	// global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
	ID string `json:"id,omitempty"`

	// last receipt number - only shown if external=true and coupled=false; usable for client-side receipt counter.
	// Read Only: true
	LastReceiptNumber string `json:"lastReceiptNumber,omitempty"`

	// last zcount property - only shown if external=true and coupled=false; usable for client-side zcount.
	// Read Only: true
	LastZCount int64 `json:"lastZCount,omitempty"`

	// name
	// Read Only: true
	Name string `json:"name,omitempty"`

	// number of the object, like it is set in backoffice; will be removed when active=false
	Number string `json:"number,omitempty"`

	// organizational unit
	// Read Only: true
	OrganizationalUnit *ModelReference `json:"organizationalUnit,omitempty"`

	// print footer lines
	// Read Only: true
	PrintFooterLines map[string]string `json:"printFooterLines,omitempty"`

	// print header lines
	// Read Only: true
	PrintHeaderLines map[string]string `json:"printHeaderLines,omitempty"`

	// receipt info texts
	// Read Only: true
	ReceiptInfoTexts []*ModelReference `json:"receiptInfoTexts"`

	// revenue account
	// Read Only: true
	RevenueAccount *ModelReference `json:"revenueAccount,omitempty"`

	// the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.
	// Read Only: true
	Revision int64 `json:"revision,omitempty"`

	// use alternative sector
	UseAlternativeSector bool `json:"useAlternativeSector,omitempty"`
}

// Validate validates this pos
func (m *Pos) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContraAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultCustomerGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultPaymentMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationalUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiptInfoTexts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevenueAccount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Pos) validateContraAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.ContraAccount) { // not required
		return nil
	}

	if m.ContraAccount != nil {
		if err := m.ContraAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contraAccount")
			}
			return err
		}
	}

	return nil
}

func (m *Pos) validateDefaultCustomerGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultCustomerGroup) { // not required
		return nil
	}

	if m.DefaultCustomerGroup != nil {
		if err := m.DefaultCustomerGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultCustomerGroup")
			}
			return err
		}
	}

	return nil
}

func (m *Pos) validateDefaultPaymentMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultPaymentMethod) { // not required
		return nil
	}

	if m.DefaultPaymentMethod != nil {
		if err := m.DefaultPaymentMethod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultPaymentMethod")
			}
			return err
		}
	}

	return nil
}

func (m *Pos) validateDeviceInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceInformation) { // not required
		return nil
	}

	if m.DeviceInformation != nil {
		if err := m.DeviceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInformation")
			}
			return err
		}
	}

	return nil
}

func (m *Pos) validateOrganizationalUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganizationalUnit) { // not required
		return nil
	}

	if m.OrganizationalUnit != nil {
		if err := m.OrganizationalUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organizationalUnit")
			}
			return err
		}
	}

	return nil
}

func (m *Pos) validateReceiptInfoTexts(formats strfmt.Registry) error {

	if swag.IsZero(m.ReceiptInfoTexts) { // not required
		return nil
	}

	for i := 0; i < len(m.ReceiptInfoTexts); i++ {
		if swag.IsZero(m.ReceiptInfoTexts[i]) { // not required
			continue
		}

		if m.ReceiptInfoTexts[i] != nil {
			if err := m.ReceiptInfoTexts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("receiptInfoTexts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Pos) validateRevenueAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.RevenueAccount) { // not required
		return nil
	}

	if m.RevenueAccount != nil {
		if err := m.RevenueAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revenueAccount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Pos) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Pos) UnmarshalBinary(b []byte) error {
	var res Pos
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
