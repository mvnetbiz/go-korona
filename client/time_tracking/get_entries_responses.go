// Code generated by go-swagger; DO NOT EDIT.

package time_tracking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetEntriesReader is a Reader for the GetEntries structure.
type GetEntriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEntriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEntriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetEntriesNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetEntriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetEntriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetEntriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetEntriesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetEntriesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetEntriesOK creates a GetEntriesOK with default headers values
func NewGetEntriesOK() *GetEntriesOK {
	return &GetEntriesOK{}
}

/*GetEntriesOK handles this case with default header values.

successful operation
*/
type GetEntriesOK struct {
	Payload *models.ResultListTimeTrackingEntry
}

func (o *GetEntriesOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/timeTrackingEntries][%d] getEntriesOK  %+v", 200, o.Payload)
}

func (o *GetEntriesOK) GetPayload() *models.ResultListTimeTrackingEntry {
	return o.Payload
}

func (o *GetEntriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResultListTimeTrackingEntry)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEntriesNoContent creates a GetEntriesNoContent with default headers values
func NewGetEntriesNoContent() *GetEntriesNoContent {
	return &GetEntriesNoContent{}
}

/*GetEntriesNoContent handles this case with default header values.

Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object.
*/
type GetEntriesNoContent struct {
}

func (o *GetEntriesNoContent) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/timeTrackingEntries][%d] getEntriesNoContent ", 204)
}

func (o *GetEntriesNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetEntriesBadRequest creates a GetEntriesBadRequest with default headers values
func NewGetEntriesBadRequest() *GetEntriesBadRequest {
	return &GetEntriesBadRequest{}
}

/*GetEntriesBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetEntriesBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetEntriesBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/timeTrackingEntries][%d] getEntriesBadRequest  %+v", 400, o.Payload)
}

func (o *GetEntriesBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetEntriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEntriesUnauthorized creates a GetEntriesUnauthorized with default headers values
func NewGetEntriesUnauthorized() *GetEntriesUnauthorized {
	return &GetEntriesUnauthorized{}
}

/*GetEntriesUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetEntriesUnauthorized struct {
}

func (o *GetEntriesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/timeTrackingEntries][%d] getEntriesUnauthorized ", 401)
}

func (o *GetEntriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetEntriesForbidden creates a GetEntriesForbidden with default headers values
func NewGetEntriesForbidden() *GetEntriesForbidden {
	return &GetEntriesForbidden{}
}

/*GetEntriesForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetEntriesForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetEntriesForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/timeTrackingEntries][%d] getEntriesForbidden  %+v", 403, o.Payload)
}

func (o *GetEntriesForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetEntriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEntriesNotFound creates a GetEntriesNotFound with default headers values
func NewGetEntriesNotFound() *GetEntriesNotFound {
	return &GetEntriesNotFound{}
}

/*GetEntriesNotFound handles this case with default header values.

Object not found
*/
type GetEntriesNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetEntriesNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/timeTrackingEntries][%d] getEntriesNotFound  %+v", 404, o.Payload)
}

func (o *GetEntriesNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetEntriesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEntriesTooManyRequests creates a GetEntriesTooManyRequests with default headers values
func NewGetEntriesTooManyRequests() *GetEntriesTooManyRequests {
	return &GetEntriesTooManyRequests{}
}

/*GetEntriesTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetEntriesTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetEntriesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/timeTrackingEntries][%d] getEntriesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetEntriesTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetEntriesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
