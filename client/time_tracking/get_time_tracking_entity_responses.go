// Code generated by go-swagger; DO NOT EDIT.

package time_tracking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetTimeTrackingEntityReader is a Reader for the GetTimeTrackingEntity structure.
type GetTimeTrackingEntityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTimeTrackingEntityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTimeTrackingEntityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTimeTrackingEntityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTimeTrackingEntityUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTimeTrackingEntityForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTimeTrackingEntityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetTimeTrackingEntityTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTimeTrackingEntityOK creates a GetTimeTrackingEntityOK with default headers values
func NewGetTimeTrackingEntityOK() *GetTimeTrackingEntityOK {
	return &GetTimeTrackingEntityOK{}
}

/*GetTimeTrackingEntityOK handles this case with default header values.

successful operation
*/
type GetTimeTrackingEntityOK struct {
	Payload *models.TimeTrackingEntity
}

func (o *GetTimeTrackingEntityOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/timeTrackingEntities/{timeTrackingEntityId}][%d] getTimeTrackingEntityOK  %+v", 200, o.Payload)
}

func (o *GetTimeTrackingEntityOK) GetPayload() *models.TimeTrackingEntity {
	return o.Payload
}

func (o *GetTimeTrackingEntityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TimeTrackingEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTimeTrackingEntityBadRequest creates a GetTimeTrackingEntityBadRequest with default headers values
func NewGetTimeTrackingEntityBadRequest() *GetTimeTrackingEntityBadRequest {
	return &GetTimeTrackingEntityBadRequest{}
}

/*GetTimeTrackingEntityBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetTimeTrackingEntityBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetTimeTrackingEntityBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/timeTrackingEntities/{timeTrackingEntityId}][%d] getTimeTrackingEntityBadRequest  %+v", 400, o.Payload)
}

func (o *GetTimeTrackingEntityBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetTimeTrackingEntityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTimeTrackingEntityUnauthorized creates a GetTimeTrackingEntityUnauthorized with default headers values
func NewGetTimeTrackingEntityUnauthorized() *GetTimeTrackingEntityUnauthorized {
	return &GetTimeTrackingEntityUnauthorized{}
}

/*GetTimeTrackingEntityUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetTimeTrackingEntityUnauthorized struct {
}

func (o *GetTimeTrackingEntityUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/timeTrackingEntities/{timeTrackingEntityId}][%d] getTimeTrackingEntityUnauthorized ", 401)
}

func (o *GetTimeTrackingEntityUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTimeTrackingEntityForbidden creates a GetTimeTrackingEntityForbidden with default headers values
func NewGetTimeTrackingEntityForbidden() *GetTimeTrackingEntityForbidden {
	return &GetTimeTrackingEntityForbidden{}
}

/*GetTimeTrackingEntityForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetTimeTrackingEntityForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetTimeTrackingEntityForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/timeTrackingEntities/{timeTrackingEntityId}][%d] getTimeTrackingEntityForbidden  %+v", 403, o.Payload)
}

func (o *GetTimeTrackingEntityForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetTimeTrackingEntityForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTimeTrackingEntityNotFound creates a GetTimeTrackingEntityNotFound with default headers values
func NewGetTimeTrackingEntityNotFound() *GetTimeTrackingEntityNotFound {
	return &GetTimeTrackingEntityNotFound{}
}

/*GetTimeTrackingEntityNotFound handles this case with default header values.

Object not found
*/
type GetTimeTrackingEntityNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetTimeTrackingEntityNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/timeTrackingEntities/{timeTrackingEntityId}][%d] getTimeTrackingEntityNotFound  %+v", 404, o.Payload)
}

func (o *GetTimeTrackingEntityNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetTimeTrackingEntityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTimeTrackingEntityTooManyRequests creates a GetTimeTrackingEntityTooManyRequests with default headers values
func NewGetTimeTrackingEntityTooManyRequests() *GetTimeTrackingEntityTooManyRequests {
	return &GetTimeTrackingEntityTooManyRequests{}
}

/*GetTimeTrackingEntityTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetTimeTrackingEntityTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetTimeTrackingEntityTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/timeTrackingEntities/{timeTrackingEntityId}][%d] getTimeTrackingEntityTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetTimeTrackingEntityTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetTimeTrackingEntityTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
