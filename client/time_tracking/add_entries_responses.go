// Code generated by go-swagger; DO NOT EDIT.

package time_tracking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// AddEntriesReader is a Reader for the AddEntries structure.
type AddEntriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddEntriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddEntriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddEntriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddEntriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddEntriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddEntriesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAddEntriesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddEntriesOK creates a AddEntriesOK with default headers values
func NewAddEntriesOK() *AddEntriesOK {
	return &AddEntriesOK{}
}

/*AddEntriesOK handles this case with default header values.

successful operation
*/
type AddEntriesOK struct {
	Payload []*models.AddOrUpdateResult
}

func (o *AddEntriesOK) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/timeTrackingEntries][%d] addEntriesOK  %+v", 200, o.Payload)
}

func (o *AddEntriesOK) GetPayload() []*models.AddOrUpdateResult {
	return o.Payload
}

func (o *AddEntriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEntriesBadRequest creates a AddEntriesBadRequest with default headers values
func NewAddEntriesBadRequest() *AddEntriesBadRequest {
	return &AddEntriesBadRequest{}
}

/*AddEntriesBadRequest handles this case with default header values.

Malformed querystring or model
*/
type AddEntriesBadRequest struct {
	Payload *models.BadRequestError
}

func (o *AddEntriesBadRequest) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/timeTrackingEntries][%d] addEntriesBadRequest  %+v", 400, o.Payload)
}

func (o *AddEntriesBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *AddEntriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEntriesUnauthorized creates a AddEntriesUnauthorized with default headers values
func NewAddEntriesUnauthorized() *AddEntriesUnauthorized {
	return &AddEntriesUnauthorized{}
}

/*AddEntriesUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type AddEntriesUnauthorized struct {
}

func (o *AddEntriesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/timeTrackingEntries][%d] addEntriesUnauthorized ", 401)
}

func (o *AddEntriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddEntriesForbidden creates a AddEntriesForbidden with default headers values
func NewAddEntriesForbidden() *AddEntriesForbidden {
	return &AddEntriesForbidden{}
}

/*AddEntriesForbidden handles this case with default header values.

Requested action is not allowed
*/
type AddEntriesForbidden struct {
	Payload *models.ForbiddenError
}

func (o *AddEntriesForbidden) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/timeTrackingEntries][%d] addEntriesForbidden  %+v", 403, o.Payload)
}

func (o *AddEntriesForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *AddEntriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEntriesNotFound creates a AddEntriesNotFound with default headers values
func NewAddEntriesNotFound() *AddEntriesNotFound {
	return &AddEntriesNotFound{}
}

/*AddEntriesNotFound handles this case with default header values.

Object not found
*/
type AddEntriesNotFound struct {
	Payload *models.NotFoundError
}

func (o *AddEntriesNotFound) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/timeTrackingEntries][%d] addEntriesNotFound  %+v", 404, o.Payload)
}

func (o *AddEntriesNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *AddEntriesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEntriesTooManyRequests creates a AddEntriesTooManyRequests with default headers values
func NewAddEntriesTooManyRequests() *AddEntriesTooManyRequests {
	return &AddEntriesTooManyRequests{}
}

/*AddEntriesTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type AddEntriesTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *AddEntriesTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/timeTrackingEntries][%d] addEntriesTooManyRequests  %+v", 429, o.Payload)
}

func (o *AddEntriesTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *AddEntriesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
