// Code generated by go-swagger; DO NOT EDIT.

package time_tracking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetTimeTrackingEntryReader is a Reader for the GetTimeTrackingEntry structure.
type GetTimeTrackingEntryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTimeTrackingEntryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTimeTrackingEntryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTimeTrackingEntryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTimeTrackingEntryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTimeTrackingEntryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTimeTrackingEntryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetTimeTrackingEntryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTimeTrackingEntryOK creates a GetTimeTrackingEntryOK with default headers values
func NewGetTimeTrackingEntryOK() *GetTimeTrackingEntryOK {
	return &GetTimeTrackingEntryOK{}
}

/*GetTimeTrackingEntryOK handles this case with default header values.

successful operation
*/
type GetTimeTrackingEntryOK struct {
	Payload *models.TimeTrackingEntry
}

func (o *GetTimeTrackingEntryOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/timeTrackingEntries/{timeTrackingEntryId}][%d] getTimeTrackingEntryOK  %+v", 200, o.Payload)
}

func (o *GetTimeTrackingEntryOK) GetPayload() *models.TimeTrackingEntry {
	return o.Payload
}

func (o *GetTimeTrackingEntryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TimeTrackingEntry)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTimeTrackingEntryBadRequest creates a GetTimeTrackingEntryBadRequest with default headers values
func NewGetTimeTrackingEntryBadRequest() *GetTimeTrackingEntryBadRequest {
	return &GetTimeTrackingEntryBadRequest{}
}

/*GetTimeTrackingEntryBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetTimeTrackingEntryBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetTimeTrackingEntryBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/timeTrackingEntries/{timeTrackingEntryId}][%d] getTimeTrackingEntryBadRequest  %+v", 400, o.Payload)
}

func (o *GetTimeTrackingEntryBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetTimeTrackingEntryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTimeTrackingEntryUnauthorized creates a GetTimeTrackingEntryUnauthorized with default headers values
func NewGetTimeTrackingEntryUnauthorized() *GetTimeTrackingEntryUnauthorized {
	return &GetTimeTrackingEntryUnauthorized{}
}

/*GetTimeTrackingEntryUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetTimeTrackingEntryUnauthorized struct {
}

func (o *GetTimeTrackingEntryUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/timeTrackingEntries/{timeTrackingEntryId}][%d] getTimeTrackingEntryUnauthorized ", 401)
}

func (o *GetTimeTrackingEntryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTimeTrackingEntryForbidden creates a GetTimeTrackingEntryForbidden with default headers values
func NewGetTimeTrackingEntryForbidden() *GetTimeTrackingEntryForbidden {
	return &GetTimeTrackingEntryForbidden{}
}

/*GetTimeTrackingEntryForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetTimeTrackingEntryForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetTimeTrackingEntryForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/timeTrackingEntries/{timeTrackingEntryId}][%d] getTimeTrackingEntryForbidden  %+v", 403, o.Payload)
}

func (o *GetTimeTrackingEntryForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetTimeTrackingEntryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTimeTrackingEntryNotFound creates a GetTimeTrackingEntryNotFound with default headers values
func NewGetTimeTrackingEntryNotFound() *GetTimeTrackingEntryNotFound {
	return &GetTimeTrackingEntryNotFound{}
}

/*GetTimeTrackingEntryNotFound handles this case with default header values.

Object not found
*/
type GetTimeTrackingEntryNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetTimeTrackingEntryNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/timeTrackingEntries/{timeTrackingEntryId}][%d] getTimeTrackingEntryNotFound  %+v", 404, o.Payload)
}

func (o *GetTimeTrackingEntryNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetTimeTrackingEntryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTimeTrackingEntryTooManyRequests creates a GetTimeTrackingEntryTooManyRequests with default headers values
func NewGetTimeTrackingEntryTooManyRequests() *GetTimeTrackingEntryTooManyRequests {
	return &GetTimeTrackingEntryTooManyRequests{}
}

/*GetTimeTrackingEntryTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetTimeTrackingEntryTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetTimeTrackingEntryTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/timeTrackingEntries/{timeTrackingEntryId}][%d] getTimeTrackingEntryTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetTimeTrackingEntryTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetTimeTrackingEntryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
