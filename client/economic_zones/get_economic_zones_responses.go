// Code generated by go-swagger; DO NOT EDIT.

package economic_zones

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetEconomicZonesReader is a Reader for the GetEconomicZones structure.
type GetEconomicZonesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEconomicZonesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEconomicZonesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetEconomicZonesNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetEconomicZonesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetEconomicZonesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetEconomicZonesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetEconomicZonesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetEconomicZonesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetEconomicZonesOK creates a GetEconomicZonesOK with default headers values
func NewGetEconomicZonesOK() *GetEconomicZonesOK {
	return &GetEconomicZonesOK{}
}

/*GetEconomicZonesOK handles this case with default header values.

successful operation
*/
type GetEconomicZonesOK struct {
	Payload *models.ResultListEconomicZone
}

func (o *GetEconomicZonesOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/economicZones][%d] getEconomicZonesOK  %+v", 200, o.Payload)
}

func (o *GetEconomicZonesOK) GetPayload() *models.ResultListEconomicZone {
	return o.Payload
}

func (o *GetEconomicZonesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResultListEconomicZone)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEconomicZonesNoContent creates a GetEconomicZonesNoContent with default headers values
func NewGetEconomicZonesNoContent() *GetEconomicZonesNoContent {
	return &GetEconomicZonesNoContent{}
}

/*GetEconomicZonesNoContent handles this case with default header values.

Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object.
*/
type GetEconomicZonesNoContent struct {
}

func (o *GetEconomicZonesNoContent) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/economicZones][%d] getEconomicZonesNoContent ", 204)
}

func (o *GetEconomicZonesNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetEconomicZonesBadRequest creates a GetEconomicZonesBadRequest with default headers values
func NewGetEconomicZonesBadRequest() *GetEconomicZonesBadRequest {
	return &GetEconomicZonesBadRequest{}
}

/*GetEconomicZonesBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetEconomicZonesBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetEconomicZonesBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/economicZones][%d] getEconomicZonesBadRequest  %+v", 400, o.Payload)
}

func (o *GetEconomicZonesBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetEconomicZonesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEconomicZonesUnauthorized creates a GetEconomicZonesUnauthorized with default headers values
func NewGetEconomicZonesUnauthorized() *GetEconomicZonesUnauthorized {
	return &GetEconomicZonesUnauthorized{}
}

/*GetEconomicZonesUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetEconomicZonesUnauthorized struct {
}

func (o *GetEconomicZonesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/economicZones][%d] getEconomicZonesUnauthorized ", 401)
}

func (o *GetEconomicZonesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetEconomicZonesForbidden creates a GetEconomicZonesForbidden with default headers values
func NewGetEconomicZonesForbidden() *GetEconomicZonesForbidden {
	return &GetEconomicZonesForbidden{}
}

/*GetEconomicZonesForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetEconomicZonesForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetEconomicZonesForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/economicZones][%d] getEconomicZonesForbidden  %+v", 403, o.Payload)
}

func (o *GetEconomicZonesForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetEconomicZonesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEconomicZonesNotFound creates a GetEconomicZonesNotFound with default headers values
func NewGetEconomicZonesNotFound() *GetEconomicZonesNotFound {
	return &GetEconomicZonesNotFound{}
}

/*GetEconomicZonesNotFound handles this case with default header values.

Object not found
*/
type GetEconomicZonesNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetEconomicZonesNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/economicZones][%d] getEconomicZonesNotFound  %+v", 404, o.Payload)
}

func (o *GetEconomicZonesNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetEconomicZonesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEconomicZonesTooManyRequests creates a GetEconomicZonesTooManyRequests with default headers values
func NewGetEconomicZonesTooManyRequests() *GetEconomicZonesTooManyRequests {
	return &GetEconomicZonesTooManyRequests{}
}

/*GetEconomicZonesTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetEconomicZonesTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetEconomicZonesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/economicZones][%d] getEconomicZonesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetEconomicZonesTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetEconomicZonesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
