// Code generated by go-swagger; DO NOT EDIT.

package commodity_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/mvnetbiz/go-korona/models"
)

// NewAddCommodityGroupsParams creates a new AddCommodityGroupsParams object
// with the default values initialized.
func NewAddCommodityGroupsParams() *AddCommodityGroupsParams {
	var ()
	return &AddCommodityGroupsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddCommodityGroupsParamsWithTimeout creates a new AddCommodityGroupsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddCommodityGroupsParamsWithTimeout(timeout time.Duration) *AddCommodityGroupsParams {
	var ()
	return &AddCommodityGroupsParams{

		timeout: timeout,
	}
}

// NewAddCommodityGroupsParamsWithContext creates a new AddCommodityGroupsParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddCommodityGroupsParamsWithContext(ctx context.Context) *AddCommodityGroupsParams {
	var ()
	return &AddCommodityGroupsParams{

		Context: ctx,
	}
}

// NewAddCommodityGroupsParamsWithHTTPClient creates a new AddCommodityGroupsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddCommodityGroupsParamsWithHTTPClient(client *http.Client) *AddCommodityGroupsParams {
	var ()
	return &AddCommodityGroupsParams{
		HTTPClient: client,
	}
}

/*AddCommodityGroupsParams contains all the parameters to send to the API endpoint
for the add commodity groups operation typically these are written to a http.Request
*/
type AddCommodityGroupsParams struct {

	/*Body
	  an array of new commodity groups

	*/
	Body []*models.CommodityGroup
	/*KoronaAccountID
	  account id of the KORONA.cloud account

	*/
	KoronaAccountID string
	/*Upsert
	  when set to true, updates the object instead of generating a already-exists-error

	*/
	Upsert *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add commodity groups params
func (o *AddCommodityGroupsParams) WithTimeout(timeout time.Duration) *AddCommodityGroupsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add commodity groups params
func (o *AddCommodityGroupsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add commodity groups params
func (o *AddCommodityGroupsParams) WithContext(ctx context.Context) *AddCommodityGroupsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add commodity groups params
func (o *AddCommodityGroupsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add commodity groups params
func (o *AddCommodityGroupsParams) WithHTTPClient(client *http.Client) *AddCommodityGroupsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add commodity groups params
func (o *AddCommodityGroupsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the add commodity groups params
func (o *AddCommodityGroupsParams) WithBody(body []*models.CommodityGroup) *AddCommodityGroupsParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the add commodity groups params
func (o *AddCommodityGroupsParams) SetBody(body []*models.CommodityGroup) {
	o.Body = body
}

// WithKoronaAccountID adds the koronaAccountID to the add commodity groups params
func (o *AddCommodityGroupsParams) WithKoronaAccountID(koronaAccountID string) *AddCommodityGroupsParams {
	o.SetKoronaAccountID(koronaAccountID)
	return o
}

// SetKoronaAccountID adds the koronaAccountId to the add commodity groups params
func (o *AddCommodityGroupsParams) SetKoronaAccountID(koronaAccountID string) {
	o.KoronaAccountID = koronaAccountID
}

// WithUpsert adds the upsert to the add commodity groups params
func (o *AddCommodityGroupsParams) WithUpsert(upsert *bool) *AddCommodityGroupsParams {
	o.SetUpsert(upsert)
	return o
}

// SetUpsert adds the upsert to the add commodity groups params
func (o *AddCommodityGroupsParams) SetUpsert(upsert *bool) {
	o.Upsert = upsert
}

// WriteToRequest writes these params to a swagger request
func (o *AddCommodityGroupsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param koronaAccountId
	if err := r.SetPathParam("koronaAccountId", o.KoronaAccountID); err != nil {
		return err
	}

	if o.Upsert != nil {

		// query param upsert
		var qrUpsert bool
		if o.Upsert != nil {
			qrUpsert = *o.Upsert
		}
		qUpsert := swag.FormatBool(qrUpsert)
		if qUpsert != "" {
			if err := r.SetQueryParam("upsert", qUpsert); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
