// Code generated by go-swagger; DO NOT EDIT.

package commodity_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new commodity groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for commodity groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddCommodityGroups(params *AddCommodityGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*AddCommodityGroupsOK, error)

	DeleteCommodityGroup(params *DeleteCommodityGroupParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCommodityGroupNoContent, error)

	DeleteCommodityGroups(params *DeleteCommodityGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCommodityGroupsOK, error)

	GetCommodityGroup(params *GetCommodityGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetCommodityGroupOK, error)

	GetCommodityGroups(params *GetCommodityGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCommodityGroupsOK, error)

	UpdateCommodityGroup(params *UpdateCommodityGroupParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCommodityGroupNoContent, error)

	UpdateCommodityGroups(params *UpdateCommodityGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCommodityGroupsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddCommodityGroups adds a batch of new commodity groups
*/
func (a *Client) AddCommodityGroups(params *AddCommodityGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*AddCommodityGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCommodityGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addCommodityGroups",
		Method:             "POST",
		PathPattern:        "/accounts/{koronaAccountId}/commodityGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddCommodityGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddCommodityGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addCommodityGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCommodityGroup deletes the single commodity group
*/
func (a *Client) DeleteCommodityGroup(params *DeleteCommodityGroupParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCommodityGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCommodityGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCommodityGroup",
		Method:             "DELETE",
		PathPattern:        "/accounts/{koronaAccountId}/commodityGroups/{commodityGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCommodityGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCommodityGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCommodityGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCommodityGroups deletes a batch of commodity groups
*/
func (a *Client) DeleteCommodityGroups(params *DeleteCommodityGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCommodityGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCommodityGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCommodityGroups",
		Method:             "DELETE",
		PathPattern:        "/accounts/{koronaAccountId}/commodityGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCommodityGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCommodityGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCommodityGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCommodityGroup returns the single commodity group
*/
func (a *Client) GetCommodityGroup(params *GetCommodityGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetCommodityGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCommodityGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCommodityGroup",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/commodityGroups/{commodityGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCommodityGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCommodityGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCommodityGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCommodityGroups lists all commodity groups
*/
func (a *Client) GetCommodityGroups(params *GetCommodityGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCommodityGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCommodityGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCommodityGroups",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/commodityGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCommodityGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCommodityGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCommodityGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCommodityGroup updates the single commodity group
*/
func (a *Client) UpdateCommodityGroup(params *UpdateCommodityGroupParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCommodityGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCommodityGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCommodityGroup",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/commodityGroups/{commodityGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCommodityGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCommodityGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCommodityGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCommodityGroups updates a batch of commodity groups
*/
func (a *Client) UpdateCommodityGroups(params *UpdateCommodityGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCommodityGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCommodityGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCommodityGroups",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/commodityGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCommodityGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCommodityGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCommodityGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
