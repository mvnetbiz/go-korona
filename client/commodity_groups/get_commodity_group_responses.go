// Code generated by go-swagger; DO NOT EDIT.

package commodity_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetCommodityGroupReader is a Reader for the GetCommodityGroup structure.
type GetCommodityGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCommodityGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCommodityGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCommodityGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetCommodityGroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCommodityGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCommodityGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetCommodityGroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetCommodityGroupOK creates a GetCommodityGroupOK with default headers values
func NewGetCommodityGroupOK() *GetCommodityGroupOK {
	return &GetCommodityGroupOK{}
}

/*GetCommodityGroupOK handles this case with default header values.

successful operation
*/
type GetCommodityGroupOK struct {
	Payload *models.CommodityGroup
}

func (o *GetCommodityGroupOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/commodityGroups/{commodityGroupId}][%d] getCommodityGroupOK  %+v", 200, o.Payload)
}

func (o *GetCommodityGroupOK) GetPayload() *models.CommodityGroup {
	return o.Payload
}

func (o *GetCommodityGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommodityGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCommodityGroupBadRequest creates a GetCommodityGroupBadRequest with default headers values
func NewGetCommodityGroupBadRequest() *GetCommodityGroupBadRequest {
	return &GetCommodityGroupBadRequest{}
}

/*GetCommodityGroupBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetCommodityGroupBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetCommodityGroupBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/commodityGroups/{commodityGroupId}][%d] getCommodityGroupBadRequest  %+v", 400, o.Payload)
}

func (o *GetCommodityGroupBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetCommodityGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCommodityGroupUnauthorized creates a GetCommodityGroupUnauthorized with default headers values
func NewGetCommodityGroupUnauthorized() *GetCommodityGroupUnauthorized {
	return &GetCommodityGroupUnauthorized{}
}

/*GetCommodityGroupUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetCommodityGroupUnauthorized struct {
}

func (o *GetCommodityGroupUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/commodityGroups/{commodityGroupId}][%d] getCommodityGroupUnauthorized ", 401)
}

func (o *GetCommodityGroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCommodityGroupForbidden creates a GetCommodityGroupForbidden with default headers values
func NewGetCommodityGroupForbidden() *GetCommodityGroupForbidden {
	return &GetCommodityGroupForbidden{}
}

/*GetCommodityGroupForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetCommodityGroupForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetCommodityGroupForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/commodityGroups/{commodityGroupId}][%d] getCommodityGroupForbidden  %+v", 403, o.Payload)
}

func (o *GetCommodityGroupForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetCommodityGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCommodityGroupNotFound creates a GetCommodityGroupNotFound with default headers values
func NewGetCommodityGroupNotFound() *GetCommodityGroupNotFound {
	return &GetCommodityGroupNotFound{}
}

/*GetCommodityGroupNotFound handles this case with default header values.

Object not found
*/
type GetCommodityGroupNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetCommodityGroupNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/commodityGroups/{commodityGroupId}][%d] getCommodityGroupNotFound  %+v", 404, o.Payload)
}

func (o *GetCommodityGroupNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetCommodityGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCommodityGroupTooManyRequests creates a GetCommodityGroupTooManyRequests with default headers values
func NewGetCommodityGroupTooManyRequests() *GetCommodityGroupTooManyRequests {
	return &GetCommodityGroupTooManyRequests{}
}

/*GetCommodityGroupTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetCommodityGroupTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetCommodityGroupTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/commodityGroups/{commodityGroupId}][%d] getCommodityGroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCommodityGroupTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetCommodityGroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
