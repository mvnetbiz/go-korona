// Code generated by go-swagger; DO NOT EDIT.

package commodity_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// UpdateCommodityGroupReader is a Reader for the UpdateCommodityGroup structure.
type UpdateCommodityGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCommodityGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateCommodityGroupNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCommodityGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateCommodityGroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateCommodityGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateCommodityGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateCommodityGroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateCommodityGroupNoContent creates a UpdateCommodityGroupNoContent with default headers values
func NewUpdateCommodityGroupNoContent() *UpdateCommodityGroupNoContent {
	return &UpdateCommodityGroupNoContent{}
}

/*UpdateCommodityGroupNoContent handles this case with default header values.

Request successful, patch on single resource does not return any content
*/
type UpdateCommodityGroupNoContent struct {
}

func (o *UpdateCommodityGroupNoContent) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/commodityGroups/{commodityGroupId}][%d] updateCommodityGroupNoContent ", 204)
}

func (o *UpdateCommodityGroupNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCommodityGroupBadRequest creates a UpdateCommodityGroupBadRequest with default headers values
func NewUpdateCommodityGroupBadRequest() *UpdateCommodityGroupBadRequest {
	return &UpdateCommodityGroupBadRequest{}
}

/*UpdateCommodityGroupBadRequest handles this case with default header values.

Malformed querystring or model
*/
type UpdateCommodityGroupBadRequest struct {
	Payload *models.BadRequestError
}

func (o *UpdateCommodityGroupBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/commodityGroups/{commodityGroupId}][%d] updateCommodityGroupBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCommodityGroupBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UpdateCommodityGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCommodityGroupUnauthorized creates a UpdateCommodityGroupUnauthorized with default headers values
func NewUpdateCommodityGroupUnauthorized() *UpdateCommodityGroupUnauthorized {
	return &UpdateCommodityGroupUnauthorized{}
}

/*UpdateCommodityGroupUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type UpdateCommodityGroupUnauthorized struct {
}

func (o *UpdateCommodityGroupUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/commodityGroups/{commodityGroupId}][%d] updateCommodityGroupUnauthorized ", 401)
}

func (o *UpdateCommodityGroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCommodityGroupForbidden creates a UpdateCommodityGroupForbidden with default headers values
func NewUpdateCommodityGroupForbidden() *UpdateCommodityGroupForbidden {
	return &UpdateCommodityGroupForbidden{}
}

/*UpdateCommodityGroupForbidden handles this case with default header values.

Requested action is not allowed
*/
type UpdateCommodityGroupForbidden struct {
	Payload *models.ForbiddenError
}

func (o *UpdateCommodityGroupForbidden) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/commodityGroups/{commodityGroupId}][%d] updateCommodityGroupForbidden  %+v", 403, o.Payload)
}

func (o *UpdateCommodityGroupForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *UpdateCommodityGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCommodityGroupNotFound creates a UpdateCommodityGroupNotFound with default headers values
func NewUpdateCommodityGroupNotFound() *UpdateCommodityGroupNotFound {
	return &UpdateCommodityGroupNotFound{}
}

/*UpdateCommodityGroupNotFound handles this case with default header values.

Object not found
*/
type UpdateCommodityGroupNotFound struct {
	Payload *models.NotFoundError
}

func (o *UpdateCommodityGroupNotFound) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/commodityGroups/{commodityGroupId}][%d] updateCommodityGroupNotFound  %+v", 404, o.Payload)
}

func (o *UpdateCommodityGroupNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UpdateCommodityGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCommodityGroupTooManyRequests creates a UpdateCommodityGroupTooManyRequests with default headers values
func NewUpdateCommodityGroupTooManyRequests() *UpdateCommodityGroupTooManyRequests {
	return &UpdateCommodityGroupTooManyRequests{}
}

/*UpdateCommodityGroupTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type UpdateCommodityGroupTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *UpdateCommodityGroupTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/commodityGroups/{commodityGroupId}][%d] updateCommodityGroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateCommodityGroupTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *UpdateCommodityGroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
