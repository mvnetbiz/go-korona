// Code generated by go-swagger; DO NOT EDIT.

package commodity_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// UpdateCommodityGroupsReader is a Reader for the UpdateCommodityGroups structure.
type UpdateCommodityGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCommodityGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCommodityGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCommodityGroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateCommodityGroupsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateCommodityGroupsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateCommodityGroupsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateCommodityGroupsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateCommodityGroupsOK creates a UpdateCommodityGroupsOK with default headers values
func NewUpdateCommodityGroupsOK() *UpdateCommodityGroupsOK {
	return &UpdateCommodityGroupsOK{}
}

/*UpdateCommodityGroupsOK handles this case with default header values.

successful operation
*/
type UpdateCommodityGroupsOK struct {
	Payload []*models.AddOrUpdateResult
}

func (o *UpdateCommodityGroupsOK) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/commodityGroups][%d] updateCommodityGroupsOK  %+v", 200, o.Payload)
}

func (o *UpdateCommodityGroupsOK) GetPayload() []*models.AddOrUpdateResult {
	return o.Payload
}

func (o *UpdateCommodityGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCommodityGroupsBadRequest creates a UpdateCommodityGroupsBadRequest with default headers values
func NewUpdateCommodityGroupsBadRequest() *UpdateCommodityGroupsBadRequest {
	return &UpdateCommodityGroupsBadRequest{}
}

/*UpdateCommodityGroupsBadRequest handles this case with default header values.

Malformed querystring or model
*/
type UpdateCommodityGroupsBadRequest struct {
	Payload *models.BadRequestError
}

func (o *UpdateCommodityGroupsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/commodityGroups][%d] updateCommodityGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCommodityGroupsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UpdateCommodityGroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCommodityGroupsUnauthorized creates a UpdateCommodityGroupsUnauthorized with default headers values
func NewUpdateCommodityGroupsUnauthorized() *UpdateCommodityGroupsUnauthorized {
	return &UpdateCommodityGroupsUnauthorized{}
}

/*UpdateCommodityGroupsUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type UpdateCommodityGroupsUnauthorized struct {
}

func (o *UpdateCommodityGroupsUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/commodityGroups][%d] updateCommodityGroupsUnauthorized ", 401)
}

func (o *UpdateCommodityGroupsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCommodityGroupsForbidden creates a UpdateCommodityGroupsForbidden with default headers values
func NewUpdateCommodityGroupsForbidden() *UpdateCommodityGroupsForbidden {
	return &UpdateCommodityGroupsForbidden{}
}

/*UpdateCommodityGroupsForbidden handles this case with default header values.

Requested action is not allowed
*/
type UpdateCommodityGroupsForbidden struct {
	Payload *models.ForbiddenError
}

func (o *UpdateCommodityGroupsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/commodityGroups][%d] updateCommodityGroupsForbidden  %+v", 403, o.Payload)
}

func (o *UpdateCommodityGroupsForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *UpdateCommodityGroupsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCommodityGroupsNotFound creates a UpdateCommodityGroupsNotFound with default headers values
func NewUpdateCommodityGroupsNotFound() *UpdateCommodityGroupsNotFound {
	return &UpdateCommodityGroupsNotFound{}
}

/*UpdateCommodityGroupsNotFound handles this case with default header values.

Object not found
*/
type UpdateCommodityGroupsNotFound struct {
	Payload *models.NotFoundError
}

func (o *UpdateCommodityGroupsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/commodityGroups][%d] updateCommodityGroupsNotFound  %+v", 404, o.Payload)
}

func (o *UpdateCommodityGroupsNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UpdateCommodityGroupsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCommodityGroupsTooManyRequests creates a UpdateCommodityGroupsTooManyRequests with default headers values
func NewUpdateCommodityGroupsTooManyRequests() *UpdateCommodityGroupsTooManyRequests {
	return &UpdateCommodityGroupsTooManyRequests{}
}

/*UpdateCommodityGroupsTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type UpdateCommodityGroupsTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *UpdateCommodityGroupsTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/commodityGroups][%d] updateCommodityGroupsTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateCommodityGroupsTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *UpdateCommodityGroupsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
