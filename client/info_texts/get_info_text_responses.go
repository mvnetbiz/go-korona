// Code generated by go-swagger; DO NOT EDIT.

package info_texts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetInfoTextReader is a Reader for the GetInfoText structure.
type GetInfoTextReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInfoTextReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInfoTextOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInfoTextBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetInfoTextUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInfoTextForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInfoTextNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetInfoTextTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetInfoTextOK creates a GetInfoTextOK with default headers values
func NewGetInfoTextOK() *GetInfoTextOK {
	return &GetInfoTextOK{}
}

/*GetInfoTextOK handles this case with default header values.

successful operation
*/
type GetInfoTextOK struct {
	Payload *models.InfoText
}

func (o *GetInfoTextOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/infoTexts/{infoTextId}][%d] getInfoTextOK  %+v", 200, o.Payload)
}

func (o *GetInfoTextOK) GetPayload() *models.InfoText {
	return o.Payload
}

func (o *GetInfoTextOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InfoText)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInfoTextBadRequest creates a GetInfoTextBadRequest with default headers values
func NewGetInfoTextBadRequest() *GetInfoTextBadRequest {
	return &GetInfoTextBadRequest{}
}

/*GetInfoTextBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetInfoTextBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetInfoTextBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/infoTexts/{infoTextId}][%d] getInfoTextBadRequest  %+v", 400, o.Payload)
}

func (o *GetInfoTextBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetInfoTextBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInfoTextUnauthorized creates a GetInfoTextUnauthorized with default headers values
func NewGetInfoTextUnauthorized() *GetInfoTextUnauthorized {
	return &GetInfoTextUnauthorized{}
}

/*GetInfoTextUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetInfoTextUnauthorized struct {
}

func (o *GetInfoTextUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/infoTexts/{infoTextId}][%d] getInfoTextUnauthorized ", 401)
}

func (o *GetInfoTextUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInfoTextForbidden creates a GetInfoTextForbidden with default headers values
func NewGetInfoTextForbidden() *GetInfoTextForbidden {
	return &GetInfoTextForbidden{}
}

/*GetInfoTextForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetInfoTextForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetInfoTextForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/infoTexts/{infoTextId}][%d] getInfoTextForbidden  %+v", 403, o.Payload)
}

func (o *GetInfoTextForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetInfoTextForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInfoTextNotFound creates a GetInfoTextNotFound with default headers values
func NewGetInfoTextNotFound() *GetInfoTextNotFound {
	return &GetInfoTextNotFound{}
}

/*GetInfoTextNotFound handles this case with default header values.

Object not found
*/
type GetInfoTextNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetInfoTextNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/infoTexts/{infoTextId}][%d] getInfoTextNotFound  %+v", 404, o.Payload)
}

func (o *GetInfoTextNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetInfoTextNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInfoTextTooManyRequests creates a GetInfoTextTooManyRequests with default headers values
func NewGetInfoTextTooManyRequests() *GetInfoTextTooManyRequests {
	return &GetInfoTextTooManyRequests{}
}

/*GetInfoTextTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetInfoTextTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetInfoTextTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/infoTexts/{infoTextId}][%d] getInfoTextTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetInfoTextTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetInfoTextTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
