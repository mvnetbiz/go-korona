// Code generated by go-swagger; DO NOT EDIT.

package assortments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetAssortmentReader is a Reader for the GetAssortment structure.
type GetAssortmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAssortmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAssortmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAssortmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAssortmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAssortmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAssortmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAssortmentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAssortmentOK creates a GetAssortmentOK with default headers values
func NewGetAssortmentOK() *GetAssortmentOK {
	return &GetAssortmentOK{}
}

/*GetAssortmentOK handles this case with default header values.

successful operation
*/
type GetAssortmentOK struct {
	Payload *models.Assortment
}

func (o *GetAssortmentOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/assortments/{assortmentId}][%d] getAssortmentOK  %+v", 200, o.Payload)
}

func (o *GetAssortmentOK) GetPayload() *models.Assortment {
	return o.Payload
}

func (o *GetAssortmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Assortment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAssortmentBadRequest creates a GetAssortmentBadRequest with default headers values
func NewGetAssortmentBadRequest() *GetAssortmentBadRequest {
	return &GetAssortmentBadRequest{}
}

/*GetAssortmentBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetAssortmentBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetAssortmentBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/assortments/{assortmentId}][%d] getAssortmentBadRequest  %+v", 400, o.Payload)
}

func (o *GetAssortmentBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetAssortmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAssortmentUnauthorized creates a GetAssortmentUnauthorized with default headers values
func NewGetAssortmentUnauthorized() *GetAssortmentUnauthorized {
	return &GetAssortmentUnauthorized{}
}

/*GetAssortmentUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetAssortmentUnauthorized struct {
}

func (o *GetAssortmentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/assortments/{assortmentId}][%d] getAssortmentUnauthorized ", 401)
}

func (o *GetAssortmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAssortmentForbidden creates a GetAssortmentForbidden with default headers values
func NewGetAssortmentForbidden() *GetAssortmentForbidden {
	return &GetAssortmentForbidden{}
}

/*GetAssortmentForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetAssortmentForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetAssortmentForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/assortments/{assortmentId}][%d] getAssortmentForbidden  %+v", 403, o.Payload)
}

func (o *GetAssortmentForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetAssortmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAssortmentNotFound creates a GetAssortmentNotFound with default headers values
func NewGetAssortmentNotFound() *GetAssortmentNotFound {
	return &GetAssortmentNotFound{}
}

/*GetAssortmentNotFound handles this case with default header values.

Object not found
*/
type GetAssortmentNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetAssortmentNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/assortments/{assortmentId}][%d] getAssortmentNotFound  %+v", 404, o.Payload)
}

func (o *GetAssortmentNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetAssortmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAssortmentTooManyRequests creates a GetAssortmentTooManyRequests with default headers values
func NewGetAssortmentTooManyRequests() *GetAssortmentTooManyRequests {
	return &GetAssortmentTooManyRequests{}
}

/*GetAssortmentTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetAssortmentTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetAssortmentTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/assortments/{assortmentId}][%d] getAssortmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAssortmentTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetAssortmentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
