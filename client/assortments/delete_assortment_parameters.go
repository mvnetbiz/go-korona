// Code generated by go-swagger; DO NOT EDIT.

package assortments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteAssortmentParams creates a new DeleteAssortmentParams object
// with the default values initialized.
func NewDeleteAssortmentParams() *DeleteAssortmentParams {
	var ()
	return &DeleteAssortmentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteAssortmentParamsWithTimeout creates a new DeleteAssortmentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteAssortmentParamsWithTimeout(timeout time.Duration) *DeleteAssortmentParams {
	var ()
	return &DeleteAssortmentParams{

		timeout: timeout,
	}
}

// NewDeleteAssortmentParamsWithContext creates a new DeleteAssortmentParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteAssortmentParamsWithContext(ctx context.Context) *DeleteAssortmentParams {
	var ()
	return &DeleteAssortmentParams{

		Context: ctx,
	}
}

// NewDeleteAssortmentParamsWithHTTPClient creates a new DeleteAssortmentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteAssortmentParamsWithHTTPClient(client *http.Client) *DeleteAssortmentParams {
	var ()
	return &DeleteAssortmentParams{
		HTTPClient: client,
	}
}

/*DeleteAssortmentParams contains all the parameters to send to the API endpoint
for the delete assortment operation typically these are written to a http.Request
*/
type DeleteAssortmentParams struct {

	/*AssortmentID
	  id of the related object (important: id should match the uuid-format)

	*/
	AssortmentID string
	/*KoronaAccountID
	  account id of the KORONA.cloud account

	*/
	KoronaAccountID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete assortment params
func (o *DeleteAssortmentParams) WithTimeout(timeout time.Duration) *DeleteAssortmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete assortment params
func (o *DeleteAssortmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete assortment params
func (o *DeleteAssortmentParams) WithContext(ctx context.Context) *DeleteAssortmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete assortment params
func (o *DeleteAssortmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete assortment params
func (o *DeleteAssortmentParams) WithHTTPClient(client *http.Client) *DeleteAssortmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete assortment params
func (o *DeleteAssortmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAssortmentID adds the assortmentID to the delete assortment params
func (o *DeleteAssortmentParams) WithAssortmentID(assortmentID string) *DeleteAssortmentParams {
	o.SetAssortmentID(assortmentID)
	return o
}

// SetAssortmentID adds the assortmentId to the delete assortment params
func (o *DeleteAssortmentParams) SetAssortmentID(assortmentID string) {
	o.AssortmentID = assortmentID
}

// WithKoronaAccountID adds the koronaAccountID to the delete assortment params
func (o *DeleteAssortmentParams) WithKoronaAccountID(koronaAccountID string) *DeleteAssortmentParams {
	o.SetKoronaAccountID(koronaAccountID)
	return o
}

// SetKoronaAccountID adds the koronaAccountId to the delete assortment params
func (o *DeleteAssortmentParams) SetKoronaAccountID(koronaAccountID string) {
	o.KoronaAccountID = koronaAccountID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteAssortmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param assortmentId
	if err := r.SetPathParam("assortmentId", o.AssortmentID); err != nil {
		return err
	}

	// path param koronaAccountId
	if err := r.SetPathParam("koronaAccountId", o.KoronaAccountID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
