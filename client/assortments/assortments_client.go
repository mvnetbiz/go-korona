// Code generated by go-swagger; DO NOT EDIT.

package assortments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new assortments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for assortments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddAssortments(params *AddAssortmentsParams, authInfo runtime.ClientAuthInfoWriter) (*AddAssortmentsOK, error)

	DeleteAssortment(params *DeleteAssortmentParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAssortmentNoContent, error)

	DeleteAssortments(params *DeleteAssortmentsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAssortmentsOK, error)

	GetAssortment(params *GetAssortmentParams, authInfo runtime.ClientAuthInfoWriter) (*GetAssortmentOK, error)

	GetAssortments(params *GetAssortmentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAssortmentsOK, *GetAssortmentsNoContent, error)

	UpdateAssortment(params *UpdateAssortmentParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAssortmentNoContent, error)

	UpdateAssortments(params *UpdateAssortmentsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAssortmentsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddAssortments adds a batch of new assortments
*/
func (a *Client) AddAssortments(params *AddAssortmentsParams, authInfo runtime.ClientAuthInfoWriter) (*AddAssortmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAssortmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addAssortments",
		Method:             "POST",
		PathPattern:        "/accounts/{koronaAccountId}/assortments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddAssortmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddAssortmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addAssortments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAssortment deletes the single assortment
*/
func (a *Client) DeleteAssortment(params *DeleteAssortmentParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAssortmentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAssortmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAssortment",
		Method:             "DELETE",
		PathPattern:        "/accounts/{koronaAccountId}/assortments/{assortmentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAssortmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAssortmentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAssortment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAssortments deletes a batch of assortments
*/
func (a *Client) DeleteAssortments(params *DeleteAssortmentsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAssortmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAssortmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAssortments",
		Method:             "DELETE",
		PathPattern:        "/accounts/{koronaAccountId}/assortments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAssortmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAssortmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAssortments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAssortment returns the single assortment
*/
func (a *Client) GetAssortment(params *GetAssortmentParams, authInfo runtime.ClientAuthInfoWriter) (*GetAssortmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssortmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAssortment",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/assortments/{assortmentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAssortmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssortmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAssortment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAssortments lists all assortments
*/
func (a *Client) GetAssortments(params *GetAssortmentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAssortmentsOK, *GetAssortmentsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssortmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAssortments",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/assortments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAssortmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetAssortmentsOK:
		return value, nil, nil
	case *GetAssortmentsNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for assortments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAssortment updates the single assortment
*/
func (a *Client) UpdateAssortment(params *UpdateAssortmentParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAssortmentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAssortmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAssortment",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/assortments/{assortmentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAssortmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAssortmentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAssortment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAssortments updates a batch of assortments
*/
func (a *Client) UpdateAssortments(params *UpdateAssortmentsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAssortmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAssortmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAssortments",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/assortments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAssortmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAssortmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAssortments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
