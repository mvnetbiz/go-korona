// Code generated by go-swagger; DO NOT EDIT.

package assortments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// AddAssortmentsReader is a Reader for the AddAssortments structure.
type AddAssortmentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddAssortmentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddAssortmentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddAssortmentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddAssortmentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddAssortmentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddAssortmentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAddAssortmentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddAssortmentsOK creates a AddAssortmentsOK with default headers values
func NewAddAssortmentsOK() *AddAssortmentsOK {
	return &AddAssortmentsOK{}
}

/*AddAssortmentsOK handles this case with default header values.

successful operation
*/
type AddAssortmentsOK struct {
	Payload []*models.AddOrUpdateResult
}

func (o *AddAssortmentsOK) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/assortments][%d] addAssortmentsOK  %+v", 200, o.Payload)
}

func (o *AddAssortmentsOK) GetPayload() []*models.AddOrUpdateResult {
	return o.Payload
}

func (o *AddAssortmentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAssortmentsBadRequest creates a AddAssortmentsBadRequest with default headers values
func NewAddAssortmentsBadRequest() *AddAssortmentsBadRequest {
	return &AddAssortmentsBadRequest{}
}

/*AddAssortmentsBadRequest handles this case with default header values.

Malformed querystring or model
*/
type AddAssortmentsBadRequest struct {
	Payload *models.BadRequestError
}

func (o *AddAssortmentsBadRequest) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/assortments][%d] addAssortmentsBadRequest  %+v", 400, o.Payload)
}

func (o *AddAssortmentsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *AddAssortmentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAssortmentsUnauthorized creates a AddAssortmentsUnauthorized with default headers values
func NewAddAssortmentsUnauthorized() *AddAssortmentsUnauthorized {
	return &AddAssortmentsUnauthorized{}
}

/*AddAssortmentsUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type AddAssortmentsUnauthorized struct {
}

func (o *AddAssortmentsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/assortments][%d] addAssortmentsUnauthorized ", 401)
}

func (o *AddAssortmentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddAssortmentsForbidden creates a AddAssortmentsForbidden with default headers values
func NewAddAssortmentsForbidden() *AddAssortmentsForbidden {
	return &AddAssortmentsForbidden{}
}

/*AddAssortmentsForbidden handles this case with default header values.

Requested action is not allowed
*/
type AddAssortmentsForbidden struct {
	Payload *models.ForbiddenError
}

func (o *AddAssortmentsForbidden) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/assortments][%d] addAssortmentsForbidden  %+v", 403, o.Payload)
}

func (o *AddAssortmentsForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *AddAssortmentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAssortmentsNotFound creates a AddAssortmentsNotFound with default headers values
func NewAddAssortmentsNotFound() *AddAssortmentsNotFound {
	return &AddAssortmentsNotFound{}
}

/*AddAssortmentsNotFound handles this case with default header values.

Object not found
*/
type AddAssortmentsNotFound struct {
	Payload *models.NotFoundError
}

func (o *AddAssortmentsNotFound) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/assortments][%d] addAssortmentsNotFound  %+v", 404, o.Payload)
}

func (o *AddAssortmentsNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *AddAssortmentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAssortmentsTooManyRequests creates a AddAssortmentsTooManyRequests with default headers values
func NewAddAssortmentsTooManyRequests() *AddAssortmentsTooManyRequests {
	return &AddAssortmentsTooManyRequests{}
}

/*AddAssortmentsTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type AddAssortmentsTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *AddAssortmentsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/assortments][%d] addAssortmentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *AddAssortmentsTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *AddAssortmentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
