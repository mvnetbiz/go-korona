// Code generated by go-swagger; DO NOT EDIT.

package assortments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// UpdateAssortmentReader is a Reader for the UpdateAssortment structure.
type UpdateAssortmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAssortmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateAssortmentNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAssortmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateAssortmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateAssortmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAssortmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateAssortmentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateAssortmentNoContent creates a UpdateAssortmentNoContent with default headers values
func NewUpdateAssortmentNoContent() *UpdateAssortmentNoContent {
	return &UpdateAssortmentNoContent{}
}

/*UpdateAssortmentNoContent handles this case with default header values.

Request successful, patch on single resource does not return any content
*/
type UpdateAssortmentNoContent struct {
}

func (o *UpdateAssortmentNoContent) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/assortments/{assortmentId}][%d] updateAssortmentNoContent ", 204)
}

func (o *UpdateAssortmentNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAssortmentBadRequest creates a UpdateAssortmentBadRequest with default headers values
func NewUpdateAssortmentBadRequest() *UpdateAssortmentBadRequest {
	return &UpdateAssortmentBadRequest{}
}

/*UpdateAssortmentBadRequest handles this case with default header values.

Malformed querystring or model
*/
type UpdateAssortmentBadRequest struct {
	Payload *models.BadRequestError
}

func (o *UpdateAssortmentBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/assortments/{assortmentId}][%d] updateAssortmentBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAssortmentBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UpdateAssortmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAssortmentUnauthorized creates a UpdateAssortmentUnauthorized with default headers values
func NewUpdateAssortmentUnauthorized() *UpdateAssortmentUnauthorized {
	return &UpdateAssortmentUnauthorized{}
}

/*UpdateAssortmentUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type UpdateAssortmentUnauthorized struct {
}

func (o *UpdateAssortmentUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/assortments/{assortmentId}][%d] updateAssortmentUnauthorized ", 401)
}

func (o *UpdateAssortmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAssortmentForbidden creates a UpdateAssortmentForbidden with default headers values
func NewUpdateAssortmentForbidden() *UpdateAssortmentForbidden {
	return &UpdateAssortmentForbidden{}
}

/*UpdateAssortmentForbidden handles this case with default header values.

Requested action is not allowed
*/
type UpdateAssortmentForbidden struct {
	Payload *models.ForbiddenError
}

func (o *UpdateAssortmentForbidden) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/assortments/{assortmentId}][%d] updateAssortmentForbidden  %+v", 403, o.Payload)
}

func (o *UpdateAssortmentForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *UpdateAssortmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAssortmentNotFound creates a UpdateAssortmentNotFound with default headers values
func NewUpdateAssortmentNotFound() *UpdateAssortmentNotFound {
	return &UpdateAssortmentNotFound{}
}

/*UpdateAssortmentNotFound handles this case with default header values.

Object not found
*/
type UpdateAssortmentNotFound struct {
	Payload *models.NotFoundError
}

func (o *UpdateAssortmentNotFound) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/assortments/{assortmentId}][%d] updateAssortmentNotFound  %+v", 404, o.Payload)
}

func (o *UpdateAssortmentNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UpdateAssortmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAssortmentTooManyRequests creates a UpdateAssortmentTooManyRequests with default headers values
func NewUpdateAssortmentTooManyRequests() *UpdateAssortmentTooManyRequests {
	return &UpdateAssortmentTooManyRequests{}
}

/*UpdateAssortmentTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type UpdateAssortmentTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *UpdateAssortmentTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/assortments/{assortmentId}][%d] updateAssortmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateAssortmentTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *UpdateAssortmentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
