// Code generated by go-swagger; DO NOT EDIT.

package price_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new price groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for price groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetPriceGroup(params *GetPriceGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetPriceGroupOK, error)

	GetPriceGroups(params *GetPriceGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPriceGroupsOK, *GetPriceGroupsNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetPriceGroup returns the single price group
*/
func (a *Client) GetPriceGroup(params *GetPriceGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetPriceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPriceGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPriceGroup",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/priceGroups/{priceGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPriceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPriceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPriceGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPriceGroups lists all price groups
*/
func (a *Client) GetPriceGroups(params *GetPriceGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPriceGroupsOK, *GetPriceGroupsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPriceGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPriceGroups",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/priceGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPriceGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetPriceGroupsOK:
		return value, nil, nil
	case *GetPriceGroupsNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for price_groups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
