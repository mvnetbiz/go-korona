// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new products API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for products API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddProducts(params *AddProductsParams, authInfo runtime.ClientAuthInfoWriter) (*AddProductsOK, error)

	DeleteProduct(params *DeleteProductParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProductNoContent, error)

	DeleteProducts(params *DeleteProductsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProductsOK, error)

	GetProduct(params *GetProductParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductOK, error)

	GetProductStocks(params *GetProductStocksParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductStocksOK, *GetProductStocksNoContent, error)

	GetProducts(params *GetProductsParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductsOK, *GetProductsNoContent, error)

	UpdateProduct(params *UpdateProductParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProductNoContent, error)

	UpdateProducts(params *UpdateProductsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProductsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddProducts adds a batch of new products
*/
func (a *Client) AddProducts(params *AddProductsParams, authInfo runtime.ClientAuthInfoWriter) (*AddProductsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddProductsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addProducts",
		Method:             "POST",
		PathPattern:        "/accounts/{koronaAccountId}/products",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddProductsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddProductsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addProducts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProduct deletes the single product
*/
func (a *Client) DeleteProduct(params *DeleteProductParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProductNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProductParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProduct",
		Method:             "DELETE",
		PathPattern:        "/accounts/{koronaAccountId}/products/{productId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProductReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProductNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProduct: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProducts deletes a batch of products
*/
func (a *Client) DeleteProducts(params *DeleteProductsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProductsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProductsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProducts",
		Method:             "DELETE",
		PathPattern:        "/accounts/{koronaAccountId}/products",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProductsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProductsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProducts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProduct returns the single product
*/
func (a *Client) GetProduct(params *GetProductParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProduct",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/products/{productId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProductReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProductOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProduct: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProductStocks lists the product stocks in different warehouses k o r o n a retail required
*/
func (a *Client) GetProductStocks(params *GetProductStocksParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductStocksOK, *GetProductStocksNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductStocksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductStocks",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/products/{productId}/stocks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProductStocksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetProductStocksOK:
		return value, nil, nil
	case *GetProductStocksNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for products: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProducts lists all products
*/
func (a *Client) GetProducts(params *GetProductsParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductsOK, *GetProductsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProducts",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/products",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProductsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetProductsOK:
		return value, nil, nil
	case *GetProductsNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for products: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProduct updates the single product

  if [number] is set, the number of the object will change and the resource location as well
*/
func (a *Client) UpdateProduct(params *UpdateProductParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProductNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProductParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProduct",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/products/{productId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProductReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProductNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProduct: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProducts updates a batch of products

  [number] must be set in the objects, otherwise the object cannot be updated
*/
func (a *Client) UpdateProducts(params *UpdateProductsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProductsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProductsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProducts",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/products",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProductsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProductsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProducts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
