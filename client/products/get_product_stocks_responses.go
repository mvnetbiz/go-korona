// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetProductStocksReader is a Reader for the GetProductStocks structure.
type GetProductStocksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProductStocksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProductStocksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetProductStocksNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetProductStocksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetProductStocksUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetProductStocksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetProductStocksNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetProductStocksTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetProductStocksOK creates a GetProductStocksOK with default headers values
func NewGetProductStocksOK() *GetProductStocksOK {
	return &GetProductStocksOK{}
}

/*GetProductStocksOK handles this case with default header values.

successful operation
*/
type GetProductStocksOK struct {
	Payload *models.ResultListProductStock
}

func (o *GetProductStocksOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/products/{productId}/stocks][%d] getProductStocksOK  %+v", 200, o.Payload)
}

func (o *GetProductStocksOK) GetPayload() *models.ResultListProductStock {
	return o.Payload
}

func (o *GetProductStocksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResultListProductStock)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProductStocksNoContent creates a GetProductStocksNoContent with default headers values
func NewGetProductStocksNoContent() *GetProductStocksNoContent {
	return &GetProductStocksNoContent{}
}

/*GetProductStocksNoContent handles this case with default header values.

Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object.
*/
type GetProductStocksNoContent struct {
}

func (o *GetProductStocksNoContent) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/products/{productId}/stocks][%d] getProductStocksNoContent ", 204)
}

func (o *GetProductStocksNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProductStocksBadRequest creates a GetProductStocksBadRequest with default headers values
func NewGetProductStocksBadRequest() *GetProductStocksBadRequest {
	return &GetProductStocksBadRequest{}
}

/*GetProductStocksBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetProductStocksBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetProductStocksBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/products/{productId}/stocks][%d] getProductStocksBadRequest  %+v", 400, o.Payload)
}

func (o *GetProductStocksBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetProductStocksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProductStocksUnauthorized creates a GetProductStocksUnauthorized with default headers values
func NewGetProductStocksUnauthorized() *GetProductStocksUnauthorized {
	return &GetProductStocksUnauthorized{}
}

/*GetProductStocksUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetProductStocksUnauthorized struct {
}

func (o *GetProductStocksUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/products/{productId}/stocks][%d] getProductStocksUnauthorized ", 401)
}

func (o *GetProductStocksUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProductStocksForbidden creates a GetProductStocksForbidden with default headers values
func NewGetProductStocksForbidden() *GetProductStocksForbidden {
	return &GetProductStocksForbidden{}
}

/*GetProductStocksForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetProductStocksForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetProductStocksForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/products/{productId}/stocks][%d] getProductStocksForbidden  %+v", 403, o.Payload)
}

func (o *GetProductStocksForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetProductStocksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProductStocksNotFound creates a GetProductStocksNotFound with default headers values
func NewGetProductStocksNotFound() *GetProductStocksNotFound {
	return &GetProductStocksNotFound{}
}

/*GetProductStocksNotFound handles this case with default header values.

Object not found
*/
type GetProductStocksNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetProductStocksNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/products/{productId}/stocks][%d] getProductStocksNotFound  %+v", 404, o.Payload)
}

func (o *GetProductStocksNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetProductStocksNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProductStocksTooManyRequests creates a GetProductStocksTooManyRequests with default headers values
func NewGetProductStocksTooManyRequests() *GetProductStocksTooManyRequests {
	return &GetProductStocksTooManyRequests{}
}

/*GetProductStocksTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetProductStocksTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetProductStocksTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/products/{productId}/stocks][%d] getProductStocksTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetProductStocksTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetProductStocksTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
