// Code generated by go-swagger; DO NOT EDIT.

package suppliers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetSupplierReader is a Reader for the GetSupplier structure.
type GetSupplierReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSupplierReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSupplierOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSupplierBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSupplierUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSupplierForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSupplierNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSupplierTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSupplierOK creates a GetSupplierOK with default headers values
func NewGetSupplierOK() *GetSupplierOK {
	return &GetSupplierOK{}
}

/*GetSupplierOK handles this case with default header values.

successful operation
*/
type GetSupplierOK struct {
	Payload *models.Supplier
}

func (o *GetSupplierOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/suppliers/{supplierId}][%d] getSupplierOK  %+v", 200, o.Payload)
}

func (o *GetSupplierOK) GetPayload() *models.Supplier {
	return o.Payload
}

func (o *GetSupplierOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Supplier)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSupplierBadRequest creates a GetSupplierBadRequest with default headers values
func NewGetSupplierBadRequest() *GetSupplierBadRequest {
	return &GetSupplierBadRequest{}
}

/*GetSupplierBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetSupplierBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetSupplierBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/suppliers/{supplierId}][%d] getSupplierBadRequest  %+v", 400, o.Payload)
}

func (o *GetSupplierBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetSupplierBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSupplierUnauthorized creates a GetSupplierUnauthorized with default headers values
func NewGetSupplierUnauthorized() *GetSupplierUnauthorized {
	return &GetSupplierUnauthorized{}
}

/*GetSupplierUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetSupplierUnauthorized struct {
}

func (o *GetSupplierUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/suppliers/{supplierId}][%d] getSupplierUnauthorized ", 401)
}

func (o *GetSupplierUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSupplierForbidden creates a GetSupplierForbidden with default headers values
func NewGetSupplierForbidden() *GetSupplierForbidden {
	return &GetSupplierForbidden{}
}

/*GetSupplierForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetSupplierForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetSupplierForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/suppliers/{supplierId}][%d] getSupplierForbidden  %+v", 403, o.Payload)
}

func (o *GetSupplierForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetSupplierForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSupplierNotFound creates a GetSupplierNotFound with default headers values
func NewGetSupplierNotFound() *GetSupplierNotFound {
	return &GetSupplierNotFound{}
}

/*GetSupplierNotFound handles this case with default header values.

Object not found
*/
type GetSupplierNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetSupplierNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/suppliers/{supplierId}][%d] getSupplierNotFound  %+v", 404, o.Payload)
}

func (o *GetSupplierNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetSupplierNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSupplierTooManyRequests creates a GetSupplierTooManyRequests with default headers values
func NewGetSupplierTooManyRequests() *GetSupplierTooManyRequests {
	return &GetSupplierTooManyRequests{}
}

/*GetSupplierTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetSupplierTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetSupplierTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/suppliers/{supplierId}][%d] getSupplierTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSupplierTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetSupplierTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
