// Code generated by go-swagger; DO NOT EDIT.

package suppliers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetSupplierParams creates a new GetSupplierParams object
// with the default values initialized.
func NewGetSupplierParams() *GetSupplierParams {
	var ()
	return &GetSupplierParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSupplierParamsWithTimeout creates a new GetSupplierParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSupplierParamsWithTimeout(timeout time.Duration) *GetSupplierParams {
	var ()
	return &GetSupplierParams{

		timeout: timeout,
	}
}

// NewGetSupplierParamsWithContext creates a new GetSupplierParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSupplierParamsWithContext(ctx context.Context) *GetSupplierParams {
	var ()
	return &GetSupplierParams{

		Context: ctx,
	}
}

// NewGetSupplierParamsWithHTTPClient creates a new GetSupplierParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSupplierParamsWithHTTPClient(client *http.Client) *GetSupplierParams {
	var ()
	return &GetSupplierParams{
		HTTPClient: client,
	}
}

/*GetSupplierParams contains all the parameters to send to the API endpoint
for the get supplier operation typically these are written to a http.Request
*/
type GetSupplierParams struct {

	/*KoronaAccountID
	  account id of the KORONA.cloud account

	*/
	KoronaAccountID string
	/*SupplierID
	  id of the related object (important: id should match the uuid-format)

	*/
	SupplierID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get supplier params
func (o *GetSupplierParams) WithTimeout(timeout time.Duration) *GetSupplierParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get supplier params
func (o *GetSupplierParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get supplier params
func (o *GetSupplierParams) WithContext(ctx context.Context) *GetSupplierParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get supplier params
func (o *GetSupplierParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get supplier params
func (o *GetSupplierParams) WithHTTPClient(client *http.Client) *GetSupplierParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get supplier params
func (o *GetSupplierParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithKoronaAccountID adds the koronaAccountID to the get supplier params
func (o *GetSupplierParams) WithKoronaAccountID(koronaAccountID string) *GetSupplierParams {
	o.SetKoronaAccountID(koronaAccountID)
	return o
}

// SetKoronaAccountID adds the koronaAccountId to the get supplier params
func (o *GetSupplierParams) SetKoronaAccountID(koronaAccountID string) {
	o.KoronaAccountID = koronaAccountID
}

// WithSupplierID adds the supplierID to the get supplier params
func (o *GetSupplierParams) WithSupplierID(supplierID string) *GetSupplierParams {
	o.SetSupplierID(supplierID)
	return o
}

// SetSupplierID adds the supplierId to the get supplier params
func (o *GetSupplierParams) SetSupplierID(supplierID string) {
	o.SupplierID = supplierID
}

// WriteToRequest writes these params to a swagger request
func (o *GetSupplierParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param koronaAccountId
	if err := r.SetPathParam("koronaAccountId", o.KoronaAccountID); err != nil {
		return err
	}

	// path param supplierId
	if err := r.SetPathParam("supplierId", o.SupplierID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
