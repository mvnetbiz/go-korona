// Code generated by go-swagger; DO NOT EDIT.

package suppliers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetSuppliersReader is a Reader for the GetSuppliers structure.
type GetSuppliersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSuppliersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSuppliersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetSuppliersNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSuppliersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSuppliersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSuppliersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSuppliersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSuppliersTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSuppliersOK creates a GetSuppliersOK with default headers values
func NewGetSuppliersOK() *GetSuppliersOK {
	return &GetSuppliersOK{}
}

/*GetSuppliersOK handles this case with default header values.

successful operation
*/
type GetSuppliersOK struct {
	Payload *models.ResultListSupplier
}

func (o *GetSuppliersOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/suppliers][%d] getSuppliersOK  %+v", 200, o.Payload)
}

func (o *GetSuppliersOK) GetPayload() *models.ResultListSupplier {
	return o.Payload
}

func (o *GetSuppliersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResultListSupplier)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSuppliersNoContent creates a GetSuppliersNoContent with default headers values
func NewGetSuppliersNoContent() *GetSuppliersNoContent {
	return &GetSuppliersNoContent{}
}

/*GetSuppliersNoContent handles this case with default header values.

Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object.
*/
type GetSuppliersNoContent struct {
}

func (o *GetSuppliersNoContent) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/suppliers][%d] getSuppliersNoContent ", 204)
}

func (o *GetSuppliersNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSuppliersBadRequest creates a GetSuppliersBadRequest with default headers values
func NewGetSuppliersBadRequest() *GetSuppliersBadRequest {
	return &GetSuppliersBadRequest{}
}

/*GetSuppliersBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetSuppliersBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetSuppliersBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/suppliers][%d] getSuppliersBadRequest  %+v", 400, o.Payload)
}

func (o *GetSuppliersBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetSuppliersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSuppliersUnauthorized creates a GetSuppliersUnauthorized with default headers values
func NewGetSuppliersUnauthorized() *GetSuppliersUnauthorized {
	return &GetSuppliersUnauthorized{}
}

/*GetSuppliersUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetSuppliersUnauthorized struct {
}

func (o *GetSuppliersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/suppliers][%d] getSuppliersUnauthorized ", 401)
}

func (o *GetSuppliersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSuppliersForbidden creates a GetSuppliersForbidden with default headers values
func NewGetSuppliersForbidden() *GetSuppliersForbidden {
	return &GetSuppliersForbidden{}
}

/*GetSuppliersForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetSuppliersForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetSuppliersForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/suppliers][%d] getSuppliersForbidden  %+v", 403, o.Payload)
}

func (o *GetSuppliersForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetSuppliersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSuppliersNotFound creates a GetSuppliersNotFound with default headers values
func NewGetSuppliersNotFound() *GetSuppliersNotFound {
	return &GetSuppliersNotFound{}
}

/*GetSuppliersNotFound handles this case with default header values.

Object not found
*/
type GetSuppliersNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetSuppliersNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/suppliers][%d] getSuppliersNotFound  %+v", 404, o.Payload)
}

func (o *GetSuppliersNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetSuppliersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSuppliersTooManyRequests creates a GetSuppliersTooManyRequests with default headers values
func NewGetSuppliersTooManyRequests() *GetSuppliersTooManyRequests {
	return &GetSuppliersTooManyRequests{}
}

/*GetSuppliersTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetSuppliersTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetSuppliersTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/suppliers][%d] getSuppliersTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSuppliersTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetSuppliersTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
