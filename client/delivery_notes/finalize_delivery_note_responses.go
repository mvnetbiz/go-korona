// Code generated by go-swagger; DO NOT EDIT.

package delivery_notes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// FinalizeDeliveryNoteReader is a Reader for the FinalizeDeliveryNote structure.
type FinalizeDeliveryNoteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FinalizeDeliveryNoteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewFinalizeDeliveryNoteNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFinalizeDeliveryNoteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewFinalizeDeliveryNoteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFinalizeDeliveryNoteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFinalizeDeliveryNoteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewFinalizeDeliveryNoteTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewFinalizeDeliveryNoteNoContent creates a FinalizeDeliveryNoteNoContent with default headers values
func NewFinalizeDeliveryNoteNoContent() *FinalizeDeliveryNoteNoContent {
	return &FinalizeDeliveryNoteNoContent{}
}

/*FinalizeDeliveryNoteNoContent handles this case with default header values.

Request successful, patch on single resource does not return any content
*/
type FinalizeDeliveryNoteNoContent struct {
}

func (o *FinalizeDeliveryNoteNoContent) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/deliveryNotes/{deliveryNoteId}/finalize][%d] finalizeDeliveryNoteNoContent ", 204)
}

func (o *FinalizeDeliveryNoteNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFinalizeDeliveryNoteBadRequest creates a FinalizeDeliveryNoteBadRequest with default headers values
func NewFinalizeDeliveryNoteBadRequest() *FinalizeDeliveryNoteBadRequest {
	return &FinalizeDeliveryNoteBadRequest{}
}

/*FinalizeDeliveryNoteBadRequest handles this case with default header values.

Malformed querystring or model
*/
type FinalizeDeliveryNoteBadRequest struct {
	Payload *models.BadRequestError
}

func (o *FinalizeDeliveryNoteBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/deliveryNotes/{deliveryNoteId}/finalize][%d] finalizeDeliveryNoteBadRequest  %+v", 400, o.Payload)
}

func (o *FinalizeDeliveryNoteBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *FinalizeDeliveryNoteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFinalizeDeliveryNoteUnauthorized creates a FinalizeDeliveryNoteUnauthorized with default headers values
func NewFinalizeDeliveryNoteUnauthorized() *FinalizeDeliveryNoteUnauthorized {
	return &FinalizeDeliveryNoteUnauthorized{}
}

/*FinalizeDeliveryNoteUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type FinalizeDeliveryNoteUnauthorized struct {
}

func (o *FinalizeDeliveryNoteUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/deliveryNotes/{deliveryNoteId}/finalize][%d] finalizeDeliveryNoteUnauthorized ", 401)
}

func (o *FinalizeDeliveryNoteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFinalizeDeliveryNoteForbidden creates a FinalizeDeliveryNoteForbidden with default headers values
func NewFinalizeDeliveryNoteForbidden() *FinalizeDeliveryNoteForbidden {
	return &FinalizeDeliveryNoteForbidden{}
}

/*FinalizeDeliveryNoteForbidden handles this case with default header values.

Requested action is not allowed
*/
type FinalizeDeliveryNoteForbidden struct {
	Payload *models.ForbiddenError
}

func (o *FinalizeDeliveryNoteForbidden) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/deliveryNotes/{deliveryNoteId}/finalize][%d] finalizeDeliveryNoteForbidden  %+v", 403, o.Payload)
}

func (o *FinalizeDeliveryNoteForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *FinalizeDeliveryNoteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFinalizeDeliveryNoteNotFound creates a FinalizeDeliveryNoteNotFound with default headers values
func NewFinalizeDeliveryNoteNotFound() *FinalizeDeliveryNoteNotFound {
	return &FinalizeDeliveryNoteNotFound{}
}

/*FinalizeDeliveryNoteNotFound handles this case with default header values.

Object not found
*/
type FinalizeDeliveryNoteNotFound struct {
	Payload *models.NotFoundError
}

func (o *FinalizeDeliveryNoteNotFound) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/deliveryNotes/{deliveryNoteId}/finalize][%d] finalizeDeliveryNoteNotFound  %+v", 404, o.Payload)
}

func (o *FinalizeDeliveryNoteNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *FinalizeDeliveryNoteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFinalizeDeliveryNoteTooManyRequests creates a FinalizeDeliveryNoteTooManyRequests with default headers values
func NewFinalizeDeliveryNoteTooManyRequests() *FinalizeDeliveryNoteTooManyRequests {
	return &FinalizeDeliveryNoteTooManyRequests{}
}

/*FinalizeDeliveryNoteTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type FinalizeDeliveryNoteTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *FinalizeDeliveryNoteTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/deliveryNotes/{deliveryNoteId}/finalize][%d] finalizeDeliveryNoteTooManyRequests  %+v", 429, o.Payload)
}

func (o *FinalizeDeliveryNoteTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *FinalizeDeliveryNoteTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
