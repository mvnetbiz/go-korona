// Code generated by go-swagger; DO NOT EDIT.

package delivery_notes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// NewAddDeliveryNotesParams creates a new AddDeliveryNotesParams object
// with the default values initialized.
func NewAddDeliveryNotesParams() *AddDeliveryNotesParams {
	var ()
	return &AddDeliveryNotesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddDeliveryNotesParamsWithTimeout creates a new AddDeliveryNotesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddDeliveryNotesParamsWithTimeout(timeout time.Duration) *AddDeliveryNotesParams {
	var ()
	return &AddDeliveryNotesParams{

		timeout: timeout,
	}
}

// NewAddDeliveryNotesParamsWithContext creates a new AddDeliveryNotesParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddDeliveryNotesParamsWithContext(ctx context.Context) *AddDeliveryNotesParams {
	var ()
	return &AddDeliveryNotesParams{

		Context: ctx,
	}
}

// NewAddDeliveryNotesParamsWithHTTPClient creates a new AddDeliveryNotesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddDeliveryNotesParamsWithHTTPClient(client *http.Client) *AddDeliveryNotesParams {
	var ()
	return &AddDeliveryNotesParams{
		HTTPClient: client,
	}
}

/*AddDeliveryNotesParams contains all the parameters to send to the API endpoint
for the add delivery notes operation typically these are written to a http.Request
*/
type AddDeliveryNotesParams struct {

	/*Body
	  data to add

	*/
	Body []*models.DeliveryNote
	/*KoronaAccountID
	  account id of the KORONA.cloud account

	*/
	KoronaAccountID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add delivery notes params
func (o *AddDeliveryNotesParams) WithTimeout(timeout time.Duration) *AddDeliveryNotesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add delivery notes params
func (o *AddDeliveryNotesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add delivery notes params
func (o *AddDeliveryNotesParams) WithContext(ctx context.Context) *AddDeliveryNotesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add delivery notes params
func (o *AddDeliveryNotesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add delivery notes params
func (o *AddDeliveryNotesParams) WithHTTPClient(client *http.Client) *AddDeliveryNotesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add delivery notes params
func (o *AddDeliveryNotesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the add delivery notes params
func (o *AddDeliveryNotesParams) WithBody(body []*models.DeliveryNote) *AddDeliveryNotesParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the add delivery notes params
func (o *AddDeliveryNotesParams) SetBody(body []*models.DeliveryNote) {
	o.Body = body
}

// WithKoronaAccountID adds the koronaAccountID to the add delivery notes params
func (o *AddDeliveryNotesParams) WithKoronaAccountID(koronaAccountID string) *AddDeliveryNotesParams {
	o.SetKoronaAccountID(koronaAccountID)
	return o
}

// SetKoronaAccountID adds the koronaAccountId to the add delivery notes params
func (o *AddDeliveryNotesParams) SetKoronaAccountID(koronaAccountID string) {
	o.KoronaAccountID = koronaAccountID
}

// WriteToRequest writes these params to a swagger request
func (o *AddDeliveryNotesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param koronaAccountId
	if err := r.SetPathParam("koronaAccountId", o.KoronaAccountID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
