// Code generated by go-swagger; DO NOT EDIT.

package delivery_notes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new delivery notes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for delivery notes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddDeliveryNotes(params *AddDeliveryNotesParams, authInfo runtime.ClientAuthInfoWriter) (*AddDeliveryNotesOK, error)

	BookDeliveryNote(params *BookDeliveryNoteParams, authInfo runtime.ClientAuthInfoWriter) (*BookDeliveryNoteNoContent, error)

	FinalizeDeliveryNote(params *FinalizeDeliveryNoteParams, authInfo runtime.ClientAuthInfoWriter) (*FinalizeDeliveryNoteNoContent, error)

	GetDeliveryNote(params *GetDeliveryNoteParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeliveryNoteOK, error)

	GetDeliveryNotes(params *GetDeliveryNotesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeliveryNotesOK, *GetDeliveryNotesNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddDeliveryNotes adds delivery notes
*/
func (a *Client) AddDeliveryNotes(params *AddDeliveryNotesParams, authInfo runtime.ClientAuthInfoWriter) (*AddDeliveryNotesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDeliveryNotesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDeliveryNotes",
		Method:             "POST",
		PathPattern:        "/accounts/{koronaAccountId}/deliveryNotes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDeliveryNotesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddDeliveryNotesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addDeliveryNotes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BookDeliveryNote books the single delivery note
*/
func (a *Client) BookDeliveryNote(params *BookDeliveryNoteParams, authInfo runtime.ClientAuthInfoWriter) (*BookDeliveryNoteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookDeliveryNoteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bookDeliveryNote",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/deliveryNotes/{deliveryNoteId}/book",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookDeliveryNoteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookDeliveryNoteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bookDeliveryNote: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FinalizeDeliveryNote finalizes the single delivery note
*/
func (a *Client) FinalizeDeliveryNote(params *FinalizeDeliveryNoteParams, authInfo runtime.ClientAuthInfoWriter) (*FinalizeDeliveryNoteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFinalizeDeliveryNoteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "finalizeDeliveryNote",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/deliveryNotes/{deliveryNoteId}/finalize",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FinalizeDeliveryNoteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FinalizeDeliveryNoteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for finalizeDeliveryNote: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeliveryNote returns a single delivery note
*/
func (a *Client) GetDeliveryNote(params *GetDeliveryNoteParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeliveryNoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeliveryNoteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeliveryNote",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/deliveryNotes/{deliveryNoteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeliveryNoteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeliveryNoteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeliveryNote: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeliveryNotes lists all delivery notes
*/
func (a *Client) GetDeliveryNotes(params *GetDeliveryNotesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeliveryNotesOK, *GetDeliveryNotesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeliveryNotesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeliveryNotes",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/deliveryNotes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeliveryNotesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetDeliveryNotesOK:
		return value, nil, nil
	case *GetDeliveryNotesNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delivery_notes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
