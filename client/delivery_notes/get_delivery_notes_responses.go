// Code generated by go-swagger; DO NOT EDIT.

package delivery_notes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetDeliveryNotesReader is a Reader for the GetDeliveryNotes structure.
type GetDeliveryNotesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeliveryNotesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeliveryNotesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetDeliveryNotesNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDeliveryNotesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetDeliveryNotesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDeliveryNotesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDeliveryNotesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetDeliveryNotesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDeliveryNotesOK creates a GetDeliveryNotesOK with default headers values
func NewGetDeliveryNotesOK() *GetDeliveryNotesOK {
	return &GetDeliveryNotesOK{}
}

/*GetDeliveryNotesOK handles this case with default header values.

successful operation
*/
type GetDeliveryNotesOK struct {
	Payload *models.ResultListDeliveryNote
}

func (o *GetDeliveryNotesOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/deliveryNotes][%d] getDeliveryNotesOK  %+v", 200, o.Payload)
}

func (o *GetDeliveryNotesOK) GetPayload() *models.ResultListDeliveryNote {
	return o.Payload
}

func (o *GetDeliveryNotesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResultListDeliveryNote)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeliveryNotesNoContent creates a GetDeliveryNotesNoContent with default headers values
func NewGetDeliveryNotesNoContent() *GetDeliveryNotesNoContent {
	return &GetDeliveryNotesNoContent{}
}

/*GetDeliveryNotesNoContent handles this case with default header values.

Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object.
*/
type GetDeliveryNotesNoContent struct {
}

func (o *GetDeliveryNotesNoContent) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/deliveryNotes][%d] getDeliveryNotesNoContent ", 204)
}

func (o *GetDeliveryNotesNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDeliveryNotesBadRequest creates a GetDeliveryNotesBadRequest with default headers values
func NewGetDeliveryNotesBadRequest() *GetDeliveryNotesBadRequest {
	return &GetDeliveryNotesBadRequest{}
}

/*GetDeliveryNotesBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetDeliveryNotesBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetDeliveryNotesBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/deliveryNotes][%d] getDeliveryNotesBadRequest  %+v", 400, o.Payload)
}

func (o *GetDeliveryNotesBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetDeliveryNotesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeliveryNotesUnauthorized creates a GetDeliveryNotesUnauthorized with default headers values
func NewGetDeliveryNotesUnauthorized() *GetDeliveryNotesUnauthorized {
	return &GetDeliveryNotesUnauthorized{}
}

/*GetDeliveryNotesUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetDeliveryNotesUnauthorized struct {
}

func (o *GetDeliveryNotesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/deliveryNotes][%d] getDeliveryNotesUnauthorized ", 401)
}

func (o *GetDeliveryNotesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDeliveryNotesForbidden creates a GetDeliveryNotesForbidden with default headers values
func NewGetDeliveryNotesForbidden() *GetDeliveryNotesForbidden {
	return &GetDeliveryNotesForbidden{}
}

/*GetDeliveryNotesForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetDeliveryNotesForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetDeliveryNotesForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/deliveryNotes][%d] getDeliveryNotesForbidden  %+v", 403, o.Payload)
}

func (o *GetDeliveryNotesForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetDeliveryNotesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeliveryNotesNotFound creates a GetDeliveryNotesNotFound with default headers values
func NewGetDeliveryNotesNotFound() *GetDeliveryNotesNotFound {
	return &GetDeliveryNotesNotFound{}
}

/*GetDeliveryNotesNotFound handles this case with default header values.

Object not found
*/
type GetDeliveryNotesNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetDeliveryNotesNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/deliveryNotes][%d] getDeliveryNotesNotFound  %+v", 404, o.Payload)
}

func (o *GetDeliveryNotesNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetDeliveryNotesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDeliveryNotesTooManyRequests creates a GetDeliveryNotesTooManyRequests with default headers values
func NewGetDeliveryNotesTooManyRequests() *GetDeliveryNotesTooManyRequests {
	return &GetDeliveryNotesTooManyRequests{}
}

/*GetDeliveryNotesTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetDeliveryNotesTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetDeliveryNotesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/deliveryNotes][%d] getDeliveryNotesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetDeliveryNotesTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetDeliveryNotesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
