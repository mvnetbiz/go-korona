// Code generated by go-swagger; DO NOT EDIT.

package sectors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetSectorsReader is a Reader for the GetSectors structure.
type GetSectorsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSectorsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSectorsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetSectorsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSectorsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSectorsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSectorsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSectorsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSectorsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSectorsOK creates a GetSectorsOK with default headers values
func NewGetSectorsOK() *GetSectorsOK {
	return &GetSectorsOK{}
}

/*GetSectorsOK handles this case with default header values.

successful operation
*/
type GetSectorsOK struct {
	Payload *models.ResultListSector
}

func (o *GetSectorsOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/sectors][%d] getSectorsOK  %+v", 200, o.Payload)
}

func (o *GetSectorsOK) GetPayload() *models.ResultListSector {
	return o.Payload
}

func (o *GetSectorsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResultListSector)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSectorsNoContent creates a GetSectorsNoContent with default headers values
func NewGetSectorsNoContent() *GetSectorsNoContent {
	return &GetSectorsNoContent{}
}

/*GetSectorsNoContent handles this case with default header values.

Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object.
*/
type GetSectorsNoContent struct {
}

func (o *GetSectorsNoContent) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/sectors][%d] getSectorsNoContent ", 204)
}

func (o *GetSectorsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSectorsBadRequest creates a GetSectorsBadRequest with default headers values
func NewGetSectorsBadRequest() *GetSectorsBadRequest {
	return &GetSectorsBadRequest{}
}

/*GetSectorsBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetSectorsBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetSectorsBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/sectors][%d] getSectorsBadRequest  %+v", 400, o.Payload)
}

func (o *GetSectorsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetSectorsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSectorsUnauthorized creates a GetSectorsUnauthorized with default headers values
func NewGetSectorsUnauthorized() *GetSectorsUnauthorized {
	return &GetSectorsUnauthorized{}
}

/*GetSectorsUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetSectorsUnauthorized struct {
}

func (o *GetSectorsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/sectors][%d] getSectorsUnauthorized ", 401)
}

func (o *GetSectorsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSectorsForbidden creates a GetSectorsForbidden with default headers values
func NewGetSectorsForbidden() *GetSectorsForbidden {
	return &GetSectorsForbidden{}
}

/*GetSectorsForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetSectorsForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetSectorsForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/sectors][%d] getSectorsForbidden  %+v", 403, o.Payload)
}

func (o *GetSectorsForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetSectorsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSectorsNotFound creates a GetSectorsNotFound with default headers values
func NewGetSectorsNotFound() *GetSectorsNotFound {
	return &GetSectorsNotFound{}
}

/*GetSectorsNotFound handles this case with default header values.

Object not found
*/
type GetSectorsNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetSectorsNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/sectors][%d] getSectorsNotFound  %+v", 404, o.Payload)
}

func (o *GetSectorsNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetSectorsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSectorsTooManyRequests creates a GetSectorsTooManyRequests with default headers values
func NewGetSectorsTooManyRequests() *GetSectorsTooManyRequests {
	return &GetSectorsTooManyRequests{}
}

/*GetSectorsTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetSectorsTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetSectorsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/sectors][%d] getSectorsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSectorsTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetSectorsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
