// Code generated by go-swagger; DO NOT EDIT.

package sectors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetSectorReader is a Reader for the GetSector structure.
type GetSectorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSectorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSectorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSectorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSectorUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSectorForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSectorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSectorTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSectorOK creates a GetSectorOK with default headers values
func NewGetSectorOK() *GetSectorOK {
	return &GetSectorOK{}
}

/*GetSectorOK handles this case with default header values.

successful operation
*/
type GetSectorOK struct {
	Payload *models.Sector
}

func (o *GetSectorOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/sectors/{sectorId}][%d] getSectorOK  %+v", 200, o.Payload)
}

func (o *GetSectorOK) GetPayload() *models.Sector {
	return o.Payload
}

func (o *GetSectorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Sector)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSectorBadRequest creates a GetSectorBadRequest with default headers values
func NewGetSectorBadRequest() *GetSectorBadRequest {
	return &GetSectorBadRequest{}
}

/*GetSectorBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetSectorBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetSectorBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/sectors/{sectorId}][%d] getSectorBadRequest  %+v", 400, o.Payload)
}

func (o *GetSectorBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetSectorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSectorUnauthorized creates a GetSectorUnauthorized with default headers values
func NewGetSectorUnauthorized() *GetSectorUnauthorized {
	return &GetSectorUnauthorized{}
}

/*GetSectorUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetSectorUnauthorized struct {
}

func (o *GetSectorUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/sectors/{sectorId}][%d] getSectorUnauthorized ", 401)
}

func (o *GetSectorUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSectorForbidden creates a GetSectorForbidden with default headers values
func NewGetSectorForbidden() *GetSectorForbidden {
	return &GetSectorForbidden{}
}

/*GetSectorForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetSectorForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetSectorForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/sectors/{sectorId}][%d] getSectorForbidden  %+v", 403, o.Payload)
}

func (o *GetSectorForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetSectorForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSectorNotFound creates a GetSectorNotFound with default headers values
func NewGetSectorNotFound() *GetSectorNotFound {
	return &GetSectorNotFound{}
}

/*GetSectorNotFound handles this case with default header values.

Object not found
*/
type GetSectorNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetSectorNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/sectors/{sectorId}][%d] getSectorNotFound  %+v", 404, o.Payload)
}

func (o *GetSectorNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetSectorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSectorTooManyRequests creates a GetSectorTooManyRequests with default headers values
func NewGetSectorTooManyRequests() *GetSectorTooManyRequests {
	return &GetSectorTooManyRequests{}
}

/*GetSectorTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetSectorTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetSectorTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/sectors/{sectorId}][%d] getSectorTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSectorTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetSectorTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
