// Code generated by go-swagger; DO NOT EDIT.

package sectors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// UpdateSectorsReader is a Reader for the UpdateSectors structure.
type UpdateSectorsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSectorsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSectorsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSectorsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateSectorsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateSectorsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateSectorsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateSectorsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateSectorsOK creates a UpdateSectorsOK with default headers values
func NewUpdateSectorsOK() *UpdateSectorsOK {
	return &UpdateSectorsOK{}
}

/*UpdateSectorsOK handles this case with default header values.

successful operation
*/
type UpdateSectorsOK struct {
	Payload []*models.AddOrUpdateResult
}

func (o *UpdateSectorsOK) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/sectors][%d] updateSectorsOK  %+v", 200, o.Payload)
}

func (o *UpdateSectorsOK) GetPayload() []*models.AddOrUpdateResult {
	return o.Payload
}

func (o *UpdateSectorsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSectorsBadRequest creates a UpdateSectorsBadRequest with default headers values
func NewUpdateSectorsBadRequest() *UpdateSectorsBadRequest {
	return &UpdateSectorsBadRequest{}
}

/*UpdateSectorsBadRequest handles this case with default header values.

Malformed querystring or model
*/
type UpdateSectorsBadRequest struct {
	Payload *models.BadRequestError
}

func (o *UpdateSectorsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/sectors][%d] updateSectorsBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateSectorsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UpdateSectorsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSectorsUnauthorized creates a UpdateSectorsUnauthorized with default headers values
func NewUpdateSectorsUnauthorized() *UpdateSectorsUnauthorized {
	return &UpdateSectorsUnauthorized{}
}

/*UpdateSectorsUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type UpdateSectorsUnauthorized struct {
}

func (o *UpdateSectorsUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/sectors][%d] updateSectorsUnauthorized ", 401)
}

func (o *UpdateSectorsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSectorsForbidden creates a UpdateSectorsForbidden with default headers values
func NewUpdateSectorsForbidden() *UpdateSectorsForbidden {
	return &UpdateSectorsForbidden{}
}

/*UpdateSectorsForbidden handles this case with default header values.

Requested action is not allowed
*/
type UpdateSectorsForbidden struct {
	Payload *models.ForbiddenError
}

func (o *UpdateSectorsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/sectors][%d] updateSectorsForbidden  %+v", 403, o.Payload)
}

func (o *UpdateSectorsForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *UpdateSectorsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSectorsNotFound creates a UpdateSectorsNotFound with default headers values
func NewUpdateSectorsNotFound() *UpdateSectorsNotFound {
	return &UpdateSectorsNotFound{}
}

/*UpdateSectorsNotFound handles this case with default header values.

Object not found
*/
type UpdateSectorsNotFound struct {
	Payload *models.NotFoundError
}

func (o *UpdateSectorsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/sectors][%d] updateSectorsNotFound  %+v", 404, o.Payload)
}

func (o *UpdateSectorsNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UpdateSectorsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSectorsTooManyRequests creates a UpdateSectorsTooManyRequests with default headers values
func NewUpdateSectorsTooManyRequests() *UpdateSectorsTooManyRequests {
	return &UpdateSectorsTooManyRequests{}
}

/*UpdateSectorsTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type UpdateSectorsTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *UpdateSectorsTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/sectors][%d] updateSectorsTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateSectorsTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *UpdateSectorsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
