// Code generated by go-swagger; DO NOT EDIT.

package customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// UpdateCustomersReader is a Reader for the UpdateCustomers structure.
type UpdateCustomersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCustomersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCustomersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCustomersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateCustomersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateCustomersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateCustomersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateCustomersTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateCustomersOK creates a UpdateCustomersOK with default headers values
func NewUpdateCustomersOK() *UpdateCustomersOK {
	return &UpdateCustomersOK{}
}

/*UpdateCustomersOK handles this case with default header values.

successful operation
*/
type UpdateCustomersOK struct {
	Payload []*models.AddOrUpdateResult
}

func (o *UpdateCustomersOK) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/customers][%d] updateCustomersOK  %+v", 200, o.Payload)
}

func (o *UpdateCustomersOK) GetPayload() []*models.AddOrUpdateResult {
	return o.Payload
}

func (o *UpdateCustomersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCustomersBadRequest creates a UpdateCustomersBadRequest with default headers values
func NewUpdateCustomersBadRequest() *UpdateCustomersBadRequest {
	return &UpdateCustomersBadRequest{}
}

/*UpdateCustomersBadRequest handles this case with default header values.

Malformed querystring or model
*/
type UpdateCustomersBadRequest struct {
	Payload *models.BadRequestError
}

func (o *UpdateCustomersBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/customers][%d] updateCustomersBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCustomersBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UpdateCustomersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCustomersUnauthorized creates a UpdateCustomersUnauthorized with default headers values
func NewUpdateCustomersUnauthorized() *UpdateCustomersUnauthorized {
	return &UpdateCustomersUnauthorized{}
}

/*UpdateCustomersUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type UpdateCustomersUnauthorized struct {
}

func (o *UpdateCustomersUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/customers][%d] updateCustomersUnauthorized ", 401)
}

func (o *UpdateCustomersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCustomersForbidden creates a UpdateCustomersForbidden with default headers values
func NewUpdateCustomersForbidden() *UpdateCustomersForbidden {
	return &UpdateCustomersForbidden{}
}

/*UpdateCustomersForbidden handles this case with default header values.

Requested action is not allowed
*/
type UpdateCustomersForbidden struct {
	Payload *models.ForbiddenError
}

func (o *UpdateCustomersForbidden) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/customers][%d] updateCustomersForbidden  %+v", 403, o.Payload)
}

func (o *UpdateCustomersForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *UpdateCustomersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCustomersNotFound creates a UpdateCustomersNotFound with default headers values
func NewUpdateCustomersNotFound() *UpdateCustomersNotFound {
	return &UpdateCustomersNotFound{}
}

/*UpdateCustomersNotFound handles this case with default header values.

Object not found
*/
type UpdateCustomersNotFound struct {
	Payload *models.NotFoundError
}

func (o *UpdateCustomersNotFound) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/customers][%d] updateCustomersNotFound  %+v", 404, o.Payload)
}

func (o *UpdateCustomersNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UpdateCustomersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCustomersTooManyRequests creates a UpdateCustomersTooManyRequests with default headers values
func NewUpdateCustomersTooManyRequests() *UpdateCustomersTooManyRequests {
	return &UpdateCustomersTooManyRequests{}
}

/*UpdateCustomersTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type UpdateCustomersTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *UpdateCustomersTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/customers][%d] updateCustomersTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateCustomersTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *UpdateCustomersTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
