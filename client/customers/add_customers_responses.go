// Code generated by go-swagger; DO NOT EDIT.

package customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// AddCustomersReader is a Reader for the AddCustomers structure.
type AddCustomersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddCustomersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddCustomersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddCustomersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddCustomersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddCustomersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddCustomersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAddCustomersTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddCustomersOK creates a AddCustomersOK with default headers values
func NewAddCustomersOK() *AddCustomersOK {
	return &AddCustomersOK{}
}

/*AddCustomersOK handles this case with default header values.

successful operation
*/
type AddCustomersOK struct {
	Payload []*models.AddOrUpdateResult
}

func (o *AddCustomersOK) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/customers][%d] addCustomersOK  %+v", 200, o.Payload)
}

func (o *AddCustomersOK) GetPayload() []*models.AddOrUpdateResult {
	return o.Payload
}

func (o *AddCustomersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCustomersBadRequest creates a AddCustomersBadRequest with default headers values
func NewAddCustomersBadRequest() *AddCustomersBadRequest {
	return &AddCustomersBadRequest{}
}

/*AddCustomersBadRequest handles this case with default header values.

Malformed querystring or model
*/
type AddCustomersBadRequest struct {
	Payload *models.BadRequestError
}

func (o *AddCustomersBadRequest) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/customers][%d] addCustomersBadRequest  %+v", 400, o.Payload)
}

func (o *AddCustomersBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *AddCustomersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCustomersUnauthorized creates a AddCustomersUnauthorized with default headers values
func NewAddCustomersUnauthorized() *AddCustomersUnauthorized {
	return &AddCustomersUnauthorized{}
}

/*AddCustomersUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type AddCustomersUnauthorized struct {
}

func (o *AddCustomersUnauthorized) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/customers][%d] addCustomersUnauthorized ", 401)
}

func (o *AddCustomersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddCustomersForbidden creates a AddCustomersForbidden with default headers values
func NewAddCustomersForbidden() *AddCustomersForbidden {
	return &AddCustomersForbidden{}
}

/*AddCustomersForbidden handles this case with default header values.

Requested action is not allowed
*/
type AddCustomersForbidden struct {
	Payload *models.ForbiddenError
}

func (o *AddCustomersForbidden) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/customers][%d] addCustomersForbidden  %+v", 403, o.Payload)
}

func (o *AddCustomersForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *AddCustomersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCustomersNotFound creates a AddCustomersNotFound with default headers values
func NewAddCustomersNotFound() *AddCustomersNotFound {
	return &AddCustomersNotFound{}
}

/*AddCustomersNotFound handles this case with default header values.

Object not found
*/
type AddCustomersNotFound struct {
	Payload *models.NotFoundError
}

func (o *AddCustomersNotFound) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/customers][%d] addCustomersNotFound  %+v", 404, o.Payload)
}

func (o *AddCustomersNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *AddCustomersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCustomersTooManyRequests creates a AddCustomersTooManyRequests with default headers values
func NewAddCustomersTooManyRequests() *AddCustomersTooManyRequests {
	return &AddCustomersTooManyRequests{}
}

/*AddCustomersTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type AddCustomersTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *AddCustomersTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/customers][%d] addCustomersTooManyRequests  %+v", 429, o.Payload)
}

func (o *AddCustomersTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *AddCustomersTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
