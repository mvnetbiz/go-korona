// Code generated by go-swagger; DO NOT EDIT.

package points_of_sale

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/mvnetbiz/go-korona/models"
)

// NewUpdatePointOfSaleParams creates a new UpdatePointOfSaleParams object
// with the default values initialized.
func NewUpdatePointOfSaleParams() *UpdatePointOfSaleParams {
	var ()
	return &UpdatePointOfSaleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdatePointOfSaleParamsWithTimeout creates a new UpdatePointOfSaleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdatePointOfSaleParamsWithTimeout(timeout time.Duration) *UpdatePointOfSaleParams {
	var ()
	return &UpdatePointOfSaleParams{

		timeout: timeout,
	}
}

// NewUpdatePointOfSaleParamsWithContext creates a new UpdatePointOfSaleParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdatePointOfSaleParamsWithContext(ctx context.Context) *UpdatePointOfSaleParams {
	var ()
	return &UpdatePointOfSaleParams{

		Context: ctx,
	}
}

// NewUpdatePointOfSaleParamsWithHTTPClient creates a new UpdatePointOfSaleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdatePointOfSaleParamsWithHTTPClient(client *http.Client) *UpdatePointOfSaleParams {
	var ()
	return &UpdatePointOfSaleParams{
		HTTPClient: client,
	}
}

/*UpdatePointOfSaleParams contains all the parameters to send to the API endpoint
for the update point of sale operation typically these are written to a http.Request
*/
type UpdatePointOfSaleParams struct {

	/*Body
	  the properties to update of the point of sale ('couplingId' only)

	*/
	Body *models.Pos
	/*CouplingID
	  the coupling-id of the device (required if already coupled)

	*/
	CouplingID *string
	/*Decouple
	  executes uncoupling, if set to true, device will be uncoupled if point of sale is already coupled

	*/
	Decouple *bool
	/*KoronaAccountID
	  account id of the KORONA.cloud account

	*/
	KoronaAccountID string
	/*PointOfSaleID
	  id of the related object (important: id should match the uuid-format)

	*/
	PointOfSaleID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update point of sale params
func (o *UpdatePointOfSaleParams) WithTimeout(timeout time.Duration) *UpdatePointOfSaleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update point of sale params
func (o *UpdatePointOfSaleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update point of sale params
func (o *UpdatePointOfSaleParams) WithContext(ctx context.Context) *UpdatePointOfSaleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update point of sale params
func (o *UpdatePointOfSaleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update point of sale params
func (o *UpdatePointOfSaleParams) WithHTTPClient(client *http.Client) *UpdatePointOfSaleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update point of sale params
func (o *UpdatePointOfSaleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update point of sale params
func (o *UpdatePointOfSaleParams) WithBody(body *models.Pos) *UpdatePointOfSaleParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update point of sale params
func (o *UpdatePointOfSaleParams) SetBody(body *models.Pos) {
	o.Body = body
}

// WithCouplingID adds the couplingID to the update point of sale params
func (o *UpdatePointOfSaleParams) WithCouplingID(couplingID *string) *UpdatePointOfSaleParams {
	o.SetCouplingID(couplingID)
	return o
}

// SetCouplingID adds the couplingId to the update point of sale params
func (o *UpdatePointOfSaleParams) SetCouplingID(couplingID *string) {
	o.CouplingID = couplingID
}

// WithDecouple adds the decouple to the update point of sale params
func (o *UpdatePointOfSaleParams) WithDecouple(decouple *bool) *UpdatePointOfSaleParams {
	o.SetDecouple(decouple)
	return o
}

// SetDecouple adds the decouple to the update point of sale params
func (o *UpdatePointOfSaleParams) SetDecouple(decouple *bool) {
	o.Decouple = decouple
}

// WithKoronaAccountID adds the koronaAccountID to the update point of sale params
func (o *UpdatePointOfSaleParams) WithKoronaAccountID(koronaAccountID string) *UpdatePointOfSaleParams {
	o.SetKoronaAccountID(koronaAccountID)
	return o
}

// SetKoronaAccountID adds the koronaAccountId to the update point of sale params
func (o *UpdatePointOfSaleParams) SetKoronaAccountID(koronaAccountID string) {
	o.KoronaAccountID = koronaAccountID
}

// WithPointOfSaleID adds the pointOfSaleID to the update point of sale params
func (o *UpdatePointOfSaleParams) WithPointOfSaleID(pointOfSaleID string) *UpdatePointOfSaleParams {
	o.SetPointOfSaleID(pointOfSaleID)
	return o
}

// SetPointOfSaleID adds the pointOfSaleId to the update point of sale params
func (o *UpdatePointOfSaleParams) SetPointOfSaleID(pointOfSaleID string) {
	o.PointOfSaleID = pointOfSaleID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdatePointOfSaleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.CouplingID != nil {

		// query param couplingId
		var qrCouplingID string
		if o.CouplingID != nil {
			qrCouplingID = *o.CouplingID
		}
		qCouplingID := qrCouplingID
		if qCouplingID != "" {
			if err := r.SetQueryParam("couplingId", qCouplingID); err != nil {
				return err
			}
		}

	}

	if o.Decouple != nil {

		// query param decouple
		var qrDecouple bool
		if o.Decouple != nil {
			qrDecouple = *o.Decouple
		}
		qDecouple := swag.FormatBool(qrDecouple)
		if qDecouple != "" {
			if err := r.SetQueryParam("decouple", qDecouple); err != nil {
				return err
			}
		}

	}

	// path param koronaAccountId
	if err := r.SetPathParam("koronaAccountId", o.KoronaAccountID); err != nil {
		return err
	}

	// path param pointOfSaleId
	if err := r.SetPathParam("pointOfSaleId", o.PointOfSaleID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
