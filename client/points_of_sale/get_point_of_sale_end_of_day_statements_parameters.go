// Code generated by go-swagger; DO NOT EDIT.

package points_of_sale

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPointOfSaleEndOfDayStatementsParams creates a new GetPointOfSaleEndOfDayStatementsParams object
// with the default values initialized.
func NewGetPointOfSaleEndOfDayStatementsParams() *GetPointOfSaleEndOfDayStatementsParams {
	var ()
	return &GetPointOfSaleEndOfDayStatementsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPointOfSaleEndOfDayStatementsParamsWithTimeout creates a new GetPointOfSaleEndOfDayStatementsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPointOfSaleEndOfDayStatementsParamsWithTimeout(timeout time.Duration) *GetPointOfSaleEndOfDayStatementsParams {
	var ()
	return &GetPointOfSaleEndOfDayStatementsParams{

		timeout: timeout,
	}
}

// NewGetPointOfSaleEndOfDayStatementsParamsWithContext creates a new GetPointOfSaleEndOfDayStatementsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPointOfSaleEndOfDayStatementsParamsWithContext(ctx context.Context) *GetPointOfSaleEndOfDayStatementsParams {
	var ()
	return &GetPointOfSaleEndOfDayStatementsParams{

		Context: ctx,
	}
}

// NewGetPointOfSaleEndOfDayStatementsParamsWithHTTPClient creates a new GetPointOfSaleEndOfDayStatementsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPointOfSaleEndOfDayStatementsParamsWithHTTPClient(client *http.Client) *GetPointOfSaleEndOfDayStatementsParams {
	var ()
	return &GetPointOfSaleEndOfDayStatementsParams{
		HTTPClient: client,
	}
}

/*GetPointOfSaleEndOfDayStatementsParams contains all the parameters to send to the API endpoint
for the get point of sale end of day statements operation typically these are written to a http.Request
*/
type GetPointOfSaleEndOfDayStatementsParams struct {

	/*CouplingID
	  the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).

	*/
	CouplingID *string
	/*KoronaAccountID
	  account id of the KORONA.cloud account

	*/
	KoronaAccountID string
	/*Page
	  number of the page to fetch

	*/
	Page *int32
	/*PointOfSaleID
	  id of the related object (important: id should match the uuid-format)

	*/
	PointOfSaleID string
	/*Revision
	  last revision number, objects with a greater revision than this will be returned

	*/
	Revision *int64
	/*Size
	  amount of objects to return per page

	*/
	Size *int32
	/*Sort
	  attribute to sort by (multiple separated by comma; max. 5)

	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get point of sale end of day statements params
func (o *GetPointOfSaleEndOfDayStatementsParams) WithTimeout(timeout time.Duration) *GetPointOfSaleEndOfDayStatementsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get point of sale end of day statements params
func (o *GetPointOfSaleEndOfDayStatementsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get point of sale end of day statements params
func (o *GetPointOfSaleEndOfDayStatementsParams) WithContext(ctx context.Context) *GetPointOfSaleEndOfDayStatementsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get point of sale end of day statements params
func (o *GetPointOfSaleEndOfDayStatementsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get point of sale end of day statements params
func (o *GetPointOfSaleEndOfDayStatementsParams) WithHTTPClient(client *http.Client) *GetPointOfSaleEndOfDayStatementsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get point of sale end of day statements params
func (o *GetPointOfSaleEndOfDayStatementsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCouplingID adds the couplingID to the get point of sale end of day statements params
func (o *GetPointOfSaleEndOfDayStatementsParams) WithCouplingID(couplingID *string) *GetPointOfSaleEndOfDayStatementsParams {
	o.SetCouplingID(couplingID)
	return o
}

// SetCouplingID adds the couplingId to the get point of sale end of day statements params
func (o *GetPointOfSaleEndOfDayStatementsParams) SetCouplingID(couplingID *string) {
	o.CouplingID = couplingID
}

// WithKoronaAccountID adds the koronaAccountID to the get point of sale end of day statements params
func (o *GetPointOfSaleEndOfDayStatementsParams) WithKoronaAccountID(koronaAccountID string) *GetPointOfSaleEndOfDayStatementsParams {
	o.SetKoronaAccountID(koronaAccountID)
	return o
}

// SetKoronaAccountID adds the koronaAccountId to the get point of sale end of day statements params
func (o *GetPointOfSaleEndOfDayStatementsParams) SetKoronaAccountID(koronaAccountID string) {
	o.KoronaAccountID = koronaAccountID
}

// WithPage adds the page to the get point of sale end of day statements params
func (o *GetPointOfSaleEndOfDayStatementsParams) WithPage(page *int32) *GetPointOfSaleEndOfDayStatementsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get point of sale end of day statements params
func (o *GetPointOfSaleEndOfDayStatementsParams) SetPage(page *int32) {
	o.Page = page
}

// WithPointOfSaleID adds the pointOfSaleID to the get point of sale end of day statements params
func (o *GetPointOfSaleEndOfDayStatementsParams) WithPointOfSaleID(pointOfSaleID string) *GetPointOfSaleEndOfDayStatementsParams {
	o.SetPointOfSaleID(pointOfSaleID)
	return o
}

// SetPointOfSaleID adds the pointOfSaleId to the get point of sale end of day statements params
func (o *GetPointOfSaleEndOfDayStatementsParams) SetPointOfSaleID(pointOfSaleID string) {
	o.PointOfSaleID = pointOfSaleID
}

// WithRevision adds the revision to the get point of sale end of day statements params
func (o *GetPointOfSaleEndOfDayStatementsParams) WithRevision(revision *int64) *GetPointOfSaleEndOfDayStatementsParams {
	o.SetRevision(revision)
	return o
}

// SetRevision adds the revision to the get point of sale end of day statements params
func (o *GetPointOfSaleEndOfDayStatementsParams) SetRevision(revision *int64) {
	o.Revision = revision
}

// WithSize adds the size to the get point of sale end of day statements params
func (o *GetPointOfSaleEndOfDayStatementsParams) WithSize(size *int32) *GetPointOfSaleEndOfDayStatementsParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the get point of sale end of day statements params
func (o *GetPointOfSaleEndOfDayStatementsParams) SetSize(size *int32) {
	o.Size = size
}

// WithSort adds the sort to the get point of sale end of day statements params
func (o *GetPointOfSaleEndOfDayStatementsParams) WithSort(sort *string) *GetPointOfSaleEndOfDayStatementsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get point of sale end of day statements params
func (o *GetPointOfSaleEndOfDayStatementsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *GetPointOfSaleEndOfDayStatementsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CouplingID != nil {

		// query param couplingId
		var qrCouplingID string
		if o.CouplingID != nil {
			qrCouplingID = *o.CouplingID
		}
		qCouplingID := qrCouplingID
		if qCouplingID != "" {
			if err := r.SetQueryParam("couplingId", qCouplingID); err != nil {
				return err
			}
		}

	}

	// path param koronaAccountId
	if err := r.SetPathParam("koronaAccountId", o.KoronaAccountID); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	// path param pointOfSaleId
	if err := r.SetPathParam("pointOfSaleId", o.PointOfSaleID); err != nil {
		return err
	}

	if o.Revision != nil {

		// query param revision
		var qrRevision int64
		if o.Revision != nil {
			qrRevision = *o.Revision
		}
		qRevision := swag.FormatInt64(qrRevision)
		if qRevision != "" {
			if err := r.SetQueryParam("revision", qRevision); err != nil {
				return err
			}
		}

	}

	if o.Size != nil {

		// query param size
		var qrSize int32
		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {
			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
