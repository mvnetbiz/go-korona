// Code generated by go-swagger; DO NOT EDIT.

package points_of_sale

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetPointOfSaleReceiptReader is a Reader for the GetPointOfSaleReceipt structure.
type GetPointOfSaleReceiptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPointOfSaleReceiptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPointOfSaleReceiptOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPointOfSaleReceiptBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetPointOfSaleReceiptUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPointOfSaleReceiptForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPointOfSaleReceiptNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetPointOfSaleReceiptTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPointOfSaleReceiptOK creates a GetPointOfSaleReceiptOK with default headers values
func NewGetPointOfSaleReceiptOK() *GetPointOfSaleReceiptOK {
	return &GetPointOfSaleReceiptOK{}
}

/*GetPointOfSaleReceiptOK handles this case with default header values.

successful operation
*/
type GetPointOfSaleReceiptOK struct {
	Payload *models.Receipt
}

func (o *GetPointOfSaleReceiptOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}/receipts/{receiptId}][%d] getPointOfSaleReceiptOK  %+v", 200, o.Payload)
}

func (o *GetPointOfSaleReceiptOK) GetPayload() *models.Receipt {
	return o.Payload
}

func (o *GetPointOfSaleReceiptOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Receipt)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPointOfSaleReceiptBadRequest creates a GetPointOfSaleReceiptBadRequest with default headers values
func NewGetPointOfSaleReceiptBadRequest() *GetPointOfSaleReceiptBadRequest {
	return &GetPointOfSaleReceiptBadRequest{}
}

/*GetPointOfSaleReceiptBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetPointOfSaleReceiptBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetPointOfSaleReceiptBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}/receipts/{receiptId}][%d] getPointOfSaleReceiptBadRequest  %+v", 400, o.Payload)
}

func (o *GetPointOfSaleReceiptBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetPointOfSaleReceiptBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPointOfSaleReceiptUnauthorized creates a GetPointOfSaleReceiptUnauthorized with default headers values
func NewGetPointOfSaleReceiptUnauthorized() *GetPointOfSaleReceiptUnauthorized {
	return &GetPointOfSaleReceiptUnauthorized{}
}

/*GetPointOfSaleReceiptUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetPointOfSaleReceiptUnauthorized struct {
}

func (o *GetPointOfSaleReceiptUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}/receipts/{receiptId}][%d] getPointOfSaleReceiptUnauthorized ", 401)
}

func (o *GetPointOfSaleReceiptUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPointOfSaleReceiptForbidden creates a GetPointOfSaleReceiptForbidden with default headers values
func NewGetPointOfSaleReceiptForbidden() *GetPointOfSaleReceiptForbidden {
	return &GetPointOfSaleReceiptForbidden{}
}

/*GetPointOfSaleReceiptForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetPointOfSaleReceiptForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetPointOfSaleReceiptForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}/receipts/{receiptId}][%d] getPointOfSaleReceiptForbidden  %+v", 403, o.Payload)
}

func (o *GetPointOfSaleReceiptForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetPointOfSaleReceiptForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPointOfSaleReceiptNotFound creates a GetPointOfSaleReceiptNotFound with default headers values
func NewGetPointOfSaleReceiptNotFound() *GetPointOfSaleReceiptNotFound {
	return &GetPointOfSaleReceiptNotFound{}
}

/*GetPointOfSaleReceiptNotFound handles this case with default header values.

Object not found
*/
type GetPointOfSaleReceiptNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetPointOfSaleReceiptNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}/receipts/{receiptId}][%d] getPointOfSaleReceiptNotFound  %+v", 404, o.Payload)
}

func (o *GetPointOfSaleReceiptNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetPointOfSaleReceiptNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPointOfSaleReceiptTooManyRequests creates a GetPointOfSaleReceiptTooManyRequests with default headers values
func NewGetPointOfSaleReceiptTooManyRequests() *GetPointOfSaleReceiptTooManyRequests {
	return &GetPointOfSaleReceiptTooManyRequests{}
}

/*GetPointOfSaleReceiptTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetPointOfSaleReceiptTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetPointOfSaleReceiptTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}/receipts/{receiptId}][%d] getPointOfSaleReceiptTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetPointOfSaleReceiptTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetPointOfSaleReceiptTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
