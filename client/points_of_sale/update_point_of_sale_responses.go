// Code generated by go-swagger; DO NOT EDIT.

package points_of_sale

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// UpdatePointOfSaleReader is a Reader for the UpdatePointOfSale structure.
type UpdatePointOfSaleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePointOfSaleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdatePointOfSaleNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdatePointOfSaleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdatePointOfSaleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdatePointOfSaleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdatePointOfSaleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdatePointOfSaleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdatePointOfSaleNoContent creates a UpdatePointOfSaleNoContent with default headers values
func NewUpdatePointOfSaleNoContent() *UpdatePointOfSaleNoContent {
	return &UpdatePointOfSaleNoContent{}
}

/*UpdatePointOfSaleNoContent handles this case with default header values.

Request successful, patch on single resource does not return any content
*/
type UpdatePointOfSaleNoContent struct {
}

func (o *UpdatePointOfSaleNoContent) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}][%d] updatePointOfSaleNoContent ", 204)
}

func (o *UpdatePointOfSaleNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePointOfSaleBadRequest creates a UpdatePointOfSaleBadRequest with default headers values
func NewUpdatePointOfSaleBadRequest() *UpdatePointOfSaleBadRequest {
	return &UpdatePointOfSaleBadRequest{}
}

/*UpdatePointOfSaleBadRequest handles this case with default header values.

Malformed querystring or model
*/
type UpdatePointOfSaleBadRequest struct {
	Payload *models.BadRequestError
}

func (o *UpdatePointOfSaleBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}][%d] updatePointOfSaleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdatePointOfSaleBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UpdatePointOfSaleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePointOfSaleUnauthorized creates a UpdatePointOfSaleUnauthorized with default headers values
func NewUpdatePointOfSaleUnauthorized() *UpdatePointOfSaleUnauthorized {
	return &UpdatePointOfSaleUnauthorized{}
}

/*UpdatePointOfSaleUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type UpdatePointOfSaleUnauthorized struct {
}

func (o *UpdatePointOfSaleUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}][%d] updatePointOfSaleUnauthorized ", 401)
}

func (o *UpdatePointOfSaleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePointOfSaleForbidden creates a UpdatePointOfSaleForbidden with default headers values
func NewUpdatePointOfSaleForbidden() *UpdatePointOfSaleForbidden {
	return &UpdatePointOfSaleForbidden{}
}

/*UpdatePointOfSaleForbidden handles this case with default header values.

Requested action is not allowed
*/
type UpdatePointOfSaleForbidden struct {
	Payload *models.ForbiddenError
}

func (o *UpdatePointOfSaleForbidden) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}][%d] updatePointOfSaleForbidden  %+v", 403, o.Payload)
}

func (o *UpdatePointOfSaleForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *UpdatePointOfSaleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePointOfSaleNotFound creates a UpdatePointOfSaleNotFound with default headers values
func NewUpdatePointOfSaleNotFound() *UpdatePointOfSaleNotFound {
	return &UpdatePointOfSaleNotFound{}
}

/*UpdatePointOfSaleNotFound handles this case with default header values.

Object not found
*/
type UpdatePointOfSaleNotFound struct {
	Payload *models.NotFoundError
}

func (o *UpdatePointOfSaleNotFound) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}][%d] updatePointOfSaleNotFound  %+v", 404, o.Payload)
}

func (o *UpdatePointOfSaleNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UpdatePointOfSaleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePointOfSaleTooManyRequests creates a UpdatePointOfSaleTooManyRequests with default headers values
func NewUpdatePointOfSaleTooManyRequests() *UpdatePointOfSaleTooManyRequests {
	return &UpdatePointOfSaleTooManyRequests{}
}

/*UpdatePointOfSaleTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type UpdatePointOfSaleTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *UpdatePointOfSaleTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}][%d] updatePointOfSaleTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdatePointOfSaleTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *UpdatePointOfSaleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
