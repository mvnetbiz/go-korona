// Code generated by go-swagger; DO NOT EDIT.

package points_of_sale

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// NewAddPointOfSaleReceiptsParams creates a new AddPointOfSaleReceiptsParams object
// with the default values initialized.
func NewAddPointOfSaleReceiptsParams() *AddPointOfSaleReceiptsParams {
	var ()
	return &AddPointOfSaleReceiptsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddPointOfSaleReceiptsParamsWithTimeout creates a new AddPointOfSaleReceiptsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddPointOfSaleReceiptsParamsWithTimeout(timeout time.Duration) *AddPointOfSaleReceiptsParams {
	var ()
	return &AddPointOfSaleReceiptsParams{

		timeout: timeout,
	}
}

// NewAddPointOfSaleReceiptsParamsWithContext creates a new AddPointOfSaleReceiptsParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddPointOfSaleReceiptsParamsWithContext(ctx context.Context) *AddPointOfSaleReceiptsParams {
	var ()
	return &AddPointOfSaleReceiptsParams{

		Context: ctx,
	}
}

// NewAddPointOfSaleReceiptsParamsWithHTTPClient creates a new AddPointOfSaleReceiptsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddPointOfSaleReceiptsParamsWithHTTPClient(client *http.Client) *AddPointOfSaleReceiptsParams {
	var ()
	return &AddPointOfSaleReceiptsParams{
		HTTPClient: client,
	}
}

/*AddPointOfSaleReceiptsParams contains all the parameters to send to the API endpoint
for the add point of sale receipts operation typically these are written to a http.Request
*/
type AddPointOfSaleReceiptsParams struct {

	/*Body
	  the receipts to add

	*/
	Body []*models.Receipt
	/*CouplingID
	  the coupling-id of the device

	*/
	CouplingID string
	/*KoronaAccountID
	  account id of the KORONA.cloud account

	*/
	KoronaAccountID string
	/*PointOfSaleID
	  id of the related object (important: id should match the uuid-format)

	*/
	PointOfSaleID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add point of sale receipts params
func (o *AddPointOfSaleReceiptsParams) WithTimeout(timeout time.Duration) *AddPointOfSaleReceiptsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add point of sale receipts params
func (o *AddPointOfSaleReceiptsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add point of sale receipts params
func (o *AddPointOfSaleReceiptsParams) WithContext(ctx context.Context) *AddPointOfSaleReceiptsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add point of sale receipts params
func (o *AddPointOfSaleReceiptsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add point of sale receipts params
func (o *AddPointOfSaleReceiptsParams) WithHTTPClient(client *http.Client) *AddPointOfSaleReceiptsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add point of sale receipts params
func (o *AddPointOfSaleReceiptsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the add point of sale receipts params
func (o *AddPointOfSaleReceiptsParams) WithBody(body []*models.Receipt) *AddPointOfSaleReceiptsParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the add point of sale receipts params
func (o *AddPointOfSaleReceiptsParams) SetBody(body []*models.Receipt) {
	o.Body = body
}

// WithCouplingID adds the couplingID to the add point of sale receipts params
func (o *AddPointOfSaleReceiptsParams) WithCouplingID(couplingID string) *AddPointOfSaleReceiptsParams {
	o.SetCouplingID(couplingID)
	return o
}

// SetCouplingID adds the couplingId to the add point of sale receipts params
func (o *AddPointOfSaleReceiptsParams) SetCouplingID(couplingID string) {
	o.CouplingID = couplingID
}

// WithKoronaAccountID adds the koronaAccountID to the add point of sale receipts params
func (o *AddPointOfSaleReceiptsParams) WithKoronaAccountID(koronaAccountID string) *AddPointOfSaleReceiptsParams {
	o.SetKoronaAccountID(koronaAccountID)
	return o
}

// SetKoronaAccountID adds the koronaAccountId to the add point of sale receipts params
func (o *AddPointOfSaleReceiptsParams) SetKoronaAccountID(koronaAccountID string) {
	o.KoronaAccountID = koronaAccountID
}

// WithPointOfSaleID adds the pointOfSaleID to the add point of sale receipts params
func (o *AddPointOfSaleReceiptsParams) WithPointOfSaleID(pointOfSaleID string) *AddPointOfSaleReceiptsParams {
	o.SetPointOfSaleID(pointOfSaleID)
	return o
}

// SetPointOfSaleID adds the pointOfSaleId to the add point of sale receipts params
func (o *AddPointOfSaleReceiptsParams) SetPointOfSaleID(pointOfSaleID string) {
	o.PointOfSaleID = pointOfSaleID
}

// WriteToRequest writes these params to a swagger request
func (o *AddPointOfSaleReceiptsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// query param couplingId
	qrCouplingID := o.CouplingID
	qCouplingID := qrCouplingID
	if qCouplingID != "" {
		if err := r.SetQueryParam("couplingId", qCouplingID); err != nil {
			return err
		}
	}

	// path param koronaAccountId
	if err := r.SetPathParam("koronaAccountId", o.KoronaAccountID); err != nil {
		return err
	}

	// path param pointOfSaleId
	if err := r.SetPathParam("pointOfSaleId", o.PointOfSaleID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
