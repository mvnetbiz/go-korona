// Code generated by go-swagger; DO NOT EDIT.

package inventories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// UpdateInventoryReader is a Reader for the UpdateInventory structure.
type UpdateInventoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateInventoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateInventoryNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateInventoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateInventoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateInventoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateInventoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateInventoryMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateInventoryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateInventoryNoContent creates a UpdateInventoryNoContent with default headers values
func NewUpdateInventoryNoContent() *UpdateInventoryNoContent {
	return &UpdateInventoryNoContent{}
}

/*UpdateInventoryNoContent handles this case with default header values.

Request successful, patch on single resource does not return any content
*/
type UpdateInventoryNoContent struct {
}

func (o *UpdateInventoryNoContent) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/inventories/{inventoryId}][%d] updateInventoryNoContent ", 204)
}

func (o *UpdateInventoryNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateInventoryBadRequest creates a UpdateInventoryBadRequest with default headers values
func NewUpdateInventoryBadRequest() *UpdateInventoryBadRequest {
	return &UpdateInventoryBadRequest{}
}

/*UpdateInventoryBadRequest handles this case with default header values.

Malformed querystring or model
*/
type UpdateInventoryBadRequest struct {
	Payload *models.BadRequestError
}

func (o *UpdateInventoryBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/inventories/{inventoryId}][%d] updateInventoryBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateInventoryBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UpdateInventoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInventoryUnauthorized creates a UpdateInventoryUnauthorized with default headers values
func NewUpdateInventoryUnauthorized() *UpdateInventoryUnauthorized {
	return &UpdateInventoryUnauthorized{}
}

/*UpdateInventoryUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type UpdateInventoryUnauthorized struct {
}

func (o *UpdateInventoryUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/inventories/{inventoryId}][%d] updateInventoryUnauthorized ", 401)
}

func (o *UpdateInventoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateInventoryForbidden creates a UpdateInventoryForbidden with default headers values
func NewUpdateInventoryForbidden() *UpdateInventoryForbidden {
	return &UpdateInventoryForbidden{}
}

/*UpdateInventoryForbidden handles this case with default header values.

Requested action is not allowed
*/
type UpdateInventoryForbidden struct {
	Payload *models.ForbiddenError
}

func (o *UpdateInventoryForbidden) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/inventories/{inventoryId}][%d] updateInventoryForbidden  %+v", 403, o.Payload)
}

func (o *UpdateInventoryForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *UpdateInventoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInventoryNotFound creates a UpdateInventoryNotFound with default headers values
func NewUpdateInventoryNotFound() *UpdateInventoryNotFound {
	return &UpdateInventoryNotFound{}
}

/*UpdateInventoryNotFound handles this case with default header values.

Object not found
*/
type UpdateInventoryNotFound struct {
	Payload *models.NotFoundError
}

func (o *UpdateInventoryNotFound) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/inventories/{inventoryId}][%d] updateInventoryNotFound  %+v", 404, o.Payload)
}

func (o *UpdateInventoryNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UpdateInventoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInventoryMethodNotAllowed creates a UpdateInventoryMethodNotAllowed with default headers values
func NewUpdateInventoryMethodNotAllowed() *UpdateInventoryMethodNotAllowed {
	return &UpdateInventoryMethodNotAllowed{}
}

/*UpdateInventoryMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type UpdateInventoryMethodNotAllowed struct {
	Payload *models.MethodNotAllowedError
}

func (o *UpdateInventoryMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/inventories/{inventoryId}][%d] updateInventoryMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *UpdateInventoryMethodNotAllowed) GetPayload() *models.MethodNotAllowedError {
	return o.Payload
}

func (o *UpdateInventoryMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MethodNotAllowedError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInventoryTooManyRequests creates a UpdateInventoryTooManyRequests with default headers values
func NewUpdateInventoryTooManyRequests() *UpdateInventoryTooManyRequests {
	return &UpdateInventoryTooManyRequests{}
}

/*UpdateInventoryTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type UpdateInventoryTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *UpdateInventoryTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/inventories/{inventoryId}][%d] updateInventoryTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateInventoryTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *UpdateInventoryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
