// Code generated by go-swagger; DO NOT EDIT.

package inventories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// UpdateInventoryInventoryListItemReader is a Reader for the UpdateInventoryInventoryListItem structure.
type UpdateInventoryInventoryListItemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateInventoryInventoryListItemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateInventoryInventoryListItemNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateInventoryInventoryListItemBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateInventoryInventoryListItemUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateInventoryInventoryListItemForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateInventoryInventoryListItemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateInventoryInventoryListItemMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateInventoryInventoryListItemTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateInventoryInventoryListItemNoContent creates a UpdateInventoryInventoryListItemNoContent with default headers values
func NewUpdateInventoryInventoryListItemNoContent() *UpdateInventoryInventoryListItemNoContent {
	return &UpdateInventoryInventoryListItemNoContent{}
}

/*UpdateInventoryInventoryListItemNoContent handles this case with default header values.

Request successful, patch on single resource does not return any content
*/
type UpdateInventoryInventoryListItemNoContent struct {
}

func (o *UpdateInventoryInventoryListItemNoContent) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items/{productId}][%d] updateInventoryInventoryListItemNoContent ", 204)
}

func (o *UpdateInventoryInventoryListItemNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateInventoryInventoryListItemBadRequest creates a UpdateInventoryInventoryListItemBadRequest with default headers values
func NewUpdateInventoryInventoryListItemBadRequest() *UpdateInventoryInventoryListItemBadRequest {
	return &UpdateInventoryInventoryListItemBadRequest{}
}

/*UpdateInventoryInventoryListItemBadRequest handles this case with default header values.

Malformed querystring or model
*/
type UpdateInventoryInventoryListItemBadRequest struct {
	Payload *models.BadRequestError
}

func (o *UpdateInventoryInventoryListItemBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items/{productId}][%d] updateInventoryInventoryListItemBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateInventoryInventoryListItemBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UpdateInventoryInventoryListItemBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInventoryInventoryListItemUnauthorized creates a UpdateInventoryInventoryListItemUnauthorized with default headers values
func NewUpdateInventoryInventoryListItemUnauthorized() *UpdateInventoryInventoryListItemUnauthorized {
	return &UpdateInventoryInventoryListItemUnauthorized{}
}

/*UpdateInventoryInventoryListItemUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type UpdateInventoryInventoryListItemUnauthorized struct {
}

func (o *UpdateInventoryInventoryListItemUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items/{productId}][%d] updateInventoryInventoryListItemUnauthorized ", 401)
}

func (o *UpdateInventoryInventoryListItemUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateInventoryInventoryListItemForbidden creates a UpdateInventoryInventoryListItemForbidden with default headers values
func NewUpdateInventoryInventoryListItemForbidden() *UpdateInventoryInventoryListItemForbidden {
	return &UpdateInventoryInventoryListItemForbidden{}
}

/*UpdateInventoryInventoryListItemForbidden handles this case with default header values.

Requested action is not allowed
*/
type UpdateInventoryInventoryListItemForbidden struct {
	Payload *models.ForbiddenError
}

func (o *UpdateInventoryInventoryListItemForbidden) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items/{productId}][%d] updateInventoryInventoryListItemForbidden  %+v", 403, o.Payload)
}

func (o *UpdateInventoryInventoryListItemForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *UpdateInventoryInventoryListItemForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInventoryInventoryListItemNotFound creates a UpdateInventoryInventoryListItemNotFound with default headers values
func NewUpdateInventoryInventoryListItemNotFound() *UpdateInventoryInventoryListItemNotFound {
	return &UpdateInventoryInventoryListItemNotFound{}
}

/*UpdateInventoryInventoryListItemNotFound handles this case with default header values.

Object not found
*/
type UpdateInventoryInventoryListItemNotFound struct {
	Payload *models.NotFoundError
}

func (o *UpdateInventoryInventoryListItemNotFound) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items/{productId}][%d] updateInventoryInventoryListItemNotFound  %+v", 404, o.Payload)
}

func (o *UpdateInventoryInventoryListItemNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UpdateInventoryInventoryListItemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInventoryInventoryListItemMethodNotAllowed creates a UpdateInventoryInventoryListItemMethodNotAllowed with default headers values
func NewUpdateInventoryInventoryListItemMethodNotAllowed() *UpdateInventoryInventoryListItemMethodNotAllowed {
	return &UpdateInventoryInventoryListItemMethodNotAllowed{}
}

/*UpdateInventoryInventoryListItemMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type UpdateInventoryInventoryListItemMethodNotAllowed struct {
	Payload *models.MethodNotAllowedError
}

func (o *UpdateInventoryInventoryListItemMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items/{productId}][%d] updateInventoryInventoryListItemMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *UpdateInventoryInventoryListItemMethodNotAllowed) GetPayload() *models.MethodNotAllowedError {
	return o.Payload
}

func (o *UpdateInventoryInventoryListItemMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MethodNotAllowedError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInventoryInventoryListItemTooManyRequests creates a UpdateInventoryInventoryListItemTooManyRequests with default headers values
func NewUpdateInventoryInventoryListItemTooManyRequests() *UpdateInventoryInventoryListItemTooManyRequests {
	return &UpdateInventoryInventoryListItemTooManyRequests{}
}

/*UpdateInventoryInventoryListItemTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type UpdateInventoryInventoryListItemTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *UpdateInventoryInventoryListItemTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items/{productId}][%d] updateInventoryInventoryListItemTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateInventoryInventoryListItemTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *UpdateInventoryInventoryListItemTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
