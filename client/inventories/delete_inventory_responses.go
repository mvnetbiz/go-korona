// Code generated by go-swagger; DO NOT EDIT.

package inventories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// DeleteInventoryReader is a Reader for the DeleteInventory structure.
type DeleteInventoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteInventoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteInventoryNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteInventoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteInventoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteInventoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteInventoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDeleteInventoryMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteInventoryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteInventoryNoContent creates a DeleteInventoryNoContent with default headers values
func NewDeleteInventoryNoContent() *DeleteInventoryNoContent {
	return &DeleteInventoryNoContent{}
}

/*DeleteInventoryNoContent handles this case with default header values.

Request successful, delete on single resource does not return any content
*/
type DeleteInventoryNoContent struct {
}

func (o *DeleteInventoryNoContent) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/inventories/{inventoryId}][%d] deleteInventoryNoContent ", 204)
}

func (o *DeleteInventoryNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteInventoryBadRequest creates a DeleteInventoryBadRequest with default headers values
func NewDeleteInventoryBadRequest() *DeleteInventoryBadRequest {
	return &DeleteInventoryBadRequest{}
}

/*DeleteInventoryBadRequest handles this case with default header values.

Malformed querystring or model
*/
type DeleteInventoryBadRequest struct {
	Payload *models.BadRequestError
}

func (o *DeleteInventoryBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/inventories/{inventoryId}][%d] deleteInventoryBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteInventoryBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *DeleteInventoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInventoryUnauthorized creates a DeleteInventoryUnauthorized with default headers values
func NewDeleteInventoryUnauthorized() *DeleteInventoryUnauthorized {
	return &DeleteInventoryUnauthorized{}
}

/*DeleteInventoryUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type DeleteInventoryUnauthorized struct {
}

func (o *DeleteInventoryUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/inventories/{inventoryId}][%d] deleteInventoryUnauthorized ", 401)
}

func (o *DeleteInventoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteInventoryForbidden creates a DeleteInventoryForbidden with default headers values
func NewDeleteInventoryForbidden() *DeleteInventoryForbidden {
	return &DeleteInventoryForbidden{}
}

/*DeleteInventoryForbidden handles this case with default header values.

Requested action is not allowed
*/
type DeleteInventoryForbidden struct {
	Payload *models.ForbiddenError
}

func (o *DeleteInventoryForbidden) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/inventories/{inventoryId}][%d] deleteInventoryForbidden  %+v", 403, o.Payload)
}

func (o *DeleteInventoryForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *DeleteInventoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInventoryNotFound creates a DeleteInventoryNotFound with default headers values
func NewDeleteInventoryNotFound() *DeleteInventoryNotFound {
	return &DeleteInventoryNotFound{}
}

/*DeleteInventoryNotFound handles this case with default header values.

Object not found
*/
type DeleteInventoryNotFound struct {
	Payload *models.NotFoundError
}

func (o *DeleteInventoryNotFound) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/inventories/{inventoryId}][%d] deleteInventoryNotFound  %+v", 404, o.Payload)
}

func (o *DeleteInventoryNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *DeleteInventoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInventoryMethodNotAllowed creates a DeleteInventoryMethodNotAllowed with default headers values
func NewDeleteInventoryMethodNotAllowed() *DeleteInventoryMethodNotAllowed {
	return &DeleteInventoryMethodNotAllowed{}
}

/*DeleteInventoryMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type DeleteInventoryMethodNotAllowed struct {
	Payload *models.MethodNotAllowedError
}

func (o *DeleteInventoryMethodNotAllowed) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/inventories/{inventoryId}][%d] deleteInventoryMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *DeleteInventoryMethodNotAllowed) GetPayload() *models.MethodNotAllowedError {
	return o.Payload
}

func (o *DeleteInventoryMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MethodNotAllowedError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInventoryTooManyRequests creates a DeleteInventoryTooManyRequests with default headers values
func NewDeleteInventoryTooManyRequests() *DeleteInventoryTooManyRequests {
	return &DeleteInventoryTooManyRequests{}
}

/*DeleteInventoryTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type DeleteInventoryTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *DeleteInventoryTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/inventories/{inventoryId}][%d] deleteInventoryTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteInventoryTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *DeleteInventoryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
