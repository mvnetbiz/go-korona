// Code generated by go-swagger; DO NOT EDIT.

package inventories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// UpdateInventoryInventoryListReader is a Reader for the UpdateInventoryInventoryList structure.
type UpdateInventoryInventoryListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateInventoryInventoryListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateInventoryInventoryListNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateInventoryInventoryListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateInventoryInventoryListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateInventoryInventoryListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateInventoryInventoryListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateInventoryInventoryListMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateInventoryInventoryListTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateInventoryInventoryListNoContent creates a UpdateInventoryInventoryListNoContent with default headers values
func NewUpdateInventoryInventoryListNoContent() *UpdateInventoryInventoryListNoContent {
	return &UpdateInventoryInventoryListNoContent{}
}

/*UpdateInventoryInventoryListNoContent handles this case with default header values.

Request successful, patch on single resource does not return any content
*/
type UpdateInventoryInventoryListNoContent struct {
}

func (o *UpdateInventoryInventoryListNoContent) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}][%d] updateInventoryInventoryListNoContent ", 204)
}

func (o *UpdateInventoryInventoryListNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateInventoryInventoryListBadRequest creates a UpdateInventoryInventoryListBadRequest with default headers values
func NewUpdateInventoryInventoryListBadRequest() *UpdateInventoryInventoryListBadRequest {
	return &UpdateInventoryInventoryListBadRequest{}
}

/*UpdateInventoryInventoryListBadRequest handles this case with default header values.

Malformed querystring or model
*/
type UpdateInventoryInventoryListBadRequest struct {
	Payload *models.BadRequestError
}

func (o *UpdateInventoryInventoryListBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}][%d] updateInventoryInventoryListBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateInventoryInventoryListBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UpdateInventoryInventoryListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInventoryInventoryListUnauthorized creates a UpdateInventoryInventoryListUnauthorized with default headers values
func NewUpdateInventoryInventoryListUnauthorized() *UpdateInventoryInventoryListUnauthorized {
	return &UpdateInventoryInventoryListUnauthorized{}
}

/*UpdateInventoryInventoryListUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type UpdateInventoryInventoryListUnauthorized struct {
}

func (o *UpdateInventoryInventoryListUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}][%d] updateInventoryInventoryListUnauthorized ", 401)
}

func (o *UpdateInventoryInventoryListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateInventoryInventoryListForbidden creates a UpdateInventoryInventoryListForbidden with default headers values
func NewUpdateInventoryInventoryListForbidden() *UpdateInventoryInventoryListForbidden {
	return &UpdateInventoryInventoryListForbidden{}
}

/*UpdateInventoryInventoryListForbidden handles this case with default header values.

Requested action is not allowed
*/
type UpdateInventoryInventoryListForbidden struct {
	Payload *models.ForbiddenError
}

func (o *UpdateInventoryInventoryListForbidden) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}][%d] updateInventoryInventoryListForbidden  %+v", 403, o.Payload)
}

func (o *UpdateInventoryInventoryListForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *UpdateInventoryInventoryListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInventoryInventoryListNotFound creates a UpdateInventoryInventoryListNotFound with default headers values
func NewUpdateInventoryInventoryListNotFound() *UpdateInventoryInventoryListNotFound {
	return &UpdateInventoryInventoryListNotFound{}
}

/*UpdateInventoryInventoryListNotFound handles this case with default header values.

Object not found
*/
type UpdateInventoryInventoryListNotFound struct {
	Payload *models.NotFoundError
}

func (o *UpdateInventoryInventoryListNotFound) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}][%d] updateInventoryInventoryListNotFound  %+v", 404, o.Payload)
}

func (o *UpdateInventoryInventoryListNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UpdateInventoryInventoryListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInventoryInventoryListMethodNotAllowed creates a UpdateInventoryInventoryListMethodNotAllowed with default headers values
func NewUpdateInventoryInventoryListMethodNotAllowed() *UpdateInventoryInventoryListMethodNotAllowed {
	return &UpdateInventoryInventoryListMethodNotAllowed{}
}

/*UpdateInventoryInventoryListMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type UpdateInventoryInventoryListMethodNotAllowed struct {
	Payload *models.MethodNotAllowedError
}

func (o *UpdateInventoryInventoryListMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}][%d] updateInventoryInventoryListMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *UpdateInventoryInventoryListMethodNotAllowed) GetPayload() *models.MethodNotAllowedError {
	return o.Payload
}

func (o *UpdateInventoryInventoryListMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MethodNotAllowedError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInventoryInventoryListTooManyRequests creates a UpdateInventoryInventoryListTooManyRequests with default headers values
func NewUpdateInventoryInventoryListTooManyRequests() *UpdateInventoryInventoryListTooManyRequests {
	return &UpdateInventoryInventoryListTooManyRequests{}
}

/*UpdateInventoryInventoryListTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type UpdateInventoryInventoryListTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *UpdateInventoryInventoryListTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}][%d] updateInventoryInventoryListTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateInventoryInventoryListTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *UpdateInventoryInventoryListTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
