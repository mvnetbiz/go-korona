// Code generated by go-swagger; DO NOT EDIT.

package inventories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// AddInventoryInventoryListItemsReader is a Reader for the AddInventoryInventoryListItems structure.
type AddInventoryInventoryListItemsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddInventoryInventoryListItemsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddInventoryInventoryListItemsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddInventoryInventoryListItemsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddInventoryInventoryListItemsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddInventoryInventoryListItemsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddInventoryInventoryListItemsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewAddInventoryInventoryListItemsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAddInventoryInventoryListItemsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddInventoryInventoryListItemsOK creates a AddInventoryInventoryListItemsOK with default headers values
func NewAddInventoryInventoryListItemsOK() *AddInventoryInventoryListItemsOK {
	return &AddInventoryInventoryListItemsOK{}
}

/*AddInventoryInventoryListItemsOK handles this case with default header values.

successful operation
*/
type AddInventoryInventoryListItemsOK struct {
	Payload []*models.AddOrUpdateResult
}

func (o *AddInventoryInventoryListItemsOK) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items][%d] addInventoryInventoryListItemsOK  %+v", 200, o.Payload)
}

func (o *AddInventoryInventoryListItemsOK) GetPayload() []*models.AddOrUpdateResult {
	return o.Payload
}

func (o *AddInventoryInventoryListItemsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddInventoryInventoryListItemsBadRequest creates a AddInventoryInventoryListItemsBadRequest with default headers values
func NewAddInventoryInventoryListItemsBadRequest() *AddInventoryInventoryListItemsBadRequest {
	return &AddInventoryInventoryListItemsBadRequest{}
}

/*AddInventoryInventoryListItemsBadRequest handles this case with default header values.

Malformed querystring or model
*/
type AddInventoryInventoryListItemsBadRequest struct {
	Payload *models.BadRequestError
}

func (o *AddInventoryInventoryListItemsBadRequest) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items][%d] addInventoryInventoryListItemsBadRequest  %+v", 400, o.Payload)
}

func (o *AddInventoryInventoryListItemsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *AddInventoryInventoryListItemsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddInventoryInventoryListItemsUnauthorized creates a AddInventoryInventoryListItemsUnauthorized with default headers values
func NewAddInventoryInventoryListItemsUnauthorized() *AddInventoryInventoryListItemsUnauthorized {
	return &AddInventoryInventoryListItemsUnauthorized{}
}

/*AddInventoryInventoryListItemsUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type AddInventoryInventoryListItemsUnauthorized struct {
}

func (o *AddInventoryInventoryListItemsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items][%d] addInventoryInventoryListItemsUnauthorized ", 401)
}

func (o *AddInventoryInventoryListItemsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddInventoryInventoryListItemsForbidden creates a AddInventoryInventoryListItemsForbidden with default headers values
func NewAddInventoryInventoryListItemsForbidden() *AddInventoryInventoryListItemsForbidden {
	return &AddInventoryInventoryListItemsForbidden{}
}

/*AddInventoryInventoryListItemsForbidden handles this case with default header values.

Requested action is not allowed
*/
type AddInventoryInventoryListItemsForbidden struct {
	Payload *models.ForbiddenError
}

func (o *AddInventoryInventoryListItemsForbidden) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items][%d] addInventoryInventoryListItemsForbidden  %+v", 403, o.Payload)
}

func (o *AddInventoryInventoryListItemsForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *AddInventoryInventoryListItemsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddInventoryInventoryListItemsNotFound creates a AddInventoryInventoryListItemsNotFound with default headers values
func NewAddInventoryInventoryListItemsNotFound() *AddInventoryInventoryListItemsNotFound {
	return &AddInventoryInventoryListItemsNotFound{}
}

/*AddInventoryInventoryListItemsNotFound handles this case with default header values.

Object not found
*/
type AddInventoryInventoryListItemsNotFound struct {
	Payload *models.NotFoundError
}

func (o *AddInventoryInventoryListItemsNotFound) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items][%d] addInventoryInventoryListItemsNotFound  %+v", 404, o.Payload)
}

func (o *AddInventoryInventoryListItemsNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *AddInventoryInventoryListItemsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddInventoryInventoryListItemsMethodNotAllowed creates a AddInventoryInventoryListItemsMethodNotAllowed with default headers values
func NewAddInventoryInventoryListItemsMethodNotAllowed() *AddInventoryInventoryListItemsMethodNotAllowed {
	return &AddInventoryInventoryListItemsMethodNotAllowed{}
}

/*AddInventoryInventoryListItemsMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type AddInventoryInventoryListItemsMethodNotAllowed struct {
	Payload *models.MethodNotAllowedError
}

func (o *AddInventoryInventoryListItemsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items][%d] addInventoryInventoryListItemsMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *AddInventoryInventoryListItemsMethodNotAllowed) GetPayload() *models.MethodNotAllowedError {
	return o.Payload
}

func (o *AddInventoryInventoryListItemsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MethodNotAllowedError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddInventoryInventoryListItemsTooManyRequests creates a AddInventoryInventoryListItemsTooManyRequests with default headers values
func NewAddInventoryInventoryListItemsTooManyRequests() *AddInventoryInventoryListItemsTooManyRequests {
	return &AddInventoryInventoryListItemsTooManyRequests{}
}

/*AddInventoryInventoryListItemsTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type AddInventoryInventoryListItemsTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *AddInventoryInventoryListItemsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items][%d] addInventoryInventoryListItemsTooManyRequests  %+v", 429, o.Payload)
}

func (o *AddInventoryInventoryListItemsTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *AddInventoryInventoryListItemsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
