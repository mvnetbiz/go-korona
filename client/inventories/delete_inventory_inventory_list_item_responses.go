// Code generated by go-swagger; DO NOT EDIT.

package inventories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// DeleteInventoryInventoryListItemReader is a Reader for the DeleteInventoryInventoryListItem structure.
type DeleteInventoryInventoryListItemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteInventoryInventoryListItemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteInventoryInventoryListItemNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteInventoryInventoryListItemBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteInventoryInventoryListItemUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteInventoryInventoryListItemForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteInventoryInventoryListItemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDeleteInventoryInventoryListItemMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteInventoryInventoryListItemTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteInventoryInventoryListItemNoContent creates a DeleteInventoryInventoryListItemNoContent with default headers values
func NewDeleteInventoryInventoryListItemNoContent() *DeleteInventoryInventoryListItemNoContent {
	return &DeleteInventoryInventoryListItemNoContent{}
}

/*DeleteInventoryInventoryListItemNoContent handles this case with default header values.

Request successful, delete on single resource does not return any content
*/
type DeleteInventoryInventoryListItemNoContent struct {
}

func (o *DeleteInventoryInventoryListItemNoContent) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items/{productId}][%d] deleteInventoryInventoryListItemNoContent ", 204)
}

func (o *DeleteInventoryInventoryListItemNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteInventoryInventoryListItemBadRequest creates a DeleteInventoryInventoryListItemBadRequest with default headers values
func NewDeleteInventoryInventoryListItemBadRequest() *DeleteInventoryInventoryListItemBadRequest {
	return &DeleteInventoryInventoryListItemBadRequest{}
}

/*DeleteInventoryInventoryListItemBadRequest handles this case with default header values.

Malformed querystring or model
*/
type DeleteInventoryInventoryListItemBadRequest struct {
	Payload *models.BadRequestError
}

func (o *DeleteInventoryInventoryListItemBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items/{productId}][%d] deleteInventoryInventoryListItemBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteInventoryInventoryListItemBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *DeleteInventoryInventoryListItemBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInventoryInventoryListItemUnauthorized creates a DeleteInventoryInventoryListItemUnauthorized with default headers values
func NewDeleteInventoryInventoryListItemUnauthorized() *DeleteInventoryInventoryListItemUnauthorized {
	return &DeleteInventoryInventoryListItemUnauthorized{}
}

/*DeleteInventoryInventoryListItemUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type DeleteInventoryInventoryListItemUnauthorized struct {
}

func (o *DeleteInventoryInventoryListItemUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items/{productId}][%d] deleteInventoryInventoryListItemUnauthorized ", 401)
}

func (o *DeleteInventoryInventoryListItemUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteInventoryInventoryListItemForbidden creates a DeleteInventoryInventoryListItemForbidden with default headers values
func NewDeleteInventoryInventoryListItemForbidden() *DeleteInventoryInventoryListItemForbidden {
	return &DeleteInventoryInventoryListItemForbidden{}
}

/*DeleteInventoryInventoryListItemForbidden handles this case with default header values.

Requested action is not allowed
*/
type DeleteInventoryInventoryListItemForbidden struct {
	Payload *models.ForbiddenError
}

func (o *DeleteInventoryInventoryListItemForbidden) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items/{productId}][%d] deleteInventoryInventoryListItemForbidden  %+v", 403, o.Payload)
}

func (o *DeleteInventoryInventoryListItemForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *DeleteInventoryInventoryListItemForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInventoryInventoryListItemNotFound creates a DeleteInventoryInventoryListItemNotFound with default headers values
func NewDeleteInventoryInventoryListItemNotFound() *DeleteInventoryInventoryListItemNotFound {
	return &DeleteInventoryInventoryListItemNotFound{}
}

/*DeleteInventoryInventoryListItemNotFound handles this case with default header values.

Object not found
*/
type DeleteInventoryInventoryListItemNotFound struct {
	Payload *models.NotFoundError
}

func (o *DeleteInventoryInventoryListItemNotFound) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items/{productId}][%d] deleteInventoryInventoryListItemNotFound  %+v", 404, o.Payload)
}

func (o *DeleteInventoryInventoryListItemNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *DeleteInventoryInventoryListItemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInventoryInventoryListItemMethodNotAllowed creates a DeleteInventoryInventoryListItemMethodNotAllowed with default headers values
func NewDeleteInventoryInventoryListItemMethodNotAllowed() *DeleteInventoryInventoryListItemMethodNotAllowed {
	return &DeleteInventoryInventoryListItemMethodNotAllowed{}
}

/*DeleteInventoryInventoryListItemMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type DeleteInventoryInventoryListItemMethodNotAllowed struct {
	Payload *models.MethodNotAllowedError
}

func (o *DeleteInventoryInventoryListItemMethodNotAllowed) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items/{productId}][%d] deleteInventoryInventoryListItemMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *DeleteInventoryInventoryListItemMethodNotAllowed) GetPayload() *models.MethodNotAllowedError {
	return o.Payload
}

func (o *DeleteInventoryInventoryListItemMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MethodNotAllowedError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInventoryInventoryListItemTooManyRequests creates a DeleteInventoryInventoryListItemTooManyRequests with default headers values
func NewDeleteInventoryInventoryListItemTooManyRequests() *DeleteInventoryInventoryListItemTooManyRequests {
	return &DeleteInventoryInventoryListItemTooManyRequests{}
}

/*DeleteInventoryInventoryListItemTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type DeleteInventoryInventoryListItemTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *DeleteInventoryInventoryListItemTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items/{productId}][%d] deleteInventoryInventoryListItemTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteInventoryInventoryListItemTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *DeleteInventoryInventoryListItemTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
