// Code generated by go-swagger; DO NOT EDIT.

package inventories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetInventoryReader is a Reader for the GetInventory structure.
type GetInventoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInventoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInventoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInventoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetInventoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInventoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInventoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetInventoryMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetInventoryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetInventoryOK creates a GetInventoryOK with default headers values
func NewGetInventoryOK() *GetInventoryOK {
	return &GetInventoryOK{}
}

/*GetInventoryOK handles this case with default header values.

successful operation
*/
type GetInventoryOK struct {
	Payload *models.Inventory
}

func (o *GetInventoryOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/inventories/{inventoryId}][%d] getInventoryOK  %+v", 200, o.Payload)
}

func (o *GetInventoryOK) GetPayload() *models.Inventory {
	return o.Payload
}

func (o *GetInventoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Inventory)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInventoryBadRequest creates a GetInventoryBadRequest with default headers values
func NewGetInventoryBadRequest() *GetInventoryBadRequest {
	return &GetInventoryBadRequest{}
}

/*GetInventoryBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetInventoryBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetInventoryBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/inventories/{inventoryId}][%d] getInventoryBadRequest  %+v", 400, o.Payload)
}

func (o *GetInventoryBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetInventoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInventoryUnauthorized creates a GetInventoryUnauthorized with default headers values
func NewGetInventoryUnauthorized() *GetInventoryUnauthorized {
	return &GetInventoryUnauthorized{}
}

/*GetInventoryUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetInventoryUnauthorized struct {
}

func (o *GetInventoryUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/inventories/{inventoryId}][%d] getInventoryUnauthorized ", 401)
}

func (o *GetInventoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInventoryForbidden creates a GetInventoryForbidden with default headers values
func NewGetInventoryForbidden() *GetInventoryForbidden {
	return &GetInventoryForbidden{}
}

/*GetInventoryForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetInventoryForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetInventoryForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/inventories/{inventoryId}][%d] getInventoryForbidden  %+v", 403, o.Payload)
}

func (o *GetInventoryForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetInventoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInventoryNotFound creates a GetInventoryNotFound with default headers values
func NewGetInventoryNotFound() *GetInventoryNotFound {
	return &GetInventoryNotFound{}
}

/*GetInventoryNotFound handles this case with default header values.

Object not found
*/
type GetInventoryNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetInventoryNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/inventories/{inventoryId}][%d] getInventoryNotFound  %+v", 404, o.Payload)
}

func (o *GetInventoryNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetInventoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInventoryMethodNotAllowed creates a GetInventoryMethodNotAllowed with default headers values
func NewGetInventoryMethodNotAllowed() *GetInventoryMethodNotAllowed {
	return &GetInventoryMethodNotAllowed{}
}

/*GetInventoryMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type GetInventoryMethodNotAllowed struct {
	Payload *models.MethodNotAllowedError
}

func (o *GetInventoryMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/inventories/{inventoryId}][%d] getInventoryMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetInventoryMethodNotAllowed) GetPayload() *models.MethodNotAllowedError {
	return o.Payload
}

func (o *GetInventoryMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MethodNotAllowedError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInventoryTooManyRequests creates a GetInventoryTooManyRequests with default headers values
func NewGetInventoryTooManyRequests() *GetInventoryTooManyRequests {
	return &GetInventoryTooManyRequests{}
}

/*GetInventoryTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetInventoryTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetInventoryTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/inventories/{inventoryId}][%d] getInventoryTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetInventoryTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetInventoryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
