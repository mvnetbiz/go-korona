// Code generated by go-swagger; DO NOT EDIT.

package inventories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetInventoriesReader is a Reader for the GetInventories structure.
type GetInventoriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInventoriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInventoriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetInventoriesNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInventoriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetInventoriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInventoriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInventoriesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetInventoriesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetInventoriesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetInventoriesOK creates a GetInventoriesOK with default headers values
func NewGetInventoriesOK() *GetInventoriesOK {
	return &GetInventoriesOK{}
}

/*GetInventoriesOK handles this case with default header values.

successful operation
*/
type GetInventoriesOK struct {
	Payload *models.ResultListInventory
}

func (o *GetInventoriesOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/inventories][%d] getInventoriesOK  %+v", 200, o.Payload)
}

func (o *GetInventoriesOK) GetPayload() *models.ResultListInventory {
	return o.Payload
}

func (o *GetInventoriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResultListInventory)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInventoriesNoContent creates a GetInventoriesNoContent with default headers values
func NewGetInventoriesNoContent() *GetInventoriesNoContent {
	return &GetInventoriesNoContent{}
}

/*GetInventoriesNoContent handles this case with default header values.

Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object.
*/
type GetInventoriesNoContent struct {
}

func (o *GetInventoriesNoContent) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/inventories][%d] getInventoriesNoContent ", 204)
}

func (o *GetInventoriesNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInventoriesBadRequest creates a GetInventoriesBadRequest with default headers values
func NewGetInventoriesBadRequest() *GetInventoriesBadRequest {
	return &GetInventoriesBadRequest{}
}

/*GetInventoriesBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetInventoriesBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetInventoriesBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/inventories][%d] getInventoriesBadRequest  %+v", 400, o.Payload)
}

func (o *GetInventoriesBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetInventoriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInventoriesUnauthorized creates a GetInventoriesUnauthorized with default headers values
func NewGetInventoriesUnauthorized() *GetInventoriesUnauthorized {
	return &GetInventoriesUnauthorized{}
}

/*GetInventoriesUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetInventoriesUnauthorized struct {
}

func (o *GetInventoriesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/inventories][%d] getInventoriesUnauthorized ", 401)
}

func (o *GetInventoriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInventoriesForbidden creates a GetInventoriesForbidden with default headers values
func NewGetInventoriesForbidden() *GetInventoriesForbidden {
	return &GetInventoriesForbidden{}
}

/*GetInventoriesForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetInventoriesForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetInventoriesForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/inventories][%d] getInventoriesForbidden  %+v", 403, o.Payload)
}

func (o *GetInventoriesForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetInventoriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInventoriesNotFound creates a GetInventoriesNotFound with default headers values
func NewGetInventoriesNotFound() *GetInventoriesNotFound {
	return &GetInventoriesNotFound{}
}

/*GetInventoriesNotFound handles this case with default header values.

Object not found
*/
type GetInventoriesNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetInventoriesNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/inventories][%d] getInventoriesNotFound  %+v", 404, o.Payload)
}

func (o *GetInventoriesNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetInventoriesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInventoriesMethodNotAllowed creates a GetInventoriesMethodNotAllowed with default headers values
func NewGetInventoriesMethodNotAllowed() *GetInventoriesMethodNotAllowed {
	return &GetInventoriesMethodNotAllowed{}
}

/*GetInventoriesMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type GetInventoriesMethodNotAllowed struct {
	Payload *models.MethodNotAllowedError
}

func (o *GetInventoriesMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/inventories][%d] getInventoriesMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetInventoriesMethodNotAllowed) GetPayload() *models.MethodNotAllowedError {
	return o.Payload
}

func (o *GetInventoriesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MethodNotAllowedError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInventoriesTooManyRequests creates a GetInventoriesTooManyRequests with default headers values
func NewGetInventoriesTooManyRequests() *GetInventoriesTooManyRequests {
	return &GetInventoriesTooManyRequests{}
}

/*GetInventoriesTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetInventoriesTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetInventoriesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/inventories][%d] getInventoriesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetInventoriesTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetInventoriesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
