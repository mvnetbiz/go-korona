// Code generated by go-swagger; DO NOT EDIT.

package inventories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// AddInventoriesReader is a Reader for the AddInventories structure.
type AddInventoriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddInventoriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddInventoriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddInventoriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddInventoriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddInventoriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddInventoriesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewAddInventoriesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAddInventoriesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddInventoriesOK creates a AddInventoriesOK with default headers values
func NewAddInventoriesOK() *AddInventoriesOK {
	return &AddInventoriesOK{}
}

/*AddInventoriesOK handles this case with default header values.

successful operation
*/
type AddInventoriesOK struct {
	Payload []*models.AddOrUpdateResult
}

func (o *AddInventoriesOK) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/inventories][%d] addInventoriesOK  %+v", 200, o.Payload)
}

func (o *AddInventoriesOK) GetPayload() []*models.AddOrUpdateResult {
	return o.Payload
}

func (o *AddInventoriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddInventoriesBadRequest creates a AddInventoriesBadRequest with default headers values
func NewAddInventoriesBadRequest() *AddInventoriesBadRequest {
	return &AddInventoriesBadRequest{}
}

/*AddInventoriesBadRequest handles this case with default header values.

Malformed querystring or model
*/
type AddInventoriesBadRequest struct {
	Payload *models.BadRequestError
}

func (o *AddInventoriesBadRequest) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/inventories][%d] addInventoriesBadRequest  %+v", 400, o.Payload)
}

func (o *AddInventoriesBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *AddInventoriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddInventoriesUnauthorized creates a AddInventoriesUnauthorized with default headers values
func NewAddInventoriesUnauthorized() *AddInventoriesUnauthorized {
	return &AddInventoriesUnauthorized{}
}

/*AddInventoriesUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type AddInventoriesUnauthorized struct {
}

func (o *AddInventoriesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/inventories][%d] addInventoriesUnauthorized ", 401)
}

func (o *AddInventoriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddInventoriesForbidden creates a AddInventoriesForbidden with default headers values
func NewAddInventoriesForbidden() *AddInventoriesForbidden {
	return &AddInventoriesForbidden{}
}

/*AddInventoriesForbidden handles this case with default header values.

Requested action is not allowed
*/
type AddInventoriesForbidden struct {
	Payload *models.ForbiddenError
}

func (o *AddInventoriesForbidden) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/inventories][%d] addInventoriesForbidden  %+v", 403, o.Payload)
}

func (o *AddInventoriesForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *AddInventoriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddInventoriesNotFound creates a AddInventoriesNotFound with default headers values
func NewAddInventoriesNotFound() *AddInventoriesNotFound {
	return &AddInventoriesNotFound{}
}

/*AddInventoriesNotFound handles this case with default header values.

Object not found
*/
type AddInventoriesNotFound struct {
	Payload *models.NotFoundError
}

func (o *AddInventoriesNotFound) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/inventories][%d] addInventoriesNotFound  %+v", 404, o.Payload)
}

func (o *AddInventoriesNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *AddInventoriesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddInventoriesMethodNotAllowed creates a AddInventoriesMethodNotAllowed with default headers values
func NewAddInventoriesMethodNotAllowed() *AddInventoriesMethodNotAllowed {
	return &AddInventoriesMethodNotAllowed{}
}

/*AddInventoriesMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type AddInventoriesMethodNotAllowed struct {
	Payload *models.MethodNotAllowedError
}

func (o *AddInventoriesMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/inventories][%d] addInventoriesMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *AddInventoriesMethodNotAllowed) GetPayload() *models.MethodNotAllowedError {
	return o.Payload
}

func (o *AddInventoriesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MethodNotAllowedError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddInventoriesTooManyRequests creates a AddInventoriesTooManyRequests with default headers values
func NewAddInventoriesTooManyRequests() *AddInventoriesTooManyRequests {
	return &AddInventoriesTooManyRequests{}
}

/*AddInventoriesTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type AddInventoriesTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *AddInventoriesTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/inventories][%d] addInventoriesTooManyRequests  %+v", 429, o.Payload)
}

func (o *AddInventoriesTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *AddInventoriesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
