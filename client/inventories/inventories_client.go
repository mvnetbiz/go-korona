// Code generated by go-swagger; DO NOT EDIT.

package inventories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new inventories API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for inventories API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddInventories(params *AddInventoriesParams, authInfo runtime.ClientAuthInfoWriter) (*AddInventoriesOK, error)

	AddInventoryInventoryListItems(params *AddInventoryInventoryListItemsParams, authInfo runtime.ClientAuthInfoWriter) (*AddInventoryInventoryListItemsOK, error)

	DeleteInventory(params *DeleteInventoryParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteInventoryNoContent, error)

	DeleteInventoryInventoryListItem(params *DeleteInventoryInventoryListItemParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteInventoryInventoryListItemNoContent, error)

	GetInventories(params *GetInventoriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetInventoriesOK, *GetInventoriesNoContent, error)

	GetInventory(params *GetInventoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetInventoryOK, error)

	GetInventoryInventoryList(params *GetInventoryInventoryListParams, authInfo runtime.ClientAuthInfoWriter) (*GetInventoryInventoryListOK, error)

	GetInventoryInventoryListItem(params *GetInventoryInventoryListItemParams, authInfo runtime.ClientAuthInfoWriter) (*GetInventoryInventoryListItemOK, error)

	GetInventoryInventoryListItems(params *GetInventoryInventoryListItemsParams, authInfo runtime.ClientAuthInfoWriter) (*GetInventoryInventoryListItemsOK, *GetInventoryInventoryListItemsNoContent, error)

	GetInventoryInventoryLists(params *GetInventoryInventoryListsParams, authInfo runtime.ClientAuthInfoWriter) (*GetInventoryInventoryListsOK, *GetInventoryInventoryListsNoContent, error)

	UpdateInventory(params *UpdateInventoryParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateInventoryNoContent, error)

	UpdateInventoryInventoryList(params *UpdateInventoryInventoryListParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateInventoryInventoryListNoContent, error)

	UpdateInventoryInventoryListItem(params *UpdateInventoryInventoryListItemParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateInventoryInventoryListItemNoContent, error)

	UpdateInventoryInventoryListItems(params *UpdateInventoryInventoryListItemsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateInventoryInventoryListItemsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddInventories adds a batch of new inventories
*/
func (a *Client) AddInventories(params *AddInventoriesParams, authInfo runtime.ClientAuthInfoWriter) (*AddInventoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddInventoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addInventories",
		Method:             "POST",
		PathPattern:        "/accounts/{koronaAccountId}/inventories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddInventoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddInventoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addInventories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddInventoryInventoryListItems adds inventory list items
*/
func (a *Client) AddInventoryInventoryListItems(params *AddInventoryInventoryListItemsParams, authInfo runtime.ClientAuthInfoWriter) (*AddInventoryInventoryListItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddInventoryInventoryListItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addInventoryInventoryListItems",
		Method:             "POST",
		PathPattern:        "/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddInventoryInventoryListItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddInventoryInventoryListItemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addInventoryInventoryListItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteInventory deletes the single inventory only allowed if has booked receipts false
*/
func (a *Client) DeleteInventory(params *DeleteInventoryParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteInventoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInventoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInventory",
		Method:             "DELETE",
		PathPattern:        "/accounts/{koronaAccountId}/inventories/{inventoryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInventoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteInventoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteInventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteInventoryInventoryListItem deletes the single inventory list item
*/
func (a *Client) DeleteInventoryInventoryListItem(params *DeleteInventoryInventoryListItemParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteInventoryInventoryListItemNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInventoryInventoryListItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInventoryInventoryListItem",
		Method:             "DELETE",
		PathPattern:        "/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items/{productId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInventoryInventoryListItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteInventoryInventoryListItemNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteInventoryInventoryListItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInventories lists all inventories
*/
func (a *Client) GetInventories(params *GetInventoriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetInventoriesOK, *GetInventoriesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInventories",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/inventories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetInventoriesOK:
		return value, nil, nil
	case *GetInventoriesNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for inventories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInventory returns the single inventory
*/
func (a *Client) GetInventory(params *GetInventoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetInventoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInventory",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/inventories/{inventoryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInventoryInventoryList returns the single inventory list
*/
func (a *Client) GetInventoryInventoryList(params *GetInventoryInventoryListParams, authInfo runtime.ClientAuthInfoWriter) (*GetInventoryInventoryListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryInventoryListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInventoryInventoryList",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryInventoryListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryInventoryListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInventoryInventoryList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInventoryInventoryListItem returns the single inventory list item
*/
func (a *Client) GetInventoryInventoryListItem(params *GetInventoryInventoryListItemParams, authInfo runtime.ClientAuthInfoWriter) (*GetInventoryInventoryListItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryInventoryListItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInventoryInventoryListItem",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items/{productId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryInventoryListItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryInventoryListItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInventoryInventoryListItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInventoryInventoryListItems lists all inventory list items
*/
func (a *Client) GetInventoryInventoryListItems(params *GetInventoryInventoryListItemsParams, authInfo runtime.ClientAuthInfoWriter) (*GetInventoryInventoryListItemsOK, *GetInventoryInventoryListItemsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryInventoryListItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInventoryInventoryListItems",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryInventoryListItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetInventoryInventoryListItemsOK:
		return value, nil, nil
	case *GetInventoryInventoryListItemsNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for inventories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInventoryInventoryLists lists all inventory lists
*/
func (a *Client) GetInventoryInventoryLists(params *GetInventoryInventoryListsParams, authInfo runtime.ClientAuthInfoWriter) (*GetInventoryInventoryListsOK, *GetInventoryInventoryListsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryInventoryListsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInventoryInventoryLists",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryInventoryListsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetInventoryInventoryListsOK:
		return value, nil, nil
	case *GetInventoryInventoryListsNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for inventories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateInventory updates the single inventory
*/
func (a *Client) UpdateInventory(params *UpdateInventoryParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateInventoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInventoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateInventory",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/inventories/{inventoryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInventoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateInventoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateInventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateInventoryInventoryList updates the single inventory list
*/
func (a *Client) UpdateInventoryInventoryList(params *UpdateInventoryInventoryListParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateInventoryInventoryListNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInventoryInventoryListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateInventoryInventoryList",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInventoryInventoryListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateInventoryInventoryListNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateInventoryInventoryList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateInventoryInventoryListItem updates the single inventory list item
*/
func (a *Client) UpdateInventoryInventoryListItem(params *UpdateInventoryInventoryListItemParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateInventoryInventoryListItemNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInventoryInventoryListItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateInventoryInventoryListItem",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items/{productId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInventoryInventoryListItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateInventoryInventoryListItemNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateInventoryInventoryListItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateInventoryInventoryListItems updates inventory list items property product required
*/
func (a *Client) UpdateInventoryInventoryListItems(params *UpdateInventoryInventoryListItemsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateInventoryInventoryListItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInventoryInventoryListItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateInventoryInventoryListItems",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInventoryInventoryListItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateInventoryInventoryListItemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateInventoryInventoryListItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
