// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// UpdateTagsReader is a Reader for the UpdateTags structure.
type UpdateTagsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateTagsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateTagsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateTagsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateTagsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateTagsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateTagsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateTagsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateTagsOK creates a UpdateTagsOK with default headers values
func NewUpdateTagsOK() *UpdateTagsOK {
	return &UpdateTagsOK{}
}

/*UpdateTagsOK handles this case with default header values.

successful operation
*/
type UpdateTagsOK struct {
	Payload []*models.AddOrUpdateResult
}

func (o *UpdateTagsOK) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/tags][%d] updateTagsOK  %+v", 200, o.Payload)
}

func (o *UpdateTagsOK) GetPayload() []*models.AddOrUpdateResult {
	return o.Payload
}

func (o *UpdateTagsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTagsBadRequest creates a UpdateTagsBadRequest with default headers values
func NewUpdateTagsBadRequest() *UpdateTagsBadRequest {
	return &UpdateTagsBadRequest{}
}

/*UpdateTagsBadRequest handles this case with default header values.

Malformed querystring or model
*/
type UpdateTagsBadRequest struct {
	Payload *models.BadRequestError
}

func (o *UpdateTagsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/tags][%d] updateTagsBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateTagsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UpdateTagsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTagsUnauthorized creates a UpdateTagsUnauthorized with default headers values
func NewUpdateTagsUnauthorized() *UpdateTagsUnauthorized {
	return &UpdateTagsUnauthorized{}
}

/*UpdateTagsUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type UpdateTagsUnauthorized struct {
}

func (o *UpdateTagsUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/tags][%d] updateTagsUnauthorized ", 401)
}

func (o *UpdateTagsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateTagsForbidden creates a UpdateTagsForbidden with default headers values
func NewUpdateTagsForbidden() *UpdateTagsForbidden {
	return &UpdateTagsForbidden{}
}

/*UpdateTagsForbidden handles this case with default header values.

Requested action is not allowed
*/
type UpdateTagsForbidden struct {
	Payload *models.ForbiddenError
}

func (o *UpdateTagsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/tags][%d] updateTagsForbidden  %+v", 403, o.Payload)
}

func (o *UpdateTagsForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *UpdateTagsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTagsNotFound creates a UpdateTagsNotFound with default headers values
func NewUpdateTagsNotFound() *UpdateTagsNotFound {
	return &UpdateTagsNotFound{}
}

/*UpdateTagsNotFound handles this case with default header values.

Object not found
*/
type UpdateTagsNotFound struct {
	Payload *models.NotFoundError
}

func (o *UpdateTagsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/tags][%d] updateTagsNotFound  %+v", 404, o.Payload)
}

func (o *UpdateTagsNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UpdateTagsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTagsTooManyRequests creates a UpdateTagsTooManyRequests with default headers values
func NewUpdateTagsTooManyRequests() *UpdateTagsTooManyRequests {
	return &UpdateTagsTooManyRequests{}
}

/*UpdateTagsTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type UpdateTagsTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *UpdateTagsTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/tags][%d] updateTagsTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateTagsTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *UpdateTagsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
