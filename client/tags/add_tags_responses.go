// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// AddTagsReader is a Reader for the AddTags structure.
type AddTagsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddTagsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddTagsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddTagsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddTagsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddTagsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddTagsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAddTagsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddTagsOK creates a AddTagsOK with default headers values
func NewAddTagsOK() *AddTagsOK {
	return &AddTagsOK{}
}

/*AddTagsOK handles this case with default header values.

successful operation
*/
type AddTagsOK struct {
	Payload []*models.AddOrUpdateResult
}

func (o *AddTagsOK) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/tags][%d] addTagsOK  %+v", 200, o.Payload)
}

func (o *AddTagsOK) GetPayload() []*models.AddOrUpdateResult {
	return o.Payload
}

func (o *AddTagsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddTagsBadRequest creates a AddTagsBadRequest with default headers values
func NewAddTagsBadRequest() *AddTagsBadRequest {
	return &AddTagsBadRequest{}
}

/*AddTagsBadRequest handles this case with default header values.

Malformed querystring or model
*/
type AddTagsBadRequest struct {
	Payload *models.BadRequestError
}

func (o *AddTagsBadRequest) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/tags][%d] addTagsBadRequest  %+v", 400, o.Payload)
}

func (o *AddTagsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *AddTagsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddTagsUnauthorized creates a AddTagsUnauthorized with default headers values
func NewAddTagsUnauthorized() *AddTagsUnauthorized {
	return &AddTagsUnauthorized{}
}

/*AddTagsUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type AddTagsUnauthorized struct {
}

func (o *AddTagsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/tags][%d] addTagsUnauthorized ", 401)
}

func (o *AddTagsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddTagsForbidden creates a AddTagsForbidden with default headers values
func NewAddTagsForbidden() *AddTagsForbidden {
	return &AddTagsForbidden{}
}

/*AddTagsForbidden handles this case with default header values.

Requested action is not allowed
*/
type AddTagsForbidden struct {
	Payload *models.ForbiddenError
}

func (o *AddTagsForbidden) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/tags][%d] addTagsForbidden  %+v", 403, o.Payload)
}

func (o *AddTagsForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *AddTagsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddTagsNotFound creates a AddTagsNotFound with default headers values
func NewAddTagsNotFound() *AddTagsNotFound {
	return &AddTagsNotFound{}
}

/*AddTagsNotFound handles this case with default header values.

Object not found
*/
type AddTagsNotFound struct {
	Payload *models.NotFoundError
}

func (o *AddTagsNotFound) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/tags][%d] addTagsNotFound  %+v", 404, o.Payload)
}

func (o *AddTagsNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *AddTagsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddTagsTooManyRequests creates a AddTagsTooManyRequests with default headers values
func NewAddTagsTooManyRequests() *AddTagsTooManyRequests {
	return &AddTagsTooManyRequests{}
}

/*AddTagsTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type AddTagsTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *AddTagsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/tags][%d] addTagsTooManyRequests  %+v", 429, o.Payload)
}

func (o *AddTagsTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *AddTagsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
