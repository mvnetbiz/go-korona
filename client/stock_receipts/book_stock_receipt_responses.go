// Code generated by go-swagger; DO NOT EDIT.

package stock_receipts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// BookStockReceiptReader is a Reader for the BookStockReceipt structure.
type BookStockReceiptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BookStockReceiptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewBookStockReceiptNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewBookStockReceiptBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewBookStockReceiptUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewBookStockReceiptForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewBookStockReceiptNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewBookStockReceiptMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewBookStockReceiptTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewBookStockReceiptNoContent creates a BookStockReceiptNoContent with default headers values
func NewBookStockReceiptNoContent() *BookStockReceiptNoContent {
	return &BookStockReceiptNoContent{}
}

/*BookStockReceiptNoContent handles this case with default header values.

Request successful, patch on single resource does not return any content
*/
type BookStockReceiptNoContent struct {
}

func (o *BookStockReceiptNoContent) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/book][%d] bookStockReceiptNoContent ", 204)
}

func (o *BookStockReceiptNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBookStockReceiptBadRequest creates a BookStockReceiptBadRequest with default headers values
func NewBookStockReceiptBadRequest() *BookStockReceiptBadRequest {
	return &BookStockReceiptBadRequest{}
}

/*BookStockReceiptBadRequest handles this case with default header values.

Malformed querystring or model
*/
type BookStockReceiptBadRequest struct {
	Payload *models.BadRequestError
}

func (o *BookStockReceiptBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/book][%d] bookStockReceiptBadRequest  %+v", 400, o.Payload)
}

func (o *BookStockReceiptBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *BookStockReceiptBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBookStockReceiptUnauthorized creates a BookStockReceiptUnauthorized with default headers values
func NewBookStockReceiptUnauthorized() *BookStockReceiptUnauthorized {
	return &BookStockReceiptUnauthorized{}
}

/*BookStockReceiptUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type BookStockReceiptUnauthorized struct {
}

func (o *BookStockReceiptUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/book][%d] bookStockReceiptUnauthorized ", 401)
}

func (o *BookStockReceiptUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBookStockReceiptForbidden creates a BookStockReceiptForbidden with default headers values
func NewBookStockReceiptForbidden() *BookStockReceiptForbidden {
	return &BookStockReceiptForbidden{}
}

/*BookStockReceiptForbidden handles this case with default header values.

Requested action is not allowed
*/
type BookStockReceiptForbidden struct {
	Payload *models.ForbiddenError
}

func (o *BookStockReceiptForbidden) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/book][%d] bookStockReceiptForbidden  %+v", 403, o.Payload)
}

func (o *BookStockReceiptForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *BookStockReceiptForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBookStockReceiptNotFound creates a BookStockReceiptNotFound with default headers values
func NewBookStockReceiptNotFound() *BookStockReceiptNotFound {
	return &BookStockReceiptNotFound{}
}

/*BookStockReceiptNotFound handles this case with default header values.

Object not found
*/
type BookStockReceiptNotFound struct {
	Payload *models.NotFoundError
}

func (o *BookStockReceiptNotFound) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/book][%d] bookStockReceiptNotFound  %+v", 404, o.Payload)
}

func (o *BookStockReceiptNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *BookStockReceiptNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBookStockReceiptMethodNotAllowed creates a BookStockReceiptMethodNotAllowed with default headers values
func NewBookStockReceiptMethodNotAllowed() *BookStockReceiptMethodNotAllowed {
	return &BookStockReceiptMethodNotAllowed{}
}

/*BookStockReceiptMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type BookStockReceiptMethodNotAllowed struct {
	Payload *models.MethodNotAllowedError
}

func (o *BookStockReceiptMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/book][%d] bookStockReceiptMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *BookStockReceiptMethodNotAllowed) GetPayload() *models.MethodNotAllowedError {
	return o.Payload
}

func (o *BookStockReceiptMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MethodNotAllowedError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBookStockReceiptTooManyRequests creates a BookStockReceiptTooManyRequests with default headers values
func NewBookStockReceiptTooManyRequests() *BookStockReceiptTooManyRequests {
	return &BookStockReceiptTooManyRequests{}
}

/*BookStockReceiptTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type BookStockReceiptTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *BookStockReceiptTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/book][%d] bookStockReceiptTooManyRequests  %+v", 429, o.Payload)
}

func (o *BookStockReceiptTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *BookStockReceiptTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
