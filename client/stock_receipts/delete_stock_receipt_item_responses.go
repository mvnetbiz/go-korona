// Code generated by go-swagger; DO NOT EDIT.

package stock_receipts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// DeleteStockReceiptItemReader is a Reader for the DeleteStockReceiptItem structure.
type DeleteStockReceiptItemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteStockReceiptItemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewDeleteStockReceiptItemBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteStockReceiptItemUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteStockReceiptItemForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteStockReceiptItemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewDeleteStockReceiptItemMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteStockReceiptItemTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteStockReceiptItemBadRequest creates a DeleteStockReceiptItemBadRequest with default headers values
func NewDeleteStockReceiptItemBadRequest() *DeleteStockReceiptItemBadRequest {
	return &DeleteStockReceiptItemBadRequest{}
}

/*DeleteStockReceiptItemBadRequest handles this case with default header values.

Malformed querystring or model
*/
type DeleteStockReceiptItemBadRequest struct {
	Payload *models.BadRequestError
}

func (o *DeleteStockReceiptItemBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}][%d] deleteStockReceiptItemBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteStockReceiptItemBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *DeleteStockReceiptItemBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteStockReceiptItemUnauthorized creates a DeleteStockReceiptItemUnauthorized with default headers values
func NewDeleteStockReceiptItemUnauthorized() *DeleteStockReceiptItemUnauthorized {
	return &DeleteStockReceiptItemUnauthorized{}
}

/*DeleteStockReceiptItemUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type DeleteStockReceiptItemUnauthorized struct {
}

func (o *DeleteStockReceiptItemUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}][%d] deleteStockReceiptItemUnauthorized ", 401)
}

func (o *DeleteStockReceiptItemUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteStockReceiptItemForbidden creates a DeleteStockReceiptItemForbidden with default headers values
func NewDeleteStockReceiptItemForbidden() *DeleteStockReceiptItemForbidden {
	return &DeleteStockReceiptItemForbidden{}
}

/*DeleteStockReceiptItemForbidden handles this case with default header values.

Requested action is not allowed
*/
type DeleteStockReceiptItemForbidden struct {
	Payload *models.ForbiddenError
}

func (o *DeleteStockReceiptItemForbidden) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}][%d] deleteStockReceiptItemForbidden  %+v", 403, o.Payload)
}

func (o *DeleteStockReceiptItemForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *DeleteStockReceiptItemForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteStockReceiptItemNotFound creates a DeleteStockReceiptItemNotFound with default headers values
func NewDeleteStockReceiptItemNotFound() *DeleteStockReceiptItemNotFound {
	return &DeleteStockReceiptItemNotFound{}
}

/*DeleteStockReceiptItemNotFound handles this case with default header values.

Object not found
*/
type DeleteStockReceiptItemNotFound struct {
	Payload *models.NotFoundError
}

func (o *DeleteStockReceiptItemNotFound) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}][%d] deleteStockReceiptItemNotFound  %+v", 404, o.Payload)
}

func (o *DeleteStockReceiptItemNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *DeleteStockReceiptItemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteStockReceiptItemMethodNotAllowed creates a DeleteStockReceiptItemMethodNotAllowed with default headers values
func NewDeleteStockReceiptItemMethodNotAllowed() *DeleteStockReceiptItemMethodNotAllowed {
	return &DeleteStockReceiptItemMethodNotAllowed{}
}

/*DeleteStockReceiptItemMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type DeleteStockReceiptItemMethodNotAllowed struct {
	Payload *models.MethodNotAllowedError
}

func (o *DeleteStockReceiptItemMethodNotAllowed) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}][%d] deleteStockReceiptItemMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *DeleteStockReceiptItemMethodNotAllowed) GetPayload() *models.MethodNotAllowedError {
	return o.Payload
}

func (o *DeleteStockReceiptItemMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MethodNotAllowedError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteStockReceiptItemTooManyRequests creates a DeleteStockReceiptItemTooManyRequests with default headers values
func NewDeleteStockReceiptItemTooManyRequests() *DeleteStockReceiptItemTooManyRequests {
	return &DeleteStockReceiptItemTooManyRequests{}
}

/*DeleteStockReceiptItemTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type DeleteStockReceiptItemTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *DeleteStockReceiptItemTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}][%d] deleteStockReceiptItemTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteStockReceiptItemTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *DeleteStockReceiptItemTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
