// Code generated by go-swagger; DO NOT EDIT.

package stock_receipts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetStockReceiptItemReader is a Reader for the GetStockReceiptItem structure.
type GetStockReceiptItemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStockReceiptItemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStockReceiptItemOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetStockReceiptItemBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetStockReceiptItemUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetStockReceiptItemForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetStockReceiptItemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetStockReceiptItemMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetStockReceiptItemTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetStockReceiptItemOK creates a GetStockReceiptItemOK with default headers values
func NewGetStockReceiptItemOK() *GetStockReceiptItemOK {
	return &GetStockReceiptItemOK{}
}

/*GetStockReceiptItemOK handles this case with default header values.

successful operation
*/
type GetStockReceiptItemOK struct {
	Payload *models.StockReceiptItem
}

func (o *GetStockReceiptItemOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}][%d] getStockReceiptItemOK  %+v", 200, o.Payload)
}

func (o *GetStockReceiptItemOK) GetPayload() *models.StockReceiptItem {
	return o.Payload
}

func (o *GetStockReceiptItemOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StockReceiptItem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStockReceiptItemBadRequest creates a GetStockReceiptItemBadRequest with default headers values
func NewGetStockReceiptItemBadRequest() *GetStockReceiptItemBadRequest {
	return &GetStockReceiptItemBadRequest{}
}

/*GetStockReceiptItemBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetStockReceiptItemBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetStockReceiptItemBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}][%d] getStockReceiptItemBadRequest  %+v", 400, o.Payload)
}

func (o *GetStockReceiptItemBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetStockReceiptItemBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStockReceiptItemUnauthorized creates a GetStockReceiptItemUnauthorized with default headers values
func NewGetStockReceiptItemUnauthorized() *GetStockReceiptItemUnauthorized {
	return &GetStockReceiptItemUnauthorized{}
}

/*GetStockReceiptItemUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetStockReceiptItemUnauthorized struct {
}

func (o *GetStockReceiptItemUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}][%d] getStockReceiptItemUnauthorized ", 401)
}

func (o *GetStockReceiptItemUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetStockReceiptItemForbidden creates a GetStockReceiptItemForbidden with default headers values
func NewGetStockReceiptItemForbidden() *GetStockReceiptItemForbidden {
	return &GetStockReceiptItemForbidden{}
}

/*GetStockReceiptItemForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetStockReceiptItemForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetStockReceiptItemForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}][%d] getStockReceiptItemForbidden  %+v", 403, o.Payload)
}

func (o *GetStockReceiptItemForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetStockReceiptItemForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStockReceiptItemNotFound creates a GetStockReceiptItemNotFound with default headers values
func NewGetStockReceiptItemNotFound() *GetStockReceiptItemNotFound {
	return &GetStockReceiptItemNotFound{}
}

/*GetStockReceiptItemNotFound handles this case with default header values.

Object not found
*/
type GetStockReceiptItemNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetStockReceiptItemNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}][%d] getStockReceiptItemNotFound  %+v", 404, o.Payload)
}

func (o *GetStockReceiptItemNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetStockReceiptItemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStockReceiptItemMethodNotAllowed creates a GetStockReceiptItemMethodNotAllowed with default headers values
func NewGetStockReceiptItemMethodNotAllowed() *GetStockReceiptItemMethodNotAllowed {
	return &GetStockReceiptItemMethodNotAllowed{}
}

/*GetStockReceiptItemMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type GetStockReceiptItemMethodNotAllowed struct {
	Payload *models.MethodNotAllowedError
}

func (o *GetStockReceiptItemMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}][%d] getStockReceiptItemMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetStockReceiptItemMethodNotAllowed) GetPayload() *models.MethodNotAllowedError {
	return o.Payload
}

func (o *GetStockReceiptItemMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MethodNotAllowedError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStockReceiptItemTooManyRequests creates a GetStockReceiptItemTooManyRequests with default headers values
func NewGetStockReceiptItemTooManyRequests() *GetStockReceiptItemTooManyRequests {
	return &GetStockReceiptItemTooManyRequests{}
}

/*GetStockReceiptItemTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetStockReceiptItemTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetStockReceiptItemTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}][%d] getStockReceiptItemTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetStockReceiptItemTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetStockReceiptItemTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
