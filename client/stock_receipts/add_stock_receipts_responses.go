// Code generated by go-swagger; DO NOT EDIT.

package stock_receipts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// AddStockReceiptsReader is a Reader for the AddStockReceipts structure.
type AddStockReceiptsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddStockReceiptsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddStockReceiptsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddStockReceiptsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddStockReceiptsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddStockReceiptsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddStockReceiptsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewAddStockReceiptsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAddStockReceiptsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddStockReceiptsOK creates a AddStockReceiptsOK with default headers values
func NewAddStockReceiptsOK() *AddStockReceiptsOK {
	return &AddStockReceiptsOK{}
}

/*AddStockReceiptsOK handles this case with default header values.

successful operation
*/
type AddStockReceiptsOK struct {
	Payload []*models.AddOrUpdateResult
}

func (o *AddStockReceiptsOK) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/stockReceipts][%d] addStockReceiptsOK  %+v", 200, o.Payload)
}

func (o *AddStockReceiptsOK) GetPayload() []*models.AddOrUpdateResult {
	return o.Payload
}

func (o *AddStockReceiptsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddStockReceiptsBadRequest creates a AddStockReceiptsBadRequest with default headers values
func NewAddStockReceiptsBadRequest() *AddStockReceiptsBadRequest {
	return &AddStockReceiptsBadRequest{}
}

/*AddStockReceiptsBadRequest handles this case with default header values.

Malformed querystring or model
*/
type AddStockReceiptsBadRequest struct {
	Payload *models.BadRequestError
}

func (o *AddStockReceiptsBadRequest) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/stockReceipts][%d] addStockReceiptsBadRequest  %+v", 400, o.Payload)
}

func (o *AddStockReceiptsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *AddStockReceiptsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddStockReceiptsUnauthorized creates a AddStockReceiptsUnauthorized with default headers values
func NewAddStockReceiptsUnauthorized() *AddStockReceiptsUnauthorized {
	return &AddStockReceiptsUnauthorized{}
}

/*AddStockReceiptsUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type AddStockReceiptsUnauthorized struct {
}

func (o *AddStockReceiptsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/stockReceipts][%d] addStockReceiptsUnauthorized ", 401)
}

func (o *AddStockReceiptsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddStockReceiptsForbidden creates a AddStockReceiptsForbidden with default headers values
func NewAddStockReceiptsForbidden() *AddStockReceiptsForbidden {
	return &AddStockReceiptsForbidden{}
}

/*AddStockReceiptsForbidden handles this case with default header values.

Requested action is not allowed
*/
type AddStockReceiptsForbidden struct {
	Payload *models.ForbiddenError
}

func (o *AddStockReceiptsForbidden) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/stockReceipts][%d] addStockReceiptsForbidden  %+v", 403, o.Payload)
}

func (o *AddStockReceiptsForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *AddStockReceiptsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddStockReceiptsNotFound creates a AddStockReceiptsNotFound with default headers values
func NewAddStockReceiptsNotFound() *AddStockReceiptsNotFound {
	return &AddStockReceiptsNotFound{}
}

/*AddStockReceiptsNotFound handles this case with default header values.

Object not found
*/
type AddStockReceiptsNotFound struct {
	Payload *models.NotFoundError
}

func (o *AddStockReceiptsNotFound) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/stockReceipts][%d] addStockReceiptsNotFound  %+v", 404, o.Payload)
}

func (o *AddStockReceiptsNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *AddStockReceiptsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddStockReceiptsMethodNotAllowed creates a AddStockReceiptsMethodNotAllowed with default headers values
func NewAddStockReceiptsMethodNotAllowed() *AddStockReceiptsMethodNotAllowed {
	return &AddStockReceiptsMethodNotAllowed{}
}

/*AddStockReceiptsMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type AddStockReceiptsMethodNotAllowed struct {
	Payload *models.MethodNotAllowedError
}

func (o *AddStockReceiptsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/stockReceipts][%d] addStockReceiptsMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *AddStockReceiptsMethodNotAllowed) GetPayload() *models.MethodNotAllowedError {
	return o.Payload
}

func (o *AddStockReceiptsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MethodNotAllowedError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddStockReceiptsTooManyRequests creates a AddStockReceiptsTooManyRequests with default headers values
func NewAddStockReceiptsTooManyRequests() *AddStockReceiptsTooManyRequests {
	return &AddStockReceiptsTooManyRequests{}
}

/*AddStockReceiptsTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type AddStockReceiptsTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *AddStockReceiptsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/stockReceipts][%d] addStockReceiptsTooManyRequests  %+v", 429, o.Payload)
}

func (o *AddStockReceiptsTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *AddStockReceiptsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
