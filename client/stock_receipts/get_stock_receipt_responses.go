// Code generated by go-swagger; DO NOT EDIT.

package stock_receipts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetStockReceiptReader is a Reader for the GetStockReceipt structure.
type GetStockReceiptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStockReceiptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStockReceiptOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetStockReceiptBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetStockReceiptUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetStockReceiptForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetStockReceiptNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetStockReceiptMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetStockReceiptTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetStockReceiptOK creates a GetStockReceiptOK with default headers values
func NewGetStockReceiptOK() *GetStockReceiptOK {
	return &GetStockReceiptOK{}
}

/*GetStockReceiptOK handles this case with default header values.

successful operation
*/
type GetStockReceiptOK struct {
	Payload *models.StockReceipt
}

func (o *GetStockReceiptOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}][%d] getStockReceiptOK  %+v", 200, o.Payload)
}

func (o *GetStockReceiptOK) GetPayload() *models.StockReceipt {
	return o.Payload
}

func (o *GetStockReceiptOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StockReceipt)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStockReceiptBadRequest creates a GetStockReceiptBadRequest with default headers values
func NewGetStockReceiptBadRequest() *GetStockReceiptBadRequest {
	return &GetStockReceiptBadRequest{}
}

/*GetStockReceiptBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetStockReceiptBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetStockReceiptBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}][%d] getStockReceiptBadRequest  %+v", 400, o.Payload)
}

func (o *GetStockReceiptBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetStockReceiptBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStockReceiptUnauthorized creates a GetStockReceiptUnauthorized with default headers values
func NewGetStockReceiptUnauthorized() *GetStockReceiptUnauthorized {
	return &GetStockReceiptUnauthorized{}
}

/*GetStockReceiptUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetStockReceiptUnauthorized struct {
}

func (o *GetStockReceiptUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}][%d] getStockReceiptUnauthorized ", 401)
}

func (o *GetStockReceiptUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetStockReceiptForbidden creates a GetStockReceiptForbidden with default headers values
func NewGetStockReceiptForbidden() *GetStockReceiptForbidden {
	return &GetStockReceiptForbidden{}
}

/*GetStockReceiptForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetStockReceiptForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetStockReceiptForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}][%d] getStockReceiptForbidden  %+v", 403, o.Payload)
}

func (o *GetStockReceiptForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetStockReceiptForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStockReceiptNotFound creates a GetStockReceiptNotFound with default headers values
func NewGetStockReceiptNotFound() *GetStockReceiptNotFound {
	return &GetStockReceiptNotFound{}
}

/*GetStockReceiptNotFound handles this case with default header values.

Object not found
*/
type GetStockReceiptNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetStockReceiptNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}][%d] getStockReceiptNotFound  %+v", 404, o.Payload)
}

func (o *GetStockReceiptNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetStockReceiptNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStockReceiptMethodNotAllowed creates a GetStockReceiptMethodNotAllowed with default headers values
func NewGetStockReceiptMethodNotAllowed() *GetStockReceiptMethodNotAllowed {
	return &GetStockReceiptMethodNotAllowed{}
}

/*GetStockReceiptMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type GetStockReceiptMethodNotAllowed struct {
	Payload *models.MethodNotAllowedError
}

func (o *GetStockReceiptMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}][%d] getStockReceiptMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetStockReceiptMethodNotAllowed) GetPayload() *models.MethodNotAllowedError {
	return o.Payload
}

func (o *GetStockReceiptMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MethodNotAllowedError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStockReceiptTooManyRequests creates a GetStockReceiptTooManyRequests with default headers values
func NewGetStockReceiptTooManyRequests() *GetStockReceiptTooManyRequests {
	return &GetStockReceiptTooManyRequests{}
}

/*GetStockReceiptTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetStockReceiptTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetStockReceiptTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}][%d] getStockReceiptTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetStockReceiptTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetStockReceiptTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
