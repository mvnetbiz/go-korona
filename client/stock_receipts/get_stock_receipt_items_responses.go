// Code generated by go-swagger; DO NOT EDIT.

package stock_receipts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetStockReceiptItemsReader is a Reader for the GetStockReceiptItems structure.
type GetStockReceiptItemsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStockReceiptItemsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStockReceiptItemsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetStockReceiptItemsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetStockReceiptItemsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetStockReceiptItemsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetStockReceiptItemsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetStockReceiptItemsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetStockReceiptItemsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetStockReceiptItemsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetStockReceiptItemsOK creates a GetStockReceiptItemsOK with default headers values
func NewGetStockReceiptItemsOK() *GetStockReceiptItemsOK {
	return &GetStockReceiptItemsOK{}
}

/*GetStockReceiptItemsOK handles this case with default header values.

successful operation
*/
type GetStockReceiptItemsOK struct {
	Payload *models.ResultListStockReceiptItem
}

func (o *GetStockReceiptItemsOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items][%d] getStockReceiptItemsOK  %+v", 200, o.Payload)
}

func (o *GetStockReceiptItemsOK) GetPayload() *models.ResultListStockReceiptItem {
	return o.Payload
}

func (o *GetStockReceiptItemsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResultListStockReceiptItem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStockReceiptItemsNoContent creates a GetStockReceiptItemsNoContent with default headers values
func NewGetStockReceiptItemsNoContent() *GetStockReceiptItemsNoContent {
	return &GetStockReceiptItemsNoContent{}
}

/*GetStockReceiptItemsNoContent handles this case with default header values.

Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object.
*/
type GetStockReceiptItemsNoContent struct {
}

func (o *GetStockReceiptItemsNoContent) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items][%d] getStockReceiptItemsNoContent ", 204)
}

func (o *GetStockReceiptItemsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetStockReceiptItemsBadRequest creates a GetStockReceiptItemsBadRequest with default headers values
func NewGetStockReceiptItemsBadRequest() *GetStockReceiptItemsBadRequest {
	return &GetStockReceiptItemsBadRequest{}
}

/*GetStockReceiptItemsBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetStockReceiptItemsBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetStockReceiptItemsBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items][%d] getStockReceiptItemsBadRequest  %+v", 400, o.Payload)
}

func (o *GetStockReceiptItemsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetStockReceiptItemsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStockReceiptItemsUnauthorized creates a GetStockReceiptItemsUnauthorized with default headers values
func NewGetStockReceiptItemsUnauthorized() *GetStockReceiptItemsUnauthorized {
	return &GetStockReceiptItemsUnauthorized{}
}

/*GetStockReceiptItemsUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetStockReceiptItemsUnauthorized struct {
}

func (o *GetStockReceiptItemsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items][%d] getStockReceiptItemsUnauthorized ", 401)
}

func (o *GetStockReceiptItemsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetStockReceiptItemsForbidden creates a GetStockReceiptItemsForbidden with default headers values
func NewGetStockReceiptItemsForbidden() *GetStockReceiptItemsForbidden {
	return &GetStockReceiptItemsForbidden{}
}

/*GetStockReceiptItemsForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetStockReceiptItemsForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetStockReceiptItemsForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items][%d] getStockReceiptItemsForbidden  %+v", 403, o.Payload)
}

func (o *GetStockReceiptItemsForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetStockReceiptItemsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStockReceiptItemsNotFound creates a GetStockReceiptItemsNotFound with default headers values
func NewGetStockReceiptItemsNotFound() *GetStockReceiptItemsNotFound {
	return &GetStockReceiptItemsNotFound{}
}

/*GetStockReceiptItemsNotFound handles this case with default header values.

Object not found
*/
type GetStockReceiptItemsNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetStockReceiptItemsNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items][%d] getStockReceiptItemsNotFound  %+v", 404, o.Payload)
}

func (o *GetStockReceiptItemsNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetStockReceiptItemsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStockReceiptItemsMethodNotAllowed creates a GetStockReceiptItemsMethodNotAllowed with default headers values
func NewGetStockReceiptItemsMethodNotAllowed() *GetStockReceiptItemsMethodNotAllowed {
	return &GetStockReceiptItemsMethodNotAllowed{}
}

/*GetStockReceiptItemsMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type GetStockReceiptItemsMethodNotAllowed struct {
	Payload *models.MethodNotAllowedError
}

func (o *GetStockReceiptItemsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items][%d] getStockReceiptItemsMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetStockReceiptItemsMethodNotAllowed) GetPayload() *models.MethodNotAllowedError {
	return o.Payload
}

func (o *GetStockReceiptItemsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MethodNotAllowedError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStockReceiptItemsTooManyRequests creates a GetStockReceiptItemsTooManyRequests with default headers values
func NewGetStockReceiptItemsTooManyRequests() *GetStockReceiptItemsTooManyRequests {
	return &GetStockReceiptItemsTooManyRequests{}
}

/*GetStockReceiptItemsTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetStockReceiptItemsTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetStockReceiptItemsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items][%d] getStockReceiptItemsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetStockReceiptItemsTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetStockReceiptItemsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
