// Code generated by go-swagger; DO NOT EDIT.

package stock_receipts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// UpdateStockReceiptReader is a Reader for the UpdateStockReceipt structure.
type UpdateStockReceiptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateStockReceiptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateStockReceiptNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateStockReceiptBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateStockReceiptUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateStockReceiptForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateStockReceiptNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateStockReceiptMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateStockReceiptTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateStockReceiptNoContent creates a UpdateStockReceiptNoContent with default headers values
func NewUpdateStockReceiptNoContent() *UpdateStockReceiptNoContent {
	return &UpdateStockReceiptNoContent{}
}

/*UpdateStockReceiptNoContent handles this case with default header values.

Request successful, patch on single resource does not return any content
*/
type UpdateStockReceiptNoContent struct {
}

func (o *UpdateStockReceiptNoContent) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}][%d] updateStockReceiptNoContent ", 204)
}

func (o *UpdateStockReceiptNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateStockReceiptBadRequest creates a UpdateStockReceiptBadRequest with default headers values
func NewUpdateStockReceiptBadRequest() *UpdateStockReceiptBadRequest {
	return &UpdateStockReceiptBadRequest{}
}

/*UpdateStockReceiptBadRequest handles this case with default header values.

Malformed querystring or model
*/
type UpdateStockReceiptBadRequest struct {
	Payload *models.BadRequestError
}

func (o *UpdateStockReceiptBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}][%d] updateStockReceiptBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateStockReceiptBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UpdateStockReceiptBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateStockReceiptUnauthorized creates a UpdateStockReceiptUnauthorized with default headers values
func NewUpdateStockReceiptUnauthorized() *UpdateStockReceiptUnauthorized {
	return &UpdateStockReceiptUnauthorized{}
}

/*UpdateStockReceiptUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type UpdateStockReceiptUnauthorized struct {
}

func (o *UpdateStockReceiptUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}][%d] updateStockReceiptUnauthorized ", 401)
}

func (o *UpdateStockReceiptUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateStockReceiptForbidden creates a UpdateStockReceiptForbidden with default headers values
func NewUpdateStockReceiptForbidden() *UpdateStockReceiptForbidden {
	return &UpdateStockReceiptForbidden{}
}

/*UpdateStockReceiptForbidden handles this case with default header values.

Requested action is not allowed
*/
type UpdateStockReceiptForbidden struct {
	Payload *models.ForbiddenError
}

func (o *UpdateStockReceiptForbidden) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}][%d] updateStockReceiptForbidden  %+v", 403, o.Payload)
}

func (o *UpdateStockReceiptForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *UpdateStockReceiptForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateStockReceiptNotFound creates a UpdateStockReceiptNotFound with default headers values
func NewUpdateStockReceiptNotFound() *UpdateStockReceiptNotFound {
	return &UpdateStockReceiptNotFound{}
}

/*UpdateStockReceiptNotFound handles this case with default header values.

Object not found
*/
type UpdateStockReceiptNotFound struct {
	Payload *models.NotFoundError
}

func (o *UpdateStockReceiptNotFound) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}][%d] updateStockReceiptNotFound  %+v", 404, o.Payload)
}

func (o *UpdateStockReceiptNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UpdateStockReceiptNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateStockReceiptMethodNotAllowed creates a UpdateStockReceiptMethodNotAllowed with default headers values
func NewUpdateStockReceiptMethodNotAllowed() *UpdateStockReceiptMethodNotAllowed {
	return &UpdateStockReceiptMethodNotAllowed{}
}

/*UpdateStockReceiptMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type UpdateStockReceiptMethodNotAllowed struct {
	Payload *models.MethodNotAllowedError
}

func (o *UpdateStockReceiptMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}][%d] updateStockReceiptMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *UpdateStockReceiptMethodNotAllowed) GetPayload() *models.MethodNotAllowedError {
	return o.Payload
}

func (o *UpdateStockReceiptMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MethodNotAllowedError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateStockReceiptTooManyRequests creates a UpdateStockReceiptTooManyRequests with default headers values
func NewUpdateStockReceiptTooManyRequests() *UpdateStockReceiptTooManyRequests {
	return &UpdateStockReceiptTooManyRequests{}
}

/*UpdateStockReceiptTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type UpdateStockReceiptTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *UpdateStockReceiptTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}][%d] updateStockReceiptTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateStockReceiptTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *UpdateStockReceiptTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
