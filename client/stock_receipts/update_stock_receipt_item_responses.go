// Code generated by go-swagger; DO NOT EDIT.

package stock_receipts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// UpdateStockReceiptItemReader is a Reader for the UpdateStockReceiptItem structure.
type UpdateStockReceiptItemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateStockReceiptItemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateStockReceiptItemNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateStockReceiptItemBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateStockReceiptItemUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateStockReceiptItemForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateStockReceiptItemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewUpdateStockReceiptItemMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateStockReceiptItemTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateStockReceiptItemNoContent creates a UpdateStockReceiptItemNoContent with default headers values
func NewUpdateStockReceiptItemNoContent() *UpdateStockReceiptItemNoContent {
	return &UpdateStockReceiptItemNoContent{}
}

/*UpdateStockReceiptItemNoContent handles this case with default header values.

Request successful, patch on single resource does not return any content
*/
type UpdateStockReceiptItemNoContent struct {
}

func (o *UpdateStockReceiptItemNoContent) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}][%d] updateStockReceiptItemNoContent ", 204)
}

func (o *UpdateStockReceiptItemNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateStockReceiptItemBadRequest creates a UpdateStockReceiptItemBadRequest with default headers values
func NewUpdateStockReceiptItemBadRequest() *UpdateStockReceiptItemBadRequest {
	return &UpdateStockReceiptItemBadRequest{}
}

/*UpdateStockReceiptItemBadRequest handles this case with default header values.

Malformed querystring or model
*/
type UpdateStockReceiptItemBadRequest struct {
	Payload *models.BadRequestError
}

func (o *UpdateStockReceiptItemBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}][%d] updateStockReceiptItemBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateStockReceiptItemBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UpdateStockReceiptItemBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateStockReceiptItemUnauthorized creates a UpdateStockReceiptItemUnauthorized with default headers values
func NewUpdateStockReceiptItemUnauthorized() *UpdateStockReceiptItemUnauthorized {
	return &UpdateStockReceiptItemUnauthorized{}
}

/*UpdateStockReceiptItemUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type UpdateStockReceiptItemUnauthorized struct {
}

func (o *UpdateStockReceiptItemUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}][%d] updateStockReceiptItemUnauthorized ", 401)
}

func (o *UpdateStockReceiptItemUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateStockReceiptItemForbidden creates a UpdateStockReceiptItemForbidden with default headers values
func NewUpdateStockReceiptItemForbidden() *UpdateStockReceiptItemForbidden {
	return &UpdateStockReceiptItemForbidden{}
}

/*UpdateStockReceiptItemForbidden handles this case with default header values.

Requested action is not allowed
*/
type UpdateStockReceiptItemForbidden struct {
	Payload *models.ForbiddenError
}

func (o *UpdateStockReceiptItemForbidden) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}][%d] updateStockReceiptItemForbidden  %+v", 403, o.Payload)
}

func (o *UpdateStockReceiptItemForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *UpdateStockReceiptItemForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateStockReceiptItemNotFound creates a UpdateStockReceiptItemNotFound with default headers values
func NewUpdateStockReceiptItemNotFound() *UpdateStockReceiptItemNotFound {
	return &UpdateStockReceiptItemNotFound{}
}

/*UpdateStockReceiptItemNotFound handles this case with default header values.

Object not found
*/
type UpdateStockReceiptItemNotFound struct {
	Payload *models.NotFoundError
}

func (o *UpdateStockReceiptItemNotFound) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}][%d] updateStockReceiptItemNotFound  %+v", 404, o.Payload)
}

func (o *UpdateStockReceiptItemNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UpdateStockReceiptItemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateStockReceiptItemMethodNotAllowed creates a UpdateStockReceiptItemMethodNotAllowed with default headers values
func NewUpdateStockReceiptItemMethodNotAllowed() *UpdateStockReceiptItemMethodNotAllowed {
	return &UpdateStockReceiptItemMethodNotAllowed{}
}

/*UpdateStockReceiptItemMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type UpdateStockReceiptItemMethodNotAllowed struct {
	Payload *models.MethodNotAllowedError
}

func (o *UpdateStockReceiptItemMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}][%d] updateStockReceiptItemMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *UpdateStockReceiptItemMethodNotAllowed) GetPayload() *models.MethodNotAllowedError {
	return o.Payload
}

func (o *UpdateStockReceiptItemMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MethodNotAllowedError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateStockReceiptItemTooManyRequests creates a UpdateStockReceiptItemTooManyRequests with default headers values
func NewUpdateStockReceiptItemTooManyRequests() *UpdateStockReceiptItemTooManyRequests {
	return &UpdateStockReceiptItemTooManyRequests{}
}

/*UpdateStockReceiptItemTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type UpdateStockReceiptItemTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *UpdateStockReceiptItemTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}][%d] updateStockReceiptItemTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateStockReceiptItemTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *UpdateStockReceiptItemTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
