// Code generated by go-swagger; DO NOT EDIT.

package stock_receipts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetStockReceiptsReader is a Reader for the GetStockReceipts structure.
type GetStockReceiptsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStockReceiptsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStockReceiptsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetStockReceiptsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetStockReceiptsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetStockReceiptsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetStockReceiptsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetStockReceiptsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetStockReceiptsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetStockReceiptsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetStockReceiptsOK creates a GetStockReceiptsOK with default headers values
func NewGetStockReceiptsOK() *GetStockReceiptsOK {
	return &GetStockReceiptsOK{}
}

/*GetStockReceiptsOK handles this case with default header values.

successful operation
*/
type GetStockReceiptsOK struct {
	Payload *models.ResultListStockReceipt
}

func (o *GetStockReceiptsOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts][%d] getStockReceiptsOK  %+v", 200, o.Payload)
}

func (o *GetStockReceiptsOK) GetPayload() *models.ResultListStockReceipt {
	return o.Payload
}

func (o *GetStockReceiptsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResultListStockReceipt)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStockReceiptsNoContent creates a GetStockReceiptsNoContent with default headers values
func NewGetStockReceiptsNoContent() *GetStockReceiptsNoContent {
	return &GetStockReceiptsNoContent{}
}

/*GetStockReceiptsNoContent handles this case with default header values.

Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object.
*/
type GetStockReceiptsNoContent struct {
}

func (o *GetStockReceiptsNoContent) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts][%d] getStockReceiptsNoContent ", 204)
}

func (o *GetStockReceiptsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetStockReceiptsBadRequest creates a GetStockReceiptsBadRequest with default headers values
func NewGetStockReceiptsBadRequest() *GetStockReceiptsBadRequest {
	return &GetStockReceiptsBadRequest{}
}

/*GetStockReceiptsBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetStockReceiptsBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetStockReceiptsBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts][%d] getStockReceiptsBadRequest  %+v", 400, o.Payload)
}

func (o *GetStockReceiptsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetStockReceiptsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStockReceiptsUnauthorized creates a GetStockReceiptsUnauthorized with default headers values
func NewGetStockReceiptsUnauthorized() *GetStockReceiptsUnauthorized {
	return &GetStockReceiptsUnauthorized{}
}

/*GetStockReceiptsUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetStockReceiptsUnauthorized struct {
}

func (o *GetStockReceiptsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts][%d] getStockReceiptsUnauthorized ", 401)
}

func (o *GetStockReceiptsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetStockReceiptsForbidden creates a GetStockReceiptsForbidden with default headers values
func NewGetStockReceiptsForbidden() *GetStockReceiptsForbidden {
	return &GetStockReceiptsForbidden{}
}

/*GetStockReceiptsForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetStockReceiptsForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetStockReceiptsForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts][%d] getStockReceiptsForbidden  %+v", 403, o.Payload)
}

func (o *GetStockReceiptsForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetStockReceiptsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStockReceiptsNotFound creates a GetStockReceiptsNotFound with default headers values
func NewGetStockReceiptsNotFound() *GetStockReceiptsNotFound {
	return &GetStockReceiptsNotFound{}
}

/*GetStockReceiptsNotFound handles this case with default header values.

Object not found
*/
type GetStockReceiptsNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetStockReceiptsNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts][%d] getStockReceiptsNotFound  %+v", 404, o.Payload)
}

func (o *GetStockReceiptsNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetStockReceiptsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStockReceiptsMethodNotAllowed creates a GetStockReceiptsMethodNotAllowed with default headers values
func NewGetStockReceiptsMethodNotAllowed() *GetStockReceiptsMethodNotAllowed {
	return &GetStockReceiptsMethodNotAllowed{}
}

/*GetStockReceiptsMethodNotAllowed handles this case with default header values.

Method not allowed
*/
type GetStockReceiptsMethodNotAllowed struct {
	Payload *models.MethodNotAllowedError
}

func (o *GetStockReceiptsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts][%d] getStockReceiptsMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetStockReceiptsMethodNotAllowed) GetPayload() *models.MethodNotAllowedError {
	return o.Payload
}

func (o *GetStockReceiptsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MethodNotAllowedError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStockReceiptsTooManyRequests creates a GetStockReceiptsTooManyRequests with default headers values
func NewGetStockReceiptsTooManyRequests() *GetStockReceiptsTooManyRequests {
	return &GetStockReceiptsTooManyRequests{}
}

/*GetStockReceiptsTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetStockReceiptsTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetStockReceiptsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/stockReceipts][%d] getStockReceiptsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetStockReceiptsTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetStockReceiptsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
