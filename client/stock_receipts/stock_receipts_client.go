// Code generated by go-swagger; DO NOT EDIT.

package stock_receipts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new stock receipts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for stock receipts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddStockReceiptItems(params *AddStockReceiptItemsParams, authInfo runtime.ClientAuthInfoWriter) (*AddStockReceiptItemsOK, error)

	AddStockReceipts(params *AddStockReceiptsParams, authInfo runtime.ClientAuthInfoWriter) (*AddStockReceiptsOK, error)

	BookStockReceipt(params *BookStockReceiptParams, authInfo runtime.ClientAuthInfoWriter) (*BookStockReceiptNoContent, error)

	DeleteStockReceiptItem(params *DeleteStockReceiptItemParams, authInfo runtime.ClientAuthInfoWriter) error

	GetStockReceipt(params *GetStockReceiptParams, authInfo runtime.ClientAuthInfoWriter) (*GetStockReceiptOK, error)

	GetStockReceiptItem(params *GetStockReceiptItemParams, authInfo runtime.ClientAuthInfoWriter) (*GetStockReceiptItemOK, error)

	GetStockReceiptItems(params *GetStockReceiptItemsParams, authInfo runtime.ClientAuthInfoWriter) (*GetStockReceiptItemsOK, *GetStockReceiptItemsNoContent, error)

	GetStockReceipts(params *GetStockReceiptsParams, authInfo runtime.ClientAuthInfoWriter) (*GetStockReceiptsOK, *GetStockReceiptsNoContent, error)

	UpdateStockReceipt(params *UpdateStockReceiptParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateStockReceiptNoContent, error)

	UpdateStockReceiptItem(params *UpdateStockReceiptItemParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateStockReceiptItemNoContent, error)

	UpdateStockReceiptItems(params *UpdateStockReceiptItemsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateStockReceiptItemsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddStockReceiptItems adds stock receipt items
*/
func (a *Client) AddStockReceiptItems(params *AddStockReceiptItemsParams, authInfo runtime.ClientAuthInfoWriter) (*AddStockReceiptItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddStockReceiptItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addStockReceiptItems",
		Method:             "POST",
		PathPattern:        "/accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddStockReceiptItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddStockReceiptItemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addStockReceiptItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddStockReceipts adds stock receipts
*/
func (a *Client) AddStockReceipts(params *AddStockReceiptsParams, authInfo runtime.ClientAuthInfoWriter) (*AddStockReceiptsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddStockReceiptsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addStockReceipts",
		Method:             "POST",
		PathPattern:        "/accounts/{koronaAccountId}/stockReceipts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddStockReceiptsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddStockReceiptsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addStockReceipts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  BookStockReceipt books the single stock receipt
*/
func (a *Client) BookStockReceipt(params *BookStockReceiptParams, authInfo runtime.ClientAuthInfoWriter) (*BookStockReceiptNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookStockReceiptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bookStockReceipt",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/book",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BookStockReceiptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookStockReceiptNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bookStockReceipt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStockReceiptItem deletes the single stock receipt item
*/
func (a *Client) DeleteStockReceiptItem(params *DeleteStockReceiptItemParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStockReceiptItemParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStockReceiptItem",
		Method:             "DELETE",
		PathPattern:        "/accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStockReceiptItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetStockReceipt returns the single stock receipt
*/
func (a *Client) GetStockReceipt(params *GetStockReceiptParams, authInfo runtime.ClientAuthInfoWriter) (*GetStockReceiptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStockReceiptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStockReceipt",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStockReceiptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStockReceiptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStockReceipt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStockReceiptItem returns the single stock receipt item
*/
func (a *Client) GetStockReceiptItem(params *GetStockReceiptItemParams, authInfo runtime.ClientAuthInfoWriter) (*GetStockReceiptItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStockReceiptItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStockReceiptItem",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStockReceiptItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStockReceiptItemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStockReceiptItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStockReceiptItems lists all stock receipt items
*/
func (a *Client) GetStockReceiptItems(params *GetStockReceiptItemsParams, authInfo runtime.ClientAuthInfoWriter) (*GetStockReceiptItemsOK, *GetStockReceiptItemsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStockReceiptItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStockReceiptItems",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStockReceiptItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetStockReceiptItemsOK:
		return value, nil, nil
	case *GetStockReceiptItemsNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stock_receipts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStockReceipts lists all stock receipts
*/
func (a *Client) GetStockReceipts(params *GetStockReceiptsParams, authInfo runtime.ClientAuthInfoWriter) (*GetStockReceiptsOK, *GetStockReceiptsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStockReceiptsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStockReceipts",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/stockReceipts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStockReceiptsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetStockReceiptsOK:
		return value, nil, nil
	case *GetStockReceiptsNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stock_receipts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateStockReceipt updates the single stock receipt
*/
func (a *Client) UpdateStockReceipt(params *UpdateStockReceiptParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateStockReceiptNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStockReceiptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateStockReceipt",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateStockReceiptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateStockReceiptNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateStockReceipt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateStockReceiptItem updates the single stock receipt item
*/
func (a *Client) UpdateStockReceiptItem(params *UpdateStockReceiptItemParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateStockReceiptItemNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStockReceiptItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateStockReceiptItem",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items/{productId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateStockReceiptItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateStockReceiptItemNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateStockReceiptItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateStockReceiptItems updates stock receipt items
*/
func (a *Client) UpdateStockReceiptItems(params *UpdateStockReceiptItemsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateStockReceiptItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStockReceiptItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateStockReceiptItems",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/stockReceipts/{stockReceiptId}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateStockReceiptItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateStockReceiptItemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateStockReceiptItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
