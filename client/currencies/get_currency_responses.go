// Code generated by go-swagger; DO NOT EDIT.

package currencies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetCurrencyReader is a Reader for the GetCurrency structure.
type GetCurrencyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCurrencyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCurrencyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCurrencyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetCurrencyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCurrencyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCurrencyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetCurrencyTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetCurrencyOK creates a GetCurrencyOK with default headers values
func NewGetCurrencyOK() *GetCurrencyOK {
	return &GetCurrencyOK{}
}

/*GetCurrencyOK handles this case with default header values.

successful operation
*/
type GetCurrencyOK struct {
	Payload *models.Currency
}

func (o *GetCurrencyOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/currencies/{currencyId}][%d] getCurrencyOK  %+v", 200, o.Payload)
}

func (o *GetCurrencyOK) GetPayload() *models.Currency {
	return o.Payload
}

func (o *GetCurrencyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Currency)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCurrencyBadRequest creates a GetCurrencyBadRequest with default headers values
func NewGetCurrencyBadRequest() *GetCurrencyBadRequest {
	return &GetCurrencyBadRequest{}
}

/*GetCurrencyBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetCurrencyBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetCurrencyBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/currencies/{currencyId}][%d] getCurrencyBadRequest  %+v", 400, o.Payload)
}

func (o *GetCurrencyBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetCurrencyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCurrencyUnauthorized creates a GetCurrencyUnauthorized with default headers values
func NewGetCurrencyUnauthorized() *GetCurrencyUnauthorized {
	return &GetCurrencyUnauthorized{}
}

/*GetCurrencyUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetCurrencyUnauthorized struct {
}

func (o *GetCurrencyUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/currencies/{currencyId}][%d] getCurrencyUnauthorized ", 401)
}

func (o *GetCurrencyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCurrencyForbidden creates a GetCurrencyForbidden with default headers values
func NewGetCurrencyForbidden() *GetCurrencyForbidden {
	return &GetCurrencyForbidden{}
}

/*GetCurrencyForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetCurrencyForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetCurrencyForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/currencies/{currencyId}][%d] getCurrencyForbidden  %+v", 403, o.Payload)
}

func (o *GetCurrencyForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetCurrencyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCurrencyNotFound creates a GetCurrencyNotFound with default headers values
func NewGetCurrencyNotFound() *GetCurrencyNotFound {
	return &GetCurrencyNotFound{}
}

/*GetCurrencyNotFound handles this case with default header values.

Object not found
*/
type GetCurrencyNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetCurrencyNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/currencies/{currencyId}][%d] getCurrencyNotFound  %+v", 404, o.Payload)
}

func (o *GetCurrencyNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetCurrencyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCurrencyTooManyRequests creates a GetCurrencyTooManyRequests with default headers values
func NewGetCurrencyTooManyRequests() *GetCurrencyTooManyRequests {
	return &GetCurrencyTooManyRequests{}
}

/*GetCurrencyTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetCurrencyTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetCurrencyTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/currencies/{currencyId}][%d] getCurrencyTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCurrencyTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetCurrencyTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
