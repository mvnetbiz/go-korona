// Code generated by go-swagger; DO NOT EDIT.

package ticket_creation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// AddCreationTaskReader is a Reader for the AddCreationTask structure.
type AddCreationTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddCreationTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddCreationTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddCreationTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddCreationTaskUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddCreationTaskForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddCreationTaskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAddCreationTaskTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddCreationTaskOK creates a AddCreationTaskOK with default headers values
func NewAddCreationTaskOK() *AddCreationTaskOK {
	return &AddCreationTaskOK{}
}

/*AddCreationTaskOK handles this case with default header values.

successful operation
*/
type AddCreationTaskOK struct {
	Payload *models.AddOrUpdateResult
}

func (o *AddCreationTaskOK) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/ticketCreation][%d] addCreationTaskOK  %+v", 200, o.Payload)
}

func (o *AddCreationTaskOK) GetPayload() *models.AddOrUpdateResult {
	return o.Payload
}

func (o *AddCreationTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AddOrUpdateResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCreationTaskBadRequest creates a AddCreationTaskBadRequest with default headers values
func NewAddCreationTaskBadRequest() *AddCreationTaskBadRequest {
	return &AddCreationTaskBadRequest{}
}

/*AddCreationTaskBadRequest handles this case with default header values.

Malformed querystring or model
*/
type AddCreationTaskBadRequest struct {
	Payload *models.BadRequestError
}

func (o *AddCreationTaskBadRequest) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/ticketCreation][%d] addCreationTaskBadRequest  %+v", 400, o.Payload)
}

func (o *AddCreationTaskBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *AddCreationTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCreationTaskUnauthorized creates a AddCreationTaskUnauthorized with default headers values
func NewAddCreationTaskUnauthorized() *AddCreationTaskUnauthorized {
	return &AddCreationTaskUnauthorized{}
}

/*AddCreationTaskUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type AddCreationTaskUnauthorized struct {
}

func (o *AddCreationTaskUnauthorized) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/ticketCreation][%d] addCreationTaskUnauthorized ", 401)
}

func (o *AddCreationTaskUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddCreationTaskForbidden creates a AddCreationTaskForbidden with default headers values
func NewAddCreationTaskForbidden() *AddCreationTaskForbidden {
	return &AddCreationTaskForbidden{}
}

/*AddCreationTaskForbidden handles this case with default header values.

Requested action is not allowed
*/
type AddCreationTaskForbidden struct {
	Payload *models.ForbiddenError
}

func (o *AddCreationTaskForbidden) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/ticketCreation][%d] addCreationTaskForbidden  %+v", 403, o.Payload)
}

func (o *AddCreationTaskForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *AddCreationTaskForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCreationTaskNotFound creates a AddCreationTaskNotFound with default headers values
func NewAddCreationTaskNotFound() *AddCreationTaskNotFound {
	return &AddCreationTaskNotFound{}
}

/*AddCreationTaskNotFound handles this case with default header values.

Object not found
*/
type AddCreationTaskNotFound struct {
	Payload *models.NotFoundError
}

func (o *AddCreationTaskNotFound) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/ticketCreation][%d] addCreationTaskNotFound  %+v", 404, o.Payload)
}

func (o *AddCreationTaskNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *AddCreationTaskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddCreationTaskTooManyRequests creates a AddCreationTaskTooManyRequests with default headers values
func NewAddCreationTaskTooManyRequests() *AddCreationTaskTooManyRequests {
	return &AddCreationTaskTooManyRequests{}
}

/*AddCreationTaskTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type AddCreationTaskTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *AddCreationTaskTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/ticketCreation][%d] addCreationTaskTooManyRequests  %+v", 429, o.Payload)
}

func (o *AddCreationTaskTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *AddCreationTaskTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
