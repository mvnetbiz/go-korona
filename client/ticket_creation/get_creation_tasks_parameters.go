// Code generated by go-swagger; DO NOT EDIT.

package ticket_creation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetCreationTasksParams creates a new GetCreationTasksParams object
// with the default values initialized.
func NewGetCreationTasksParams() *GetCreationTasksParams {
	var ()
	return &GetCreationTasksParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCreationTasksParamsWithTimeout creates a new GetCreationTasksParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCreationTasksParamsWithTimeout(timeout time.Duration) *GetCreationTasksParams {
	var ()
	return &GetCreationTasksParams{

		timeout: timeout,
	}
}

// NewGetCreationTasksParamsWithContext creates a new GetCreationTasksParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCreationTasksParamsWithContext(ctx context.Context) *GetCreationTasksParams {
	var ()
	return &GetCreationTasksParams{

		Context: ctx,
	}
}

// NewGetCreationTasksParamsWithHTTPClient creates a new GetCreationTasksParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCreationTasksParamsWithHTTPClient(client *http.Client) *GetCreationTasksParams {
	var ()
	return &GetCreationTasksParams{
		HTTPClient: client,
	}
}

/*GetCreationTasksParams contains all the parameters to send to the API endpoint
for the get creation tasks operation typically these are written to a http.Request
*/
type GetCreationTasksParams struct {

	/*CreationTimeFrom
	  creation time from

	*/
	CreationTimeFrom *strfmt.DateTime
	/*CreationTimeTo
	  creation time to

	*/
	CreationTimeTo *strfmt.DateTime
	/*KoronaAccountID
	  account id of the KORONA.cloud account

	*/
	KoronaAccountID string
	/*Statuses
	  creation task statuses

	*/
	Statuses []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get creation tasks params
func (o *GetCreationTasksParams) WithTimeout(timeout time.Duration) *GetCreationTasksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get creation tasks params
func (o *GetCreationTasksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get creation tasks params
func (o *GetCreationTasksParams) WithContext(ctx context.Context) *GetCreationTasksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get creation tasks params
func (o *GetCreationTasksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get creation tasks params
func (o *GetCreationTasksParams) WithHTTPClient(client *http.Client) *GetCreationTasksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get creation tasks params
func (o *GetCreationTasksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreationTimeFrom adds the creationTimeFrom to the get creation tasks params
func (o *GetCreationTasksParams) WithCreationTimeFrom(creationTimeFrom *strfmt.DateTime) *GetCreationTasksParams {
	o.SetCreationTimeFrom(creationTimeFrom)
	return o
}

// SetCreationTimeFrom adds the creationTimeFrom to the get creation tasks params
func (o *GetCreationTasksParams) SetCreationTimeFrom(creationTimeFrom *strfmt.DateTime) {
	o.CreationTimeFrom = creationTimeFrom
}

// WithCreationTimeTo adds the creationTimeTo to the get creation tasks params
func (o *GetCreationTasksParams) WithCreationTimeTo(creationTimeTo *strfmt.DateTime) *GetCreationTasksParams {
	o.SetCreationTimeTo(creationTimeTo)
	return o
}

// SetCreationTimeTo adds the creationTimeTo to the get creation tasks params
func (o *GetCreationTasksParams) SetCreationTimeTo(creationTimeTo *strfmt.DateTime) {
	o.CreationTimeTo = creationTimeTo
}

// WithKoronaAccountID adds the koronaAccountID to the get creation tasks params
func (o *GetCreationTasksParams) WithKoronaAccountID(koronaAccountID string) *GetCreationTasksParams {
	o.SetKoronaAccountID(koronaAccountID)
	return o
}

// SetKoronaAccountID adds the koronaAccountId to the get creation tasks params
func (o *GetCreationTasksParams) SetKoronaAccountID(koronaAccountID string) {
	o.KoronaAccountID = koronaAccountID
}

// WithStatuses adds the statuses to the get creation tasks params
func (o *GetCreationTasksParams) WithStatuses(statuses []string) *GetCreationTasksParams {
	o.SetStatuses(statuses)
	return o
}

// SetStatuses adds the statuses to the get creation tasks params
func (o *GetCreationTasksParams) SetStatuses(statuses []string) {
	o.Statuses = statuses
}

// WriteToRequest writes these params to a swagger request
func (o *GetCreationTasksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CreationTimeFrom != nil {

		// query param creationTimeFrom
		var qrCreationTimeFrom strfmt.DateTime
		if o.CreationTimeFrom != nil {
			qrCreationTimeFrom = *o.CreationTimeFrom
		}
		qCreationTimeFrom := qrCreationTimeFrom.String()
		if qCreationTimeFrom != "" {
			if err := r.SetQueryParam("creationTimeFrom", qCreationTimeFrom); err != nil {
				return err
			}
		}

	}

	if o.CreationTimeTo != nil {

		// query param creationTimeTo
		var qrCreationTimeTo strfmt.DateTime
		if o.CreationTimeTo != nil {
			qrCreationTimeTo = *o.CreationTimeTo
		}
		qCreationTimeTo := qrCreationTimeTo.String()
		if qCreationTimeTo != "" {
			if err := r.SetQueryParam("creationTimeTo", qCreationTimeTo); err != nil {
				return err
			}
		}

	}

	// path param koronaAccountId
	if err := r.SetPathParam("koronaAccountId", o.KoronaAccountID); err != nil {
		return err
	}

	valuesStatuses := o.Statuses

	joinedStatuses := swag.JoinByFormat(valuesStatuses, "multi")
	// query array param statuses
	if err := r.SetQueryParam("statuses", joinedStatuses...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
