// Code generated by go-swagger; DO NOT EDIT.

package receipts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetReceiptReader is a Reader for the GetReceipt structure.
type GetReceiptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReceiptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReceiptOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetReceiptBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetReceiptUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetReceiptForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetReceiptNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetReceiptTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetReceiptOK creates a GetReceiptOK with default headers values
func NewGetReceiptOK() *GetReceiptOK {
	return &GetReceiptOK{}
}

/*GetReceiptOK handles this case with default header values.

successful operation
*/
type GetReceiptOK struct {
	Payload *models.Receipt
}

func (o *GetReceiptOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/receipts/{receiptId}][%d] getReceiptOK  %+v", 200, o.Payload)
}

func (o *GetReceiptOK) GetPayload() *models.Receipt {
	return o.Payload
}

func (o *GetReceiptOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Receipt)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReceiptBadRequest creates a GetReceiptBadRequest with default headers values
func NewGetReceiptBadRequest() *GetReceiptBadRequest {
	return &GetReceiptBadRequest{}
}

/*GetReceiptBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetReceiptBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetReceiptBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/receipts/{receiptId}][%d] getReceiptBadRequest  %+v", 400, o.Payload)
}

func (o *GetReceiptBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetReceiptBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReceiptUnauthorized creates a GetReceiptUnauthorized with default headers values
func NewGetReceiptUnauthorized() *GetReceiptUnauthorized {
	return &GetReceiptUnauthorized{}
}

/*GetReceiptUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetReceiptUnauthorized struct {
}

func (o *GetReceiptUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/receipts/{receiptId}][%d] getReceiptUnauthorized ", 401)
}

func (o *GetReceiptUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetReceiptForbidden creates a GetReceiptForbidden with default headers values
func NewGetReceiptForbidden() *GetReceiptForbidden {
	return &GetReceiptForbidden{}
}

/*GetReceiptForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetReceiptForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetReceiptForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/receipts/{receiptId}][%d] getReceiptForbidden  %+v", 403, o.Payload)
}

func (o *GetReceiptForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetReceiptForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReceiptNotFound creates a GetReceiptNotFound with default headers values
func NewGetReceiptNotFound() *GetReceiptNotFound {
	return &GetReceiptNotFound{}
}

/*GetReceiptNotFound handles this case with default header values.

Object not found
*/
type GetReceiptNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetReceiptNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/receipts/{receiptId}][%d] getReceiptNotFound  %+v", 404, o.Payload)
}

func (o *GetReceiptNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetReceiptNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReceiptTooManyRequests creates a GetReceiptTooManyRequests with default headers values
func NewGetReceiptTooManyRequests() *GetReceiptTooManyRequests {
	return &GetReceiptTooManyRequests{}
}

/*GetReceiptTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetReceiptTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetReceiptTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/receipts/{receiptId}][%d] getReceiptTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetReceiptTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetReceiptTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
