// Code generated by go-swagger; DO NOT EDIT.

package ticketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTicketsParams creates a new GetTicketsParams object
// with the default values initialized.
func NewGetTicketsParams() *GetTicketsParams {
	var ()
	return &GetTicketsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTicketsParamsWithTimeout creates a new GetTicketsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTicketsParamsWithTimeout(timeout time.Duration) *GetTicketsParams {
	var ()
	return &GetTicketsParams{

		timeout: timeout,
	}
}

// NewGetTicketsParamsWithContext creates a new GetTicketsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTicketsParamsWithContext(ctx context.Context) *GetTicketsParams {
	var ()
	return &GetTicketsParams{

		Context: ctx,
	}
}

// NewGetTicketsParamsWithHTTPClient creates a new GetTicketsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTicketsParamsWithHTTPClient(client *http.Client) *GetTicketsParams {
	var ()
	return &GetTicketsParams{
		HTTPClient: client,
	}
}

/*GetTicketsParams contains all the parameters to send to the API endpoint
for the get tickets operation typically these are written to a http.Request
*/
type GetTicketsParams struct {

	/*CreationDateFrom
	  creation date from

	*/
	CreationDateFrom *strfmt.DateTime
	/*CreationDateTo
	  creation date to

	*/
	CreationDateTo *strfmt.DateTime
	/*CustomerNumber
	  customer number

	*/
	CustomerNumber *string
	/*KoronaAccountID
	  account id of the KORONA.cloud account

	*/
	KoronaAccountID string
	/*LoadOwnerImage
	  set true if you want to load the owner's image

	*/
	LoadOwnerImage *bool
	/*Locked
	  is ticket locked

	*/
	Locked *bool
	/*OwnerFirstName
	  first name of owner

	*/
	OwnerFirstName *string
	/*OwnerLastName
	  last name of owner

	*/
	OwnerLastName *string
	/*Page
	  number of the page to fetch

	*/
	Page int32
	/*Size
	  amount of objects to return per page

	*/
	Size int32
	/*TicketNumber
	  ticket number

	*/
	TicketNumber *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get tickets params
func (o *GetTicketsParams) WithTimeout(timeout time.Duration) *GetTicketsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get tickets params
func (o *GetTicketsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get tickets params
func (o *GetTicketsParams) WithContext(ctx context.Context) *GetTicketsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get tickets params
func (o *GetTicketsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get tickets params
func (o *GetTicketsParams) WithHTTPClient(client *http.Client) *GetTicketsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get tickets params
func (o *GetTicketsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreationDateFrom adds the creationDateFrom to the get tickets params
func (o *GetTicketsParams) WithCreationDateFrom(creationDateFrom *strfmt.DateTime) *GetTicketsParams {
	o.SetCreationDateFrom(creationDateFrom)
	return o
}

// SetCreationDateFrom adds the creationDateFrom to the get tickets params
func (o *GetTicketsParams) SetCreationDateFrom(creationDateFrom *strfmt.DateTime) {
	o.CreationDateFrom = creationDateFrom
}

// WithCreationDateTo adds the creationDateTo to the get tickets params
func (o *GetTicketsParams) WithCreationDateTo(creationDateTo *strfmt.DateTime) *GetTicketsParams {
	o.SetCreationDateTo(creationDateTo)
	return o
}

// SetCreationDateTo adds the creationDateTo to the get tickets params
func (o *GetTicketsParams) SetCreationDateTo(creationDateTo *strfmt.DateTime) {
	o.CreationDateTo = creationDateTo
}

// WithCustomerNumber adds the customerNumber to the get tickets params
func (o *GetTicketsParams) WithCustomerNumber(customerNumber *string) *GetTicketsParams {
	o.SetCustomerNumber(customerNumber)
	return o
}

// SetCustomerNumber adds the customerNumber to the get tickets params
func (o *GetTicketsParams) SetCustomerNumber(customerNumber *string) {
	o.CustomerNumber = customerNumber
}

// WithKoronaAccountID adds the koronaAccountID to the get tickets params
func (o *GetTicketsParams) WithKoronaAccountID(koronaAccountID string) *GetTicketsParams {
	o.SetKoronaAccountID(koronaAccountID)
	return o
}

// SetKoronaAccountID adds the koronaAccountId to the get tickets params
func (o *GetTicketsParams) SetKoronaAccountID(koronaAccountID string) {
	o.KoronaAccountID = koronaAccountID
}

// WithLoadOwnerImage adds the loadOwnerImage to the get tickets params
func (o *GetTicketsParams) WithLoadOwnerImage(loadOwnerImage *bool) *GetTicketsParams {
	o.SetLoadOwnerImage(loadOwnerImage)
	return o
}

// SetLoadOwnerImage adds the loadOwnerImage to the get tickets params
func (o *GetTicketsParams) SetLoadOwnerImage(loadOwnerImage *bool) {
	o.LoadOwnerImage = loadOwnerImage
}

// WithLocked adds the locked to the get tickets params
func (o *GetTicketsParams) WithLocked(locked *bool) *GetTicketsParams {
	o.SetLocked(locked)
	return o
}

// SetLocked adds the locked to the get tickets params
func (o *GetTicketsParams) SetLocked(locked *bool) {
	o.Locked = locked
}

// WithOwnerFirstName adds the ownerFirstName to the get tickets params
func (o *GetTicketsParams) WithOwnerFirstName(ownerFirstName *string) *GetTicketsParams {
	o.SetOwnerFirstName(ownerFirstName)
	return o
}

// SetOwnerFirstName adds the ownerFirstName to the get tickets params
func (o *GetTicketsParams) SetOwnerFirstName(ownerFirstName *string) {
	o.OwnerFirstName = ownerFirstName
}

// WithOwnerLastName adds the ownerLastName to the get tickets params
func (o *GetTicketsParams) WithOwnerLastName(ownerLastName *string) *GetTicketsParams {
	o.SetOwnerLastName(ownerLastName)
	return o
}

// SetOwnerLastName adds the ownerLastName to the get tickets params
func (o *GetTicketsParams) SetOwnerLastName(ownerLastName *string) {
	o.OwnerLastName = ownerLastName
}

// WithPage adds the page to the get tickets params
func (o *GetTicketsParams) WithPage(page int32) *GetTicketsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get tickets params
func (o *GetTicketsParams) SetPage(page int32) {
	o.Page = page
}

// WithSize adds the size to the get tickets params
func (o *GetTicketsParams) WithSize(size int32) *GetTicketsParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the get tickets params
func (o *GetTicketsParams) SetSize(size int32) {
	o.Size = size
}

// WithTicketNumber adds the ticketNumber to the get tickets params
func (o *GetTicketsParams) WithTicketNumber(ticketNumber *string) *GetTicketsParams {
	o.SetTicketNumber(ticketNumber)
	return o
}

// SetTicketNumber adds the ticketNumber to the get tickets params
func (o *GetTicketsParams) SetTicketNumber(ticketNumber *string) {
	o.TicketNumber = ticketNumber
}

// WriteToRequest writes these params to a swagger request
func (o *GetTicketsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CreationDateFrom != nil {

		// query param creationDateFrom
		var qrCreationDateFrom strfmt.DateTime
		if o.CreationDateFrom != nil {
			qrCreationDateFrom = *o.CreationDateFrom
		}
		qCreationDateFrom := qrCreationDateFrom.String()
		if qCreationDateFrom != "" {
			if err := r.SetQueryParam("creationDateFrom", qCreationDateFrom); err != nil {
				return err
			}
		}

	}

	if o.CreationDateTo != nil {

		// query param creationDateTo
		var qrCreationDateTo strfmt.DateTime
		if o.CreationDateTo != nil {
			qrCreationDateTo = *o.CreationDateTo
		}
		qCreationDateTo := qrCreationDateTo.String()
		if qCreationDateTo != "" {
			if err := r.SetQueryParam("creationDateTo", qCreationDateTo); err != nil {
				return err
			}
		}

	}

	if o.CustomerNumber != nil {

		// query param customerNumber
		var qrCustomerNumber string
		if o.CustomerNumber != nil {
			qrCustomerNumber = *o.CustomerNumber
		}
		qCustomerNumber := qrCustomerNumber
		if qCustomerNumber != "" {
			if err := r.SetQueryParam("customerNumber", qCustomerNumber); err != nil {
				return err
			}
		}

	}

	// path param koronaAccountId
	if err := r.SetPathParam("koronaAccountId", o.KoronaAccountID); err != nil {
		return err
	}

	if o.LoadOwnerImage != nil {

		// query param loadOwnerImage
		var qrLoadOwnerImage bool
		if o.LoadOwnerImage != nil {
			qrLoadOwnerImage = *o.LoadOwnerImage
		}
		qLoadOwnerImage := swag.FormatBool(qrLoadOwnerImage)
		if qLoadOwnerImage != "" {
			if err := r.SetQueryParam("loadOwnerImage", qLoadOwnerImage); err != nil {
				return err
			}
		}

	}

	if o.Locked != nil {

		// query param locked
		var qrLocked bool
		if o.Locked != nil {
			qrLocked = *o.Locked
		}
		qLocked := swag.FormatBool(qrLocked)
		if qLocked != "" {
			if err := r.SetQueryParam("locked", qLocked); err != nil {
				return err
			}
		}

	}

	if o.OwnerFirstName != nil {

		// query param ownerFirstName
		var qrOwnerFirstName string
		if o.OwnerFirstName != nil {
			qrOwnerFirstName = *o.OwnerFirstName
		}
		qOwnerFirstName := qrOwnerFirstName
		if qOwnerFirstName != "" {
			if err := r.SetQueryParam("ownerFirstName", qOwnerFirstName); err != nil {
				return err
			}
		}

	}

	if o.OwnerLastName != nil {

		// query param ownerLastName
		var qrOwnerLastName string
		if o.OwnerLastName != nil {
			qrOwnerLastName = *o.OwnerLastName
		}
		qOwnerLastName := qrOwnerLastName
		if qOwnerLastName != "" {
			if err := r.SetQueryParam("ownerLastName", qOwnerLastName); err != nil {
				return err
			}
		}

	}

	// query param page
	qrPage := o.Page
	qPage := swag.FormatInt32(qrPage)
	if qPage != "" {
		if err := r.SetQueryParam("page", qPage); err != nil {
			return err
		}
	}

	// query param size
	qrSize := o.Size
	qSize := swag.FormatInt32(qrSize)
	if qSize != "" {
		if err := r.SetQueryParam("size", qSize); err != nil {
			return err
		}
	}

	if o.TicketNumber != nil {

		// query param ticketNumber
		var qrTicketNumber string
		if o.TicketNumber != nil {
			qrTicketNumber = *o.TicketNumber
		}
		qTicketNumber := qrTicketNumber
		if qTicketNumber != "" {
			if err := r.SetQueryParam("ticketNumber", qTicketNumber); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
