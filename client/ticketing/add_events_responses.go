// Code generated by go-swagger; DO NOT EDIT.

package ticketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// AddEventsReader is a Reader for the AddEvents structure.
type AddEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddEventsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddEventsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddEventsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddEventsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAddEventsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddEventsOK creates a AddEventsOK with default headers values
func NewAddEventsOK() *AddEventsOK {
	return &AddEventsOK{}
}

/*AddEventsOK handles this case with default header values.

successful operation
*/
type AddEventsOK struct {
	Payload []*models.AddOrUpdateResult
}

func (o *AddEventsOK) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/events][%d] addEventsOK  %+v", 200, o.Payload)
}

func (o *AddEventsOK) GetPayload() []*models.AddOrUpdateResult {
	return o.Payload
}

func (o *AddEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEventsBadRequest creates a AddEventsBadRequest with default headers values
func NewAddEventsBadRequest() *AddEventsBadRequest {
	return &AddEventsBadRequest{}
}

/*AddEventsBadRequest handles this case with default header values.

Malformed querystring or model
*/
type AddEventsBadRequest struct {
	Payload *models.BadRequestError
}

func (o *AddEventsBadRequest) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/events][%d] addEventsBadRequest  %+v", 400, o.Payload)
}

func (o *AddEventsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *AddEventsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEventsUnauthorized creates a AddEventsUnauthorized with default headers values
func NewAddEventsUnauthorized() *AddEventsUnauthorized {
	return &AddEventsUnauthorized{}
}

/*AddEventsUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type AddEventsUnauthorized struct {
}

func (o *AddEventsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/events][%d] addEventsUnauthorized ", 401)
}

func (o *AddEventsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddEventsForbidden creates a AddEventsForbidden with default headers values
func NewAddEventsForbidden() *AddEventsForbidden {
	return &AddEventsForbidden{}
}

/*AddEventsForbidden handles this case with default header values.

Requested action is not allowed
*/
type AddEventsForbidden struct {
	Payload *models.ForbiddenError
}

func (o *AddEventsForbidden) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/events][%d] addEventsForbidden  %+v", 403, o.Payload)
}

func (o *AddEventsForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *AddEventsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEventsNotFound creates a AddEventsNotFound with default headers values
func NewAddEventsNotFound() *AddEventsNotFound {
	return &AddEventsNotFound{}
}

/*AddEventsNotFound handles this case with default header values.

Object not found
*/
type AddEventsNotFound struct {
	Payload *models.NotFoundError
}

func (o *AddEventsNotFound) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/events][%d] addEventsNotFound  %+v", 404, o.Payload)
}

func (o *AddEventsNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *AddEventsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEventsTooManyRequests creates a AddEventsTooManyRequests with default headers values
func NewAddEventsTooManyRequests() *AddEventsTooManyRequests {
	return &AddEventsTooManyRequests{}
}

/*AddEventsTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type AddEventsTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *AddEventsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/events][%d] addEventsTooManyRequests  %+v", 429, o.Payload)
}

func (o *AddEventsTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *AddEventsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
