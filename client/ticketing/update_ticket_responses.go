// Code generated by go-swagger; DO NOT EDIT.

package ticketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// UpdateTicketReader is a Reader for the UpdateTicket structure.
type UpdateTicketReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateTicketReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateTicketNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateTicketBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateTicketUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateTicketForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateTicketNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateTicketTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateTicketNoContent creates a UpdateTicketNoContent with default headers values
func NewUpdateTicketNoContent() *UpdateTicketNoContent {
	return &UpdateTicketNoContent{}
}

/*UpdateTicketNoContent handles this case with default header values.

Request successful, patch on single resource does not return any content
*/
type UpdateTicketNoContent struct {
}

func (o *UpdateTicketNoContent) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/tickets/{ticketNumber}][%d] updateTicketNoContent ", 204)
}

func (o *UpdateTicketNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateTicketBadRequest creates a UpdateTicketBadRequest with default headers values
func NewUpdateTicketBadRequest() *UpdateTicketBadRequest {
	return &UpdateTicketBadRequest{}
}

/*UpdateTicketBadRequest handles this case with default header values.

Malformed querystring or model
*/
type UpdateTicketBadRequest struct {
	Payload *models.BadRequestError
}

func (o *UpdateTicketBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/tickets/{ticketNumber}][%d] updateTicketBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateTicketBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UpdateTicketBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTicketUnauthorized creates a UpdateTicketUnauthorized with default headers values
func NewUpdateTicketUnauthorized() *UpdateTicketUnauthorized {
	return &UpdateTicketUnauthorized{}
}

/*UpdateTicketUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type UpdateTicketUnauthorized struct {
}

func (o *UpdateTicketUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/tickets/{ticketNumber}][%d] updateTicketUnauthorized ", 401)
}

func (o *UpdateTicketUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateTicketForbidden creates a UpdateTicketForbidden with default headers values
func NewUpdateTicketForbidden() *UpdateTicketForbidden {
	return &UpdateTicketForbidden{}
}

/*UpdateTicketForbidden handles this case with default header values.

Requested action is not allowed
*/
type UpdateTicketForbidden struct {
	Payload *models.ForbiddenError
}

func (o *UpdateTicketForbidden) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/tickets/{ticketNumber}][%d] updateTicketForbidden  %+v", 403, o.Payload)
}

func (o *UpdateTicketForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *UpdateTicketForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTicketNotFound creates a UpdateTicketNotFound with default headers values
func NewUpdateTicketNotFound() *UpdateTicketNotFound {
	return &UpdateTicketNotFound{}
}

/*UpdateTicketNotFound handles this case with default header values.

Object not found
*/
type UpdateTicketNotFound struct {
	Payload *models.NotFoundError
}

func (o *UpdateTicketNotFound) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/tickets/{ticketNumber}][%d] updateTicketNotFound  %+v", 404, o.Payload)
}

func (o *UpdateTicketNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UpdateTicketNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTicketTooManyRequests creates a UpdateTicketTooManyRequests with default headers values
func NewUpdateTicketTooManyRequests() *UpdateTicketTooManyRequests {
	return &UpdateTicketTooManyRequests{}
}

/*UpdateTicketTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type UpdateTicketTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *UpdateTicketTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/tickets/{ticketNumber}][%d] updateTicketTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateTicketTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *UpdateTicketTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
