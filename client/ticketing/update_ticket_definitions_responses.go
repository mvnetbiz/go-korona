// Code generated by go-swagger; DO NOT EDIT.

package ticketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// UpdateTicketDefinitionsReader is a Reader for the UpdateTicketDefinitions structure.
type UpdateTicketDefinitionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateTicketDefinitionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateTicketDefinitionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateTicketDefinitionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateTicketDefinitionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateTicketDefinitionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateTicketDefinitionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateTicketDefinitionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateTicketDefinitionsOK creates a UpdateTicketDefinitionsOK with default headers values
func NewUpdateTicketDefinitionsOK() *UpdateTicketDefinitionsOK {
	return &UpdateTicketDefinitionsOK{}
}

/*UpdateTicketDefinitionsOK handles this case with default header values.

successful operation
*/
type UpdateTicketDefinitionsOK struct {
	Payload []*models.AddOrUpdateResult
}

func (o *UpdateTicketDefinitionsOK) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/ticketDefinitions][%d] updateTicketDefinitionsOK  %+v", 200, o.Payload)
}

func (o *UpdateTicketDefinitionsOK) GetPayload() []*models.AddOrUpdateResult {
	return o.Payload
}

func (o *UpdateTicketDefinitionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTicketDefinitionsBadRequest creates a UpdateTicketDefinitionsBadRequest with default headers values
func NewUpdateTicketDefinitionsBadRequest() *UpdateTicketDefinitionsBadRequest {
	return &UpdateTicketDefinitionsBadRequest{}
}

/*UpdateTicketDefinitionsBadRequest handles this case with default header values.

Malformed querystring or model
*/
type UpdateTicketDefinitionsBadRequest struct {
	Payload *models.BadRequestError
}

func (o *UpdateTicketDefinitionsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/ticketDefinitions][%d] updateTicketDefinitionsBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateTicketDefinitionsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UpdateTicketDefinitionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTicketDefinitionsUnauthorized creates a UpdateTicketDefinitionsUnauthorized with default headers values
func NewUpdateTicketDefinitionsUnauthorized() *UpdateTicketDefinitionsUnauthorized {
	return &UpdateTicketDefinitionsUnauthorized{}
}

/*UpdateTicketDefinitionsUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type UpdateTicketDefinitionsUnauthorized struct {
}

func (o *UpdateTicketDefinitionsUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/ticketDefinitions][%d] updateTicketDefinitionsUnauthorized ", 401)
}

func (o *UpdateTicketDefinitionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateTicketDefinitionsForbidden creates a UpdateTicketDefinitionsForbidden with default headers values
func NewUpdateTicketDefinitionsForbidden() *UpdateTicketDefinitionsForbidden {
	return &UpdateTicketDefinitionsForbidden{}
}

/*UpdateTicketDefinitionsForbidden handles this case with default header values.

Requested action is not allowed
*/
type UpdateTicketDefinitionsForbidden struct {
	Payload *models.ForbiddenError
}

func (o *UpdateTicketDefinitionsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/ticketDefinitions][%d] updateTicketDefinitionsForbidden  %+v", 403, o.Payload)
}

func (o *UpdateTicketDefinitionsForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *UpdateTicketDefinitionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTicketDefinitionsNotFound creates a UpdateTicketDefinitionsNotFound with default headers values
func NewUpdateTicketDefinitionsNotFound() *UpdateTicketDefinitionsNotFound {
	return &UpdateTicketDefinitionsNotFound{}
}

/*UpdateTicketDefinitionsNotFound handles this case with default header values.

Object not found
*/
type UpdateTicketDefinitionsNotFound struct {
	Payload *models.NotFoundError
}

func (o *UpdateTicketDefinitionsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/ticketDefinitions][%d] updateTicketDefinitionsNotFound  %+v", 404, o.Payload)
}

func (o *UpdateTicketDefinitionsNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UpdateTicketDefinitionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTicketDefinitionsTooManyRequests creates a UpdateTicketDefinitionsTooManyRequests with default headers values
func NewUpdateTicketDefinitionsTooManyRequests() *UpdateTicketDefinitionsTooManyRequests {
	return &UpdateTicketDefinitionsTooManyRequests{}
}

/*UpdateTicketDefinitionsTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type UpdateTicketDefinitionsTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *UpdateTicketDefinitionsTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/ticketDefinitions][%d] updateTicketDefinitionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateTicketDefinitionsTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *UpdateTicketDefinitionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
