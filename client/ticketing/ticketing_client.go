// Code generated by go-swagger; DO NOT EDIT.

package ticketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ticketing API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ticketing API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddEvents(params *AddEventsParams, authInfo runtime.ClientAuthInfoWriter) (*AddEventsOK, error)

	AddOrUpdateAttendances(params *AddOrUpdateAttendancesParams, authInfo runtime.ClientAuthInfoWriter) (*AddOrUpdateAttendancesOK, error)

	AddTicketDefinitions(params *AddTicketDefinitionsParams, authInfo runtime.ClientAuthInfoWriter) (*AddTicketDefinitionsOK, error)

	CancelAttendance(params *CancelAttendanceParams, authInfo runtime.ClientAuthInfoWriter) (*CancelAttendanceNoContent, error)

	DeleteEvent(params *DeleteEventParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEventNoContent, error)

	DeleteTicketDefinition(params *DeleteTicketDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTicketDefinitionNoContent, error)

	DeleteTicketDefinitions(params *DeleteTicketDefinitionsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTicketDefinitionsOK, error)

	GetAttendances(params *GetAttendancesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAttendancesOK, *GetAttendancesNoContent, error)

	GetEntryGate(params *GetEntryGateParams, authInfo runtime.ClientAuthInfoWriter) (*GetEntryGateOK, error)

	GetEntryGates(params *GetEntryGatesParams, authInfo runtime.ClientAuthInfoWriter) (*GetEntryGatesOK, *GetEntryGatesNoContent, error)

	GetEvent(params *GetEventParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventOK, error)

	GetEvents(params *GetEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventsOK, *GetEventsNoContent, error)

	GetTicketDefinition(params *GetTicketDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*GetTicketDefinitionOK, error)

	GetTicketDefinitions(params *GetTicketDefinitionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTicketDefinitionsOK, *GetTicketDefinitionsNoContent, error)

	GetTickets(params *GetTicketsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTicketsOK, *GetTicketsNoContent, error)

	LockTicket(params *LockTicketParams, authInfo runtime.ClientAuthInfoWriter) (*LockTicketNoContent, error)

	UnlockTicket(params *UnlockTicketParams, authInfo runtime.ClientAuthInfoWriter) (*UnlockTicketNoContent, error)

	UpdateEvent(params *UpdateEventParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEventNoContent, error)

	UpdateEvents(params *UpdateEventsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEventsOK, error)

	UpdateTicket(params *UpdateTicketParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTicketNoContent, error)

	UpdateTicketDefinitions(params *UpdateTicketDefinitionsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTicketDefinitionsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddEvents adds a batch of new events
*/
func (a *Client) AddEvents(params *AddEventsParams, authInfo runtime.ClientAuthInfoWriter) (*AddEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addEvents",
		Method:             "POST",
		PathPattern:        "/accounts/{koronaAccountId}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddOrUpdateAttendances updates adds attendances
*/
func (a *Client) AddOrUpdateAttendances(params *AddOrUpdateAttendancesParams, authInfo runtime.ClientAuthInfoWriter) (*AddOrUpdateAttendancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddOrUpdateAttendancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addOrUpdateAttendances",
		Method:             "POST",
		PathPattern:        "/accounts/{koronaAccountId}/attendance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddOrUpdateAttendancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddOrUpdateAttendancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addOrUpdateAttendances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddTicketDefinitions adds a batch of new ticket definitions
*/
func (a *Client) AddTicketDefinitions(params *AddTicketDefinitionsParams, authInfo runtime.ClientAuthInfoWriter) (*AddTicketDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTicketDefinitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addTicketDefinitions",
		Method:             "POST",
		PathPattern:        "/accounts/{koronaAccountId}/ticketDefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddTicketDefinitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTicketDefinitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addTicketDefinitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CancelAttendance cancels the attendance
*/
func (a *Client) CancelAttendance(params *CancelAttendanceParams, authInfo runtime.ClientAuthInfoWriter) (*CancelAttendanceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelAttendanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelAttendance",
		Method:             "DELETE",
		PathPattern:        "/accounts/{koronaAccountId}/attendance/{attendanceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelAttendanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelAttendanceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelAttendance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEvent deletes the single event
*/
func (a *Client) DeleteEvent(params *DeleteEventParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEventNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteEvent",
		Method:             "DELETE",
		PathPattern:        "/accounts/{koronaAccountId}/events/{eventId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEventNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTicketDefinition deletes the single ticket definition
*/
func (a *Client) DeleteTicketDefinition(params *DeleteTicketDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTicketDefinitionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTicketDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTicketDefinition",
		Method:             "DELETE",
		PathPattern:        "/accounts/{koronaAccountId}/ticketDefinitions/{ticketDefinitionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTicketDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTicketDefinitionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTicketDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTicketDefinitions deletes a batch of ticket definitions
*/
func (a *Client) DeleteTicketDefinitions(params *DeleteTicketDefinitionsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTicketDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTicketDefinitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTicketDefinitions",
		Method:             "DELETE",
		PathPattern:        "/accounts/{koronaAccountId}/ticketDefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTicketDefinitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTicketDefinitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTicketDefinitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAttendances lists all attendances
*/
func (a *Client) GetAttendances(params *GetAttendancesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAttendancesOK, *GetAttendancesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAttendancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAttendances",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/attendance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAttendancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetAttendancesOK:
		return value, nil, nil
	case *GetAttendancesNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ticketing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEntryGate returns the single entry gate
*/
func (a *Client) GetEntryGate(params *GetEntryGateParams, authInfo runtime.ClientAuthInfoWriter) (*GetEntryGateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEntryGateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEntryGate",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/entryGates/{entryGateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEntryGateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEntryGateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEntryGate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEntryGates lists all entry gates
*/
func (a *Client) GetEntryGates(params *GetEntryGatesParams, authInfo runtime.ClientAuthInfoWriter) (*GetEntryGatesOK, *GetEntryGatesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEntryGatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEntryGates",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/entryGates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEntryGatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetEntryGatesOK:
		return value, nil, nil
	case *GetEntryGatesNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ticketing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEvent returns the single event
*/
func (a *Client) GetEvent(params *GetEventParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEvent",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/events/{eventId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEvents lists all events
*/
func (a *Client) GetEvents(params *GetEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventsOK, *GetEventsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEvents",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetEventsOK:
		return value, nil, nil
	case *GetEventsNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ticketing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTicketDefinition returns the single ticket definition
*/
func (a *Client) GetTicketDefinition(params *GetTicketDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*GetTicketDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTicketDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTicketDefinition",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/ticketDefinitions/{ticketDefinitionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTicketDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTicketDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTicketDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTicketDefinitions lists all ticket definitions
*/
func (a *Client) GetTicketDefinitions(params *GetTicketDefinitionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTicketDefinitionsOK, *GetTicketDefinitionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTicketDefinitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTicketDefinitions",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/ticketDefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTicketDefinitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetTicketDefinitionsOK:
		return value, nil, nil
	case *GetTicketDefinitionsNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ticketing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTickets lists all tickets
*/
func (a *Client) GetTickets(params *GetTicketsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTicketsOK, *GetTicketsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTicketsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTickets",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/tickets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTicketsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetTicketsOK:
		return value, nil, nil
	case *GetTicketsNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ticketing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LockTicket locks the single ticket
*/
func (a *Client) LockTicket(params *LockTicketParams, authInfo runtime.ClientAuthInfoWriter) (*LockTicketNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLockTicketParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "lockTicket",
		Method:             "DELETE",
		PathPattern:        "/accounts/{koronaAccountId}/tickets/{ticketNumber}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LockTicketReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LockTicketNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for lockTicket: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UnlockTicket unlocks the single ticket
*/
func (a *Client) UnlockTicket(params *UnlockTicketParams, authInfo runtime.ClientAuthInfoWriter) (*UnlockTicketNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnlockTicketParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unlockTicket",
		Method:             "POST",
		PathPattern:        "/accounts/{koronaAccountId}/tickets/{ticketNumber}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnlockTicketReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnlockTicketNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unlockTicket: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEvent updates the single event
*/
func (a *Client) UpdateEvent(params *UpdateEventParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEventNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateEvent",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/events/{eventId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEventNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEvents updates a batch of events

  [number] must be set in the objects, otherwise the object cannot be updated
*/
func (a *Client) UpdateEvents(params *UpdateEventsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateEvents",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTicket updates the single ticket
*/
func (a *Client) UpdateTicket(params *UpdateTicketParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTicketNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTicketParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTicket",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/tickets/{ticketNumber}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTicketReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTicketNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTicket: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTicketDefinitions updates a batch of ticket definitions
*/
func (a *Client) UpdateTicketDefinitions(params *UpdateTicketDefinitionsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTicketDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTicketDefinitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTicketDefinitions",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/ticketDefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTicketDefinitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTicketDefinitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTicketDefinitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
