// Code generated by go-swagger; DO NOT EDIT.

package ticketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// AddOrUpdateAttendancesReader is a Reader for the AddOrUpdateAttendances structure.
type AddOrUpdateAttendancesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddOrUpdateAttendancesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddOrUpdateAttendancesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddOrUpdateAttendancesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddOrUpdateAttendancesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddOrUpdateAttendancesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddOrUpdateAttendancesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAddOrUpdateAttendancesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddOrUpdateAttendancesOK creates a AddOrUpdateAttendancesOK with default headers values
func NewAddOrUpdateAttendancesOK() *AddOrUpdateAttendancesOK {
	return &AddOrUpdateAttendancesOK{}
}

/*AddOrUpdateAttendancesOK handles this case with default header values.

successful operation
*/
type AddOrUpdateAttendancesOK struct {
	Payload []*models.AddOrUpdateResult
}

func (o *AddOrUpdateAttendancesOK) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/attendance][%d] addOrUpdateAttendancesOK  %+v", 200, o.Payload)
}

func (o *AddOrUpdateAttendancesOK) GetPayload() []*models.AddOrUpdateResult {
	return o.Payload
}

func (o *AddOrUpdateAttendancesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddOrUpdateAttendancesBadRequest creates a AddOrUpdateAttendancesBadRequest with default headers values
func NewAddOrUpdateAttendancesBadRequest() *AddOrUpdateAttendancesBadRequest {
	return &AddOrUpdateAttendancesBadRequest{}
}

/*AddOrUpdateAttendancesBadRequest handles this case with default header values.

Malformed querystring or model
*/
type AddOrUpdateAttendancesBadRequest struct {
	Payload *models.BadRequestError
}

func (o *AddOrUpdateAttendancesBadRequest) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/attendance][%d] addOrUpdateAttendancesBadRequest  %+v", 400, o.Payload)
}

func (o *AddOrUpdateAttendancesBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *AddOrUpdateAttendancesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddOrUpdateAttendancesUnauthorized creates a AddOrUpdateAttendancesUnauthorized with default headers values
func NewAddOrUpdateAttendancesUnauthorized() *AddOrUpdateAttendancesUnauthorized {
	return &AddOrUpdateAttendancesUnauthorized{}
}

/*AddOrUpdateAttendancesUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type AddOrUpdateAttendancesUnauthorized struct {
}

func (o *AddOrUpdateAttendancesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/attendance][%d] addOrUpdateAttendancesUnauthorized ", 401)
}

func (o *AddOrUpdateAttendancesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddOrUpdateAttendancesForbidden creates a AddOrUpdateAttendancesForbidden with default headers values
func NewAddOrUpdateAttendancesForbidden() *AddOrUpdateAttendancesForbidden {
	return &AddOrUpdateAttendancesForbidden{}
}

/*AddOrUpdateAttendancesForbidden handles this case with default header values.

Requested action is not allowed
*/
type AddOrUpdateAttendancesForbidden struct {
	Payload *models.ForbiddenError
}

func (o *AddOrUpdateAttendancesForbidden) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/attendance][%d] addOrUpdateAttendancesForbidden  %+v", 403, o.Payload)
}

func (o *AddOrUpdateAttendancesForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *AddOrUpdateAttendancesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddOrUpdateAttendancesNotFound creates a AddOrUpdateAttendancesNotFound with default headers values
func NewAddOrUpdateAttendancesNotFound() *AddOrUpdateAttendancesNotFound {
	return &AddOrUpdateAttendancesNotFound{}
}

/*AddOrUpdateAttendancesNotFound handles this case with default header values.

Object not found
*/
type AddOrUpdateAttendancesNotFound struct {
	Payload *models.NotFoundError
}

func (o *AddOrUpdateAttendancesNotFound) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/attendance][%d] addOrUpdateAttendancesNotFound  %+v", 404, o.Payload)
}

func (o *AddOrUpdateAttendancesNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *AddOrUpdateAttendancesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddOrUpdateAttendancesTooManyRequests creates a AddOrUpdateAttendancesTooManyRequests with default headers values
func NewAddOrUpdateAttendancesTooManyRequests() *AddOrUpdateAttendancesTooManyRequests {
	return &AddOrUpdateAttendancesTooManyRequests{}
}

/*AddOrUpdateAttendancesTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type AddOrUpdateAttendancesTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *AddOrUpdateAttendancesTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/attendance][%d] addOrUpdateAttendancesTooManyRequests  %+v", 429, o.Payload)
}

func (o *AddOrUpdateAttendancesTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *AddOrUpdateAttendancesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
