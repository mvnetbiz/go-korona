// Code generated by go-swagger; DO NOT EDIT.

package ticketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetTicketDefinitionReader is a Reader for the GetTicketDefinition structure.
type GetTicketDefinitionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTicketDefinitionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTicketDefinitionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTicketDefinitionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTicketDefinitionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTicketDefinitionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTicketDefinitionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetTicketDefinitionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTicketDefinitionOK creates a GetTicketDefinitionOK with default headers values
func NewGetTicketDefinitionOK() *GetTicketDefinitionOK {
	return &GetTicketDefinitionOK{}
}

/*GetTicketDefinitionOK handles this case with default header values.

successful operation
*/
type GetTicketDefinitionOK struct {
	Payload *models.TicketDefinition
}

func (o *GetTicketDefinitionOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/ticketDefinitions/{ticketDefinitionId}][%d] getTicketDefinitionOK  %+v", 200, o.Payload)
}

func (o *GetTicketDefinitionOK) GetPayload() *models.TicketDefinition {
	return o.Payload
}

func (o *GetTicketDefinitionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TicketDefinition)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTicketDefinitionBadRequest creates a GetTicketDefinitionBadRequest with default headers values
func NewGetTicketDefinitionBadRequest() *GetTicketDefinitionBadRequest {
	return &GetTicketDefinitionBadRequest{}
}

/*GetTicketDefinitionBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetTicketDefinitionBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetTicketDefinitionBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/ticketDefinitions/{ticketDefinitionId}][%d] getTicketDefinitionBadRequest  %+v", 400, o.Payload)
}

func (o *GetTicketDefinitionBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetTicketDefinitionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTicketDefinitionUnauthorized creates a GetTicketDefinitionUnauthorized with default headers values
func NewGetTicketDefinitionUnauthorized() *GetTicketDefinitionUnauthorized {
	return &GetTicketDefinitionUnauthorized{}
}

/*GetTicketDefinitionUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetTicketDefinitionUnauthorized struct {
}

func (o *GetTicketDefinitionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/ticketDefinitions/{ticketDefinitionId}][%d] getTicketDefinitionUnauthorized ", 401)
}

func (o *GetTicketDefinitionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTicketDefinitionForbidden creates a GetTicketDefinitionForbidden with default headers values
func NewGetTicketDefinitionForbidden() *GetTicketDefinitionForbidden {
	return &GetTicketDefinitionForbidden{}
}

/*GetTicketDefinitionForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetTicketDefinitionForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetTicketDefinitionForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/ticketDefinitions/{ticketDefinitionId}][%d] getTicketDefinitionForbidden  %+v", 403, o.Payload)
}

func (o *GetTicketDefinitionForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetTicketDefinitionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTicketDefinitionNotFound creates a GetTicketDefinitionNotFound with default headers values
func NewGetTicketDefinitionNotFound() *GetTicketDefinitionNotFound {
	return &GetTicketDefinitionNotFound{}
}

/*GetTicketDefinitionNotFound handles this case with default header values.

Object not found
*/
type GetTicketDefinitionNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetTicketDefinitionNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/ticketDefinitions/{ticketDefinitionId}][%d] getTicketDefinitionNotFound  %+v", 404, o.Payload)
}

func (o *GetTicketDefinitionNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetTicketDefinitionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTicketDefinitionTooManyRequests creates a GetTicketDefinitionTooManyRequests with default headers values
func NewGetTicketDefinitionTooManyRequests() *GetTicketDefinitionTooManyRequests {
	return &GetTicketDefinitionTooManyRequests{}
}

/*GetTicketDefinitionTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetTicketDefinitionTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetTicketDefinitionTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/ticketDefinitions/{ticketDefinitionId}][%d] getTicketDefinitionTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetTicketDefinitionTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetTicketDefinitionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
