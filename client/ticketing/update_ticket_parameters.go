// Code generated by go-swagger; DO NOT EDIT.

package ticketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUpdateTicketParams creates a new UpdateTicketParams object
// with the default values initialized.
func NewUpdateTicketParams() *UpdateTicketParams {
	var ()
	return &UpdateTicketParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateTicketParamsWithTimeout creates a new UpdateTicketParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateTicketParamsWithTimeout(timeout time.Duration) *UpdateTicketParams {
	var ()
	return &UpdateTicketParams{

		timeout: timeout,
	}
}

// NewUpdateTicketParamsWithContext creates a new UpdateTicketParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateTicketParamsWithContext(ctx context.Context) *UpdateTicketParams {
	var ()
	return &UpdateTicketParams{

		Context: ctx,
	}
}

// NewUpdateTicketParamsWithHTTPClient creates a new UpdateTicketParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateTicketParamsWithHTTPClient(client *http.Client) *UpdateTicketParams {
	var ()
	return &UpdateTicketParams{
		HTTPClient: client,
	}
}

/*UpdateTicketParams contains all the parameters to send to the API endpoint
for the update ticket operation typically these are written to a http.Request
*/
type UpdateTicketParams struct {

	/*FirstName
	  ticket owner's first name

	*/
	FirstName *string
	/*KoronaAccountID
	  account id of the KORONA.cloud account

	*/
	KoronaAccountID string
	/*LastName
	  ticket owner's last name

	*/
	LastName *string
	/*NewTicketNumber
	  new ticket number

	*/
	NewTicketNumber *string
	/*TicketNumber
	  old ticket number

	*/
	TicketNumber string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update ticket params
func (o *UpdateTicketParams) WithTimeout(timeout time.Duration) *UpdateTicketParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update ticket params
func (o *UpdateTicketParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update ticket params
func (o *UpdateTicketParams) WithContext(ctx context.Context) *UpdateTicketParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update ticket params
func (o *UpdateTicketParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update ticket params
func (o *UpdateTicketParams) WithHTTPClient(client *http.Client) *UpdateTicketParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update ticket params
func (o *UpdateTicketParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFirstName adds the firstName to the update ticket params
func (o *UpdateTicketParams) WithFirstName(firstName *string) *UpdateTicketParams {
	o.SetFirstName(firstName)
	return o
}

// SetFirstName adds the firstName to the update ticket params
func (o *UpdateTicketParams) SetFirstName(firstName *string) {
	o.FirstName = firstName
}

// WithKoronaAccountID adds the koronaAccountID to the update ticket params
func (o *UpdateTicketParams) WithKoronaAccountID(koronaAccountID string) *UpdateTicketParams {
	o.SetKoronaAccountID(koronaAccountID)
	return o
}

// SetKoronaAccountID adds the koronaAccountId to the update ticket params
func (o *UpdateTicketParams) SetKoronaAccountID(koronaAccountID string) {
	o.KoronaAccountID = koronaAccountID
}

// WithLastName adds the lastName to the update ticket params
func (o *UpdateTicketParams) WithLastName(lastName *string) *UpdateTicketParams {
	o.SetLastName(lastName)
	return o
}

// SetLastName adds the lastName to the update ticket params
func (o *UpdateTicketParams) SetLastName(lastName *string) {
	o.LastName = lastName
}

// WithNewTicketNumber adds the newTicketNumber to the update ticket params
func (o *UpdateTicketParams) WithNewTicketNumber(newTicketNumber *string) *UpdateTicketParams {
	o.SetNewTicketNumber(newTicketNumber)
	return o
}

// SetNewTicketNumber adds the newTicketNumber to the update ticket params
func (o *UpdateTicketParams) SetNewTicketNumber(newTicketNumber *string) {
	o.NewTicketNumber = newTicketNumber
}

// WithTicketNumber adds the ticketNumber to the update ticket params
func (o *UpdateTicketParams) WithTicketNumber(ticketNumber string) *UpdateTicketParams {
	o.SetTicketNumber(ticketNumber)
	return o
}

// SetTicketNumber adds the ticketNumber to the update ticket params
func (o *UpdateTicketParams) SetTicketNumber(ticketNumber string) {
	o.TicketNumber = ticketNumber
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateTicketParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FirstName != nil {

		// query param firstName
		var qrFirstName string
		if o.FirstName != nil {
			qrFirstName = *o.FirstName
		}
		qFirstName := qrFirstName
		if qFirstName != "" {
			if err := r.SetQueryParam("firstName", qFirstName); err != nil {
				return err
			}
		}

	}

	// path param koronaAccountId
	if err := r.SetPathParam("koronaAccountId", o.KoronaAccountID); err != nil {
		return err
	}

	if o.LastName != nil {

		// query param lastName
		var qrLastName string
		if o.LastName != nil {
			qrLastName = *o.LastName
		}
		qLastName := qrLastName
		if qLastName != "" {
			if err := r.SetQueryParam("lastName", qLastName); err != nil {
				return err
			}
		}

	}

	if o.NewTicketNumber != nil {

		// query param newTicketNumber
		var qrNewTicketNumber string
		if o.NewTicketNumber != nil {
			qrNewTicketNumber = *o.NewTicketNumber
		}
		qNewTicketNumber := qrNewTicketNumber
		if qNewTicketNumber != "" {
			if err := r.SetQueryParam("newTicketNumber", qNewTicketNumber); err != nil {
				return err
			}
		}

	}

	// path param ticketNumber
	if err := r.SetPathParam("ticketNumber", o.TicketNumber); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
