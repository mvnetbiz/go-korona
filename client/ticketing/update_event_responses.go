// Code generated by go-swagger; DO NOT EDIT.

package ticketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// UpdateEventReader is a Reader for the UpdateEvent structure.
type UpdateEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateEventNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateEventBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateEventUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateEventForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateEventNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateEventTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateEventNoContent creates a UpdateEventNoContent with default headers values
func NewUpdateEventNoContent() *UpdateEventNoContent {
	return &UpdateEventNoContent{}
}

/*UpdateEventNoContent handles this case with default header values.

Request successful, patch on single resource does not return any content
*/
type UpdateEventNoContent struct {
}

func (o *UpdateEventNoContent) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/events/{eventId}][%d] updateEventNoContent ", 204)
}

func (o *UpdateEventNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateEventBadRequest creates a UpdateEventBadRequest with default headers values
func NewUpdateEventBadRequest() *UpdateEventBadRequest {
	return &UpdateEventBadRequest{}
}

/*UpdateEventBadRequest handles this case with default header values.

Malformed querystring or model
*/
type UpdateEventBadRequest struct {
	Payload *models.BadRequestError
}

func (o *UpdateEventBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/events/{eventId}][%d] updateEventBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateEventBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UpdateEventBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEventUnauthorized creates a UpdateEventUnauthorized with default headers values
func NewUpdateEventUnauthorized() *UpdateEventUnauthorized {
	return &UpdateEventUnauthorized{}
}

/*UpdateEventUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type UpdateEventUnauthorized struct {
}

func (o *UpdateEventUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/events/{eventId}][%d] updateEventUnauthorized ", 401)
}

func (o *UpdateEventUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateEventForbidden creates a UpdateEventForbidden with default headers values
func NewUpdateEventForbidden() *UpdateEventForbidden {
	return &UpdateEventForbidden{}
}

/*UpdateEventForbidden handles this case with default header values.

Requested action is not allowed
*/
type UpdateEventForbidden struct {
	Payload *models.ForbiddenError
}

func (o *UpdateEventForbidden) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/events/{eventId}][%d] updateEventForbidden  %+v", 403, o.Payload)
}

func (o *UpdateEventForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *UpdateEventForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEventNotFound creates a UpdateEventNotFound with default headers values
func NewUpdateEventNotFound() *UpdateEventNotFound {
	return &UpdateEventNotFound{}
}

/*UpdateEventNotFound handles this case with default header values.

Object not found
*/
type UpdateEventNotFound struct {
	Payload *models.NotFoundError
}

func (o *UpdateEventNotFound) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/events/{eventId}][%d] updateEventNotFound  %+v", 404, o.Payload)
}

func (o *UpdateEventNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UpdateEventNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEventTooManyRequests creates a UpdateEventTooManyRequests with default headers values
func NewUpdateEventTooManyRequests() *UpdateEventTooManyRequests {
	return &UpdateEventTooManyRequests{}
}

/*UpdateEventTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type UpdateEventTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *UpdateEventTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/events/{eventId}][%d] updateEventTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateEventTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *UpdateEventTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
