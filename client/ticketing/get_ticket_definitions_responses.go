// Code generated by go-swagger; DO NOT EDIT.

package ticketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetTicketDefinitionsReader is a Reader for the GetTicketDefinitions structure.
type GetTicketDefinitionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTicketDefinitionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTicketDefinitionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetTicketDefinitionsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTicketDefinitionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTicketDefinitionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTicketDefinitionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTicketDefinitionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetTicketDefinitionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTicketDefinitionsOK creates a GetTicketDefinitionsOK with default headers values
func NewGetTicketDefinitionsOK() *GetTicketDefinitionsOK {
	return &GetTicketDefinitionsOK{}
}

/*GetTicketDefinitionsOK handles this case with default header values.

successful operation
*/
type GetTicketDefinitionsOK struct {
	Payload *models.ResultListTicketDefinition
}

func (o *GetTicketDefinitionsOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/ticketDefinitions][%d] getTicketDefinitionsOK  %+v", 200, o.Payload)
}

func (o *GetTicketDefinitionsOK) GetPayload() *models.ResultListTicketDefinition {
	return o.Payload
}

func (o *GetTicketDefinitionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResultListTicketDefinition)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTicketDefinitionsNoContent creates a GetTicketDefinitionsNoContent with default headers values
func NewGetTicketDefinitionsNoContent() *GetTicketDefinitionsNoContent {
	return &GetTicketDefinitionsNoContent{}
}

/*GetTicketDefinitionsNoContent handles this case with default header values.

Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object.
*/
type GetTicketDefinitionsNoContent struct {
}

func (o *GetTicketDefinitionsNoContent) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/ticketDefinitions][%d] getTicketDefinitionsNoContent ", 204)
}

func (o *GetTicketDefinitionsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTicketDefinitionsBadRequest creates a GetTicketDefinitionsBadRequest with default headers values
func NewGetTicketDefinitionsBadRequest() *GetTicketDefinitionsBadRequest {
	return &GetTicketDefinitionsBadRequest{}
}

/*GetTicketDefinitionsBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetTicketDefinitionsBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetTicketDefinitionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/ticketDefinitions][%d] getTicketDefinitionsBadRequest  %+v", 400, o.Payload)
}

func (o *GetTicketDefinitionsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetTicketDefinitionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTicketDefinitionsUnauthorized creates a GetTicketDefinitionsUnauthorized with default headers values
func NewGetTicketDefinitionsUnauthorized() *GetTicketDefinitionsUnauthorized {
	return &GetTicketDefinitionsUnauthorized{}
}

/*GetTicketDefinitionsUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetTicketDefinitionsUnauthorized struct {
}

func (o *GetTicketDefinitionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/ticketDefinitions][%d] getTicketDefinitionsUnauthorized ", 401)
}

func (o *GetTicketDefinitionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTicketDefinitionsForbidden creates a GetTicketDefinitionsForbidden with default headers values
func NewGetTicketDefinitionsForbidden() *GetTicketDefinitionsForbidden {
	return &GetTicketDefinitionsForbidden{}
}

/*GetTicketDefinitionsForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetTicketDefinitionsForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetTicketDefinitionsForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/ticketDefinitions][%d] getTicketDefinitionsForbidden  %+v", 403, o.Payload)
}

func (o *GetTicketDefinitionsForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetTicketDefinitionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTicketDefinitionsNotFound creates a GetTicketDefinitionsNotFound with default headers values
func NewGetTicketDefinitionsNotFound() *GetTicketDefinitionsNotFound {
	return &GetTicketDefinitionsNotFound{}
}

/*GetTicketDefinitionsNotFound handles this case with default header values.

Object not found
*/
type GetTicketDefinitionsNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetTicketDefinitionsNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/ticketDefinitions][%d] getTicketDefinitionsNotFound  %+v", 404, o.Payload)
}

func (o *GetTicketDefinitionsNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetTicketDefinitionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTicketDefinitionsTooManyRequests creates a GetTicketDefinitionsTooManyRequests with default headers values
func NewGetTicketDefinitionsTooManyRequests() *GetTicketDefinitionsTooManyRequests {
	return &GetTicketDefinitionsTooManyRequests{}
}

/*GetTicketDefinitionsTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetTicketDefinitionsTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetTicketDefinitionsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/ticketDefinitions][%d] getTicketDefinitionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetTicketDefinitionsTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetTicketDefinitionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
