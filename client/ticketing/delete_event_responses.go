// Code generated by go-swagger; DO NOT EDIT.

package ticketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// DeleteEventReader is a Reader for the DeleteEvent structure.
type DeleteEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteEventNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteEventBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteEventUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteEventForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteEventNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteEventTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteEventNoContent creates a DeleteEventNoContent with default headers values
func NewDeleteEventNoContent() *DeleteEventNoContent {
	return &DeleteEventNoContent{}
}

/*DeleteEventNoContent handles this case with default header values.

Request successful, delete on single resource does not return any content
*/
type DeleteEventNoContent struct {
}

func (o *DeleteEventNoContent) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/events/{eventId}][%d] deleteEventNoContent ", 204)
}

func (o *DeleteEventNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteEventBadRequest creates a DeleteEventBadRequest with default headers values
func NewDeleteEventBadRequest() *DeleteEventBadRequest {
	return &DeleteEventBadRequest{}
}

/*DeleteEventBadRequest handles this case with default header values.

Malformed querystring or model
*/
type DeleteEventBadRequest struct {
	Payload *models.BadRequestError
}

func (o *DeleteEventBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/events/{eventId}][%d] deleteEventBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteEventBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *DeleteEventBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteEventUnauthorized creates a DeleteEventUnauthorized with default headers values
func NewDeleteEventUnauthorized() *DeleteEventUnauthorized {
	return &DeleteEventUnauthorized{}
}

/*DeleteEventUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type DeleteEventUnauthorized struct {
}

func (o *DeleteEventUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/events/{eventId}][%d] deleteEventUnauthorized ", 401)
}

func (o *DeleteEventUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteEventForbidden creates a DeleteEventForbidden with default headers values
func NewDeleteEventForbidden() *DeleteEventForbidden {
	return &DeleteEventForbidden{}
}

/*DeleteEventForbidden handles this case with default header values.

Requested action is not allowed
*/
type DeleteEventForbidden struct {
	Payload *models.ForbiddenError
}

func (o *DeleteEventForbidden) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/events/{eventId}][%d] deleteEventForbidden  %+v", 403, o.Payload)
}

func (o *DeleteEventForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *DeleteEventForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteEventNotFound creates a DeleteEventNotFound with default headers values
func NewDeleteEventNotFound() *DeleteEventNotFound {
	return &DeleteEventNotFound{}
}

/*DeleteEventNotFound handles this case with default header values.

Object not found
*/
type DeleteEventNotFound struct {
	Payload *models.NotFoundError
}

func (o *DeleteEventNotFound) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/events/{eventId}][%d] deleteEventNotFound  %+v", 404, o.Payload)
}

func (o *DeleteEventNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *DeleteEventNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteEventTooManyRequests creates a DeleteEventTooManyRequests with default headers values
func NewDeleteEventTooManyRequests() *DeleteEventTooManyRequests {
	return &DeleteEventTooManyRequests{}
}

/*DeleteEventTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type DeleteEventTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *DeleteEventTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/events/{eventId}][%d] deleteEventTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteEventTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *DeleteEventTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
