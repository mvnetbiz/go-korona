// Code generated by go-swagger; DO NOT EDIT.

package ticketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// UnlockTicketReader is a Reader for the UnlockTicket structure.
type UnlockTicketReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UnlockTicketReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUnlockTicketNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUnlockTicketBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUnlockTicketUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUnlockTicketForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUnlockTicketNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUnlockTicketTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUnlockTicketNoContent creates a UnlockTicketNoContent with default headers values
func NewUnlockTicketNoContent() *UnlockTicketNoContent {
	return &UnlockTicketNoContent{}
}

/*UnlockTicketNoContent handles this case with default header values.

Request successful, delete on single resource does not return any content
*/
type UnlockTicketNoContent struct {
}

func (o *UnlockTicketNoContent) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/tickets/{ticketNumber}][%d] unlockTicketNoContent ", 204)
}

func (o *UnlockTicketNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUnlockTicketBadRequest creates a UnlockTicketBadRequest with default headers values
func NewUnlockTicketBadRequest() *UnlockTicketBadRequest {
	return &UnlockTicketBadRequest{}
}

/*UnlockTicketBadRequest handles this case with default header values.

Malformed querystring or model
*/
type UnlockTicketBadRequest struct {
	Payload *models.BadRequestError
}

func (o *UnlockTicketBadRequest) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/tickets/{ticketNumber}][%d] unlockTicketBadRequest  %+v", 400, o.Payload)
}

func (o *UnlockTicketBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UnlockTicketBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlockTicketUnauthorized creates a UnlockTicketUnauthorized with default headers values
func NewUnlockTicketUnauthorized() *UnlockTicketUnauthorized {
	return &UnlockTicketUnauthorized{}
}

/*UnlockTicketUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type UnlockTicketUnauthorized struct {
}

func (o *UnlockTicketUnauthorized) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/tickets/{ticketNumber}][%d] unlockTicketUnauthorized ", 401)
}

func (o *UnlockTicketUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUnlockTicketForbidden creates a UnlockTicketForbidden with default headers values
func NewUnlockTicketForbidden() *UnlockTicketForbidden {
	return &UnlockTicketForbidden{}
}

/*UnlockTicketForbidden handles this case with default header values.

Requested action is not allowed
*/
type UnlockTicketForbidden struct {
	Payload *models.ForbiddenError
}

func (o *UnlockTicketForbidden) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/tickets/{ticketNumber}][%d] unlockTicketForbidden  %+v", 403, o.Payload)
}

func (o *UnlockTicketForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *UnlockTicketForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlockTicketNotFound creates a UnlockTicketNotFound with default headers values
func NewUnlockTicketNotFound() *UnlockTicketNotFound {
	return &UnlockTicketNotFound{}
}

/*UnlockTicketNotFound handles this case with default header values.

Object not found
*/
type UnlockTicketNotFound struct {
	Payload *models.NotFoundError
}

func (o *UnlockTicketNotFound) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/tickets/{ticketNumber}][%d] unlockTicketNotFound  %+v", 404, o.Payload)
}

func (o *UnlockTicketNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UnlockTicketNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlockTicketTooManyRequests creates a UnlockTicketTooManyRequests with default headers values
func NewUnlockTicketTooManyRequests() *UnlockTicketTooManyRequests {
	return &UnlockTicketTooManyRequests{}
}

/*UnlockTicketTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type UnlockTicketTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *UnlockTicketTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /accounts/{koronaAccountId}/tickets/{ticketNumber}][%d] unlockTicketTooManyRequests  %+v", 429, o.Payload)
}

func (o *UnlockTicketTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *UnlockTicketTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
