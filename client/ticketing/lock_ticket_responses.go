// Code generated by go-swagger; DO NOT EDIT.

package ticketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// LockTicketReader is a Reader for the LockTicket structure.
type LockTicketReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LockTicketReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewLockTicketNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLockTicketBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewLockTicketUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLockTicketForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLockTicketNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewLockTicketTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewLockTicketNoContent creates a LockTicketNoContent with default headers values
func NewLockTicketNoContent() *LockTicketNoContent {
	return &LockTicketNoContent{}
}

/*LockTicketNoContent handles this case with default header values.

Request successful, delete on single resource does not return any content
*/
type LockTicketNoContent struct {
}

func (o *LockTicketNoContent) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/tickets/{ticketNumber}][%d] lockTicketNoContent ", 204)
}

func (o *LockTicketNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLockTicketBadRequest creates a LockTicketBadRequest with default headers values
func NewLockTicketBadRequest() *LockTicketBadRequest {
	return &LockTicketBadRequest{}
}

/*LockTicketBadRequest handles this case with default header values.

Malformed querystring or model
*/
type LockTicketBadRequest struct {
	Payload *models.BadRequestError
}

func (o *LockTicketBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/tickets/{ticketNumber}][%d] lockTicketBadRequest  %+v", 400, o.Payload)
}

func (o *LockTicketBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *LockTicketBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLockTicketUnauthorized creates a LockTicketUnauthorized with default headers values
func NewLockTicketUnauthorized() *LockTicketUnauthorized {
	return &LockTicketUnauthorized{}
}

/*LockTicketUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type LockTicketUnauthorized struct {
}

func (o *LockTicketUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/tickets/{ticketNumber}][%d] lockTicketUnauthorized ", 401)
}

func (o *LockTicketUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLockTicketForbidden creates a LockTicketForbidden with default headers values
func NewLockTicketForbidden() *LockTicketForbidden {
	return &LockTicketForbidden{}
}

/*LockTicketForbidden handles this case with default header values.

Requested action is not allowed
*/
type LockTicketForbidden struct {
	Payload *models.ForbiddenError
}

func (o *LockTicketForbidden) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/tickets/{ticketNumber}][%d] lockTicketForbidden  %+v", 403, o.Payload)
}

func (o *LockTicketForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *LockTicketForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLockTicketNotFound creates a LockTicketNotFound with default headers values
func NewLockTicketNotFound() *LockTicketNotFound {
	return &LockTicketNotFound{}
}

/*LockTicketNotFound handles this case with default header values.

Object not found
*/
type LockTicketNotFound struct {
	Payload *models.NotFoundError
}

func (o *LockTicketNotFound) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/tickets/{ticketNumber}][%d] lockTicketNotFound  %+v", 404, o.Payload)
}

func (o *LockTicketNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *LockTicketNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLockTicketTooManyRequests creates a LockTicketTooManyRequests with default headers values
func NewLockTicketTooManyRequests() *LockTicketTooManyRequests {
	return &LockTicketTooManyRequests{}
}

/*LockTicketTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type LockTicketTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *LockTicketTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /accounts/{koronaAccountId}/tickets/{ticketNumber}][%d] lockTicketTooManyRequests  %+v", 429, o.Payload)
}

func (o *LockTicketTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *LockTicketTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
