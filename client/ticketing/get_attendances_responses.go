// Code generated by go-swagger; DO NOT EDIT.

package ticketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetAttendancesReader is a Reader for the GetAttendances structure.
type GetAttendancesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAttendancesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAttendancesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetAttendancesNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAttendancesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAttendancesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAttendancesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAttendancesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAttendancesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAttendancesOK creates a GetAttendancesOK with default headers values
func NewGetAttendancesOK() *GetAttendancesOK {
	return &GetAttendancesOK{}
}

/*GetAttendancesOK handles this case with default header values.

successful operation
*/
type GetAttendancesOK struct {
	Payload *models.ResultListAttendance
}

func (o *GetAttendancesOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/attendance][%d] getAttendancesOK  %+v", 200, o.Payload)
}

func (o *GetAttendancesOK) GetPayload() *models.ResultListAttendance {
	return o.Payload
}

func (o *GetAttendancesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResultListAttendance)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAttendancesNoContent creates a GetAttendancesNoContent with default headers values
func NewGetAttendancesNoContent() *GetAttendancesNoContent {
	return &GetAttendancesNoContent{}
}

/*GetAttendancesNoContent handles this case with default header values.

Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object.
*/
type GetAttendancesNoContent struct {
}

func (o *GetAttendancesNoContent) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/attendance][%d] getAttendancesNoContent ", 204)
}

func (o *GetAttendancesNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAttendancesBadRequest creates a GetAttendancesBadRequest with default headers values
func NewGetAttendancesBadRequest() *GetAttendancesBadRequest {
	return &GetAttendancesBadRequest{}
}

/*GetAttendancesBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetAttendancesBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetAttendancesBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/attendance][%d] getAttendancesBadRequest  %+v", 400, o.Payload)
}

func (o *GetAttendancesBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetAttendancesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAttendancesUnauthorized creates a GetAttendancesUnauthorized with default headers values
func NewGetAttendancesUnauthorized() *GetAttendancesUnauthorized {
	return &GetAttendancesUnauthorized{}
}

/*GetAttendancesUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetAttendancesUnauthorized struct {
}

func (o *GetAttendancesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/attendance][%d] getAttendancesUnauthorized ", 401)
}

func (o *GetAttendancesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAttendancesForbidden creates a GetAttendancesForbidden with default headers values
func NewGetAttendancesForbidden() *GetAttendancesForbidden {
	return &GetAttendancesForbidden{}
}

/*GetAttendancesForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetAttendancesForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetAttendancesForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/attendance][%d] getAttendancesForbidden  %+v", 403, o.Payload)
}

func (o *GetAttendancesForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetAttendancesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAttendancesNotFound creates a GetAttendancesNotFound with default headers values
func NewGetAttendancesNotFound() *GetAttendancesNotFound {
	return &GetAttendancesNotFound{}
}

/*GetAttendancesNotFound handles this case with default header values.

Object not found
*/
type GetAttendancesNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetAttendancesNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/attendance][%d] getAttendancesNotFound  %+v", 404, o.Payload)
}

func (o *GetAttendancesNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetAttendancesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAttendancesTooManyRequests creates a GetAttendancesTooManyRequests with default headers values
func NewGetAttendancesTooManyRequests() *GetAttendancesTooManyRequests {
	return &GetAttendancesTooManyRequests{}
}

/*GetAttendancesTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetAttendancesTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetAttendancesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/attendance][%d] getAttendancesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAttendancesTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetAttendancesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
