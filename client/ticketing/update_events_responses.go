// Code generated by go-swagger; DO NOT EDIT.

package ticketing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// UpdateEventsReader is a Reader for the UpdateEvents structure.
type UpdateEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateEventsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateEventsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateEventsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateEventsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateEventsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateEventsOK creates a UpdateEventsOK with default headers values
func NewUpdateEventsOK() *UpdateEventsOK {
	return &UpdateEventsOK{}
}

/*UpdateEventsOK handles this case with default header values.

successful operation
*/
type UpdateEventsOK struct {
	Payload []*models.AddOrUpdateResult
}

func (o *UpdateEventsOK) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/events][%d] updateEventsOK  %+v", 200, o.Payload)
}

func (o *UpdateEventsOK) GetPayload() []*models.AddOrUpdateResult {
	return o.Payload
}

func (o *UpdateEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEventsBadRequest creates a UpdateEventsBadRequest with default headers values
func NewUpdateEventsBadRequest() *UpdateEventsBadRequest {
	return &UpdateEventsBadRequest{}
}

/*UpdateEventsBadRequest handles this case with default header values.

Malformed querystring or model
*/
type UpdateEventsBadRequest struct {
	Payload *models.BadRequestError
}

func (o *UpdateEventsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/events][%d] updateEventsBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateEventsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UpdateEventsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEventsUnauthorized creates a UpdateEventsUnauthorized with default headers values
func NewUpdateEventsUnauthorized() *UpdateEventsUnauthorized {
	return &UpdateEventsUnauthorized{}
}

/*UpdateEventsUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type UpdateEventsUnauthorized struct {
}

func (o *UpdateEventsUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/events][%d] updateEventsUnauthorized ", 401)
}

func (o *UpdateEventsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateEventsForbidden creates a UpdateEventsForbidden with default headers values
func NewUpdateEventsForbidden() *UpdateEventsForbidden {
	return &UpdateEventsForbidden{}
}

/*UpdateEventsForbidden handles this case with default header values.

Requested action is not allowed
*/
type UpdateEventsForbidden struct {
	Payload *models.ForbiddenError
}

func (o *UpdateEventsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/events][%d] updateEventsForbidden  %+v", 403, o.Payload)
}

func (o *UpdateEventsForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *UpdateEventsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEventsNotFound creates a UpdateEventsNotFound with default headers values
func NewUpdateEventsNotFound() *UpdateEventsNotFound {
	return &UpdateEventsNotFound{}
}

/*UpdateEventsNotFound handles this case with default header values.

Object not found
*/
type UpdateEventsNotFound struct {
	Payload *models.NotFoundError
}

func (o *UpdateEventsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/events][%d] updateEventsNotFound  %+v", 404, o.Payload)
}

func (o *UpdateEventsNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UpdateEventsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEventsTooManyRequests creates a UpdateEventsTooManyRequests with default headers values
func NewUpdateEventsTooManyRequests() *UpdateEventsTooManyRequests {
	return &UpdateEventsTooManyRequests{}
}

/*UpdateEventsTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type UpdateEventsTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *UpdateEventsTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/events][%d] updateEventsTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateEventsTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *UpdateEventsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
