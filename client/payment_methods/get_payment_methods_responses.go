// Code generated by go-swagger; DO NOT EDIT.

package payment_methods

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetPaymentMethodsReader is a Reader for the GetPaymentMethods structure.
type GetPaymentMethodsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPaymentMethodsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPaymentMethodsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetPaymentMethodsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPaymentMethodsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetPaymentMethodsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPaymentMethodsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPaymentMethodsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetPaymentMethodsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPaymentMethodsOK creates a GetPaymentMethodsOK with default headers values
func NewGetPaymentMethodsOK() *GetPaymentMethodsOK {
	return &GetPaymentMethodsOK{}
}

/*GetPaymentMethodsOK handles this case with default header values.

successful operation
*/
type GetPaymentMethodsOK struct {
	Payload *models.ResultListPaymentMethod
}

func (o *GetPaymentMethodsOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/paymentMethods][%d] getPaymentMethodsOK  %+v", 200, o.Payload)
}

func (o *GetPaymentMethodsOK) GetPayload() *models.ResultListPaymentMethod {
	return o.Payload
}

func (o *GetPaymentMethodsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResultListPaymentMethod)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentMethodsNoContent creates a GetPaymentMethodsNoContent with default headers values
func NewGetPaymentMethodsNoContent() *GetPaymentMethodsNoContent {
	return &GetPaymentMethodsNoContent{}
}

/*GetPaymentMethodsNoContent handles this case with default header values.

Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object.
*/
type GetPaymentMethodsNoContent struct {
}

func (o *GetPaymentMethodsNoContent) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/paymentMethods][%d] getPaymentMethodsNoContent ", 204)
}

func (o *GetPaymentMethodsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPaymentMethodsBadRequest creates a GetPaymentMethodsBadRequest with default headers values
func NewGetPaymentMethodsBadRequest() *GetPaymentMethodsBadRequest {
	return &GetPaymentMethodsBadRequest{}
}

/*GetPaymentMethodsBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetPaymentMethodsBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetPaymentMethodsBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/paymentMethods][%d] getPaymentMethodsBadRequest  %+v", 400, o.Payload)
}

func (o *GetPaymentMethodsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetPaymentMethodsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentMethodsUnauthorized creates a GetPaymentMethodsUnauthorized with default headers values
func NewGetPaymentMethodsUnauthorized() *GetPaymentMethodsUnauthorized {
	return &GetPaymentMethodsUnauthorized{}
}

/*GetPaymentMethodsUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetPaymentMethodsUnauthorized struct {
}

func (o *GetPaymentMethodsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/paymentMethods][%d] getPaymentMethodsUnauthorized ", 401)
}

func (o *GetPaymentMethodsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPaymentMethodsForbidden creates a GetPaymentMethodsForbidden with default headers values
func NewGetPaymentMethodsForbidden() *GetPaymentMethodsForbidden {
	return &GetPaymentMethodsForbidden{}
}

/*GetPaymentMethodsForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetPaymentMethodsForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetPaymentMethodsForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/paymentMethods][%d] getPaymentMethodsForbidden  %+v", 403, o.Payload)
}

func (o *GetPaymentMethodsForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetPaymentMethodsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentMethodsNotFound creates a GetPaymentMethodsNotFound with default headers values
func NewGetPaymentMethodsNotFound() *GetPaymentMethodsNotFound {
	return &GetPaymentMethodsNotFound{}
}

/*GetPaymentMethodsNotFound handles this case with default header values.

Object not found
*/
type GetPaymentMethodsNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetPaymentMethodsNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/paymentMethods][%d] getPaymentMethodsNotFound  %+v", 404, o.Payload)
}

func (o *GetPaymentMethodsNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetPaymentMethodsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentMethodsTooManyRequests creates a GetPaymentMethodsTooManyRequests with default headers values
func NewGetPaymentMethodsTooManyRequests() *GetPaymentMethodsTooManyRequests {
	return &GetPaymentMethodsTooManyRequests{}
}

/*GetPaymentMethodsTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetPaymentMethodsTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetPaymentMethodsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/paymentMethods][%d] getPaymentMethodsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetPaymentMethodsTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetPaymentMethodsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
