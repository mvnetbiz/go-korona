// Code generated by go-swagger; DO NOT EDIT.

package payment_methods

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetPaymentMethodReader is a Reader for the GetPaymentMethod structure.
type GetPaymentMethodReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPaymentMethodReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPaymentMethodOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPaymentMethodBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetPaymentMethodUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPaymentMethodForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPaymentMethodNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetPaymentMethodTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPaymentMethodOK creates a GetPaymentMethodOK with default headers values
func NewGetPaymentMethodOK() *GetPaymentMethodOK {
	return &GetPaymentMethodOK{}
}

/*GetPaymentMethodOK handles this case with default header values.

successful operation
*/
type GetPaymentMethodOK struct {
	Payload *models.PaymentMethod
}

func (o *GetPaymentMethodOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/paymentMethods/{paymentMethodId}][%d] getPaymentMethodOK  %+v", 200, o.Payload)
}

func (o *GetPaymentMethodOK) GetPayload() *models.PaymentMethod {
	return o.Payload
}

func (o *GetPaymentMethodOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PaymentMethod)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentMethodBadRequest creates a GetPaymentMethodBadRequest with default headers values
func NewGetPaymentMethodBadRequest() *GetPaymentMethodBadRequest {
	return &GetPaymentMethodBadRequest{}
}

/*GetPaymentMethodBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetPaymentMethodBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetPaymentMethodBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/paymentMethods/{paymentMethodId}][%d] getPaymentMethodBadRequest  %+v", 400, o.Payload)
}

func (o *GetPaymentMethodBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetPaymentMethodBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentMethodUnauthorized creates a GetPaymentMethodUnauthorized with default headers values
func NewGetPaymentMethodUnauthorized() *GetPaymentMethodUnauthorized {
	return &GetPaymentMethodUnauthorized{}
}

/*GetPaymentMethodUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetPaymentMethodUnauthorized struct {
}

func (o *GetPaymentMethodUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/paymentMethods/{paymentMethodId}][%d] getPaymentMethodUnauthorized ", 401)
}

func (o *GetPaymentMethodUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPaymentMethodForbidden creates a GetPaymentMethodForbidden with default headers values
func NewGetPaymentMethodForbidden() *GetPaymentMethodForbidden {
	return &GetPaymentMethodForbidden{}
}

/*GetPaymentMethodForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetPaymentMethodForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetPaymentMethodForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/paymentMethods/{paymentMethodId}][%d] getPaymentMethodForbidden  %+v", 403, o.Payload)
}

func (o *GetPaymentMethodForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetPaymentMethodForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentMethodNotFound creates a GetPaymentMethodNotFound with default headers values
func NewGetPaymentMethodNotFound() *GetPaymentMethodNotFound {
	return &GetPaymentMethodNotFound{}
}

/*GetPaymentMethodNotFound handles this case with default header values.

Object not found
*/
type GetPaymentMethodNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetPaymentMethodNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/paymentMethods/{paymentMethodId}][%d] getPaymentMethodNotFound  %+v", 404, o.Payload)
}

func (o *GetPaymentMethodNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetPaymentMethodNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentMethodTooManyRequests creates a GetPaymentMethodTooManyRequests with default headers values
func NewGetPaymentMethodTooManyRequests() *GetPaymentMethodTooManyRequests {
	return &GetPaymentMethodTooManyRequests{}
}

/*GetPaymentMethodTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetPaymentMethodTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetPaymentMethodTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/paymentMethods/{paymentMethodId}][%d] getPaymentMethodTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetPaymentMethodTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetPaymentMethodTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
