// Code generated by go-swagger; DO NOT EDIT.

package additional_receipt_info_types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetAdditionalReceiptInfoTypesReader is a Reader for the GetAdditionalReceiptInfoTypes structure.
type GetAdditionalReceiptInfoTypesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAdditionalReceiptInfoTypesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAdditionalReceiptInfoTypesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetAdditionalReceiptInfoTypesNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAdditionalReceiptInfoTypesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAdditionalReceiptInfoTypesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAdditionalReceiptInfoTypesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAdditionalReceiptInfoTypesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAdditionalReceiptInfoTypesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAdditionalReceiptInfoTypesOK creates a GetAdditionalReceiptInfoTypesOK with default headers values
func NewGetAdditionalReceiptInfoTypesOK() *GetAdditionalReceiptInfoTypesOK {
	return &GetAdditionalReceiptInfoTypesOK{}
}

/*GetAdditionalReceiptInfoTypesOK handles this case with default header values.

successful operation
*/
type GetAdditionalReceiptInfoTypesOK struct {
	Payload *models.ResultListAdditionalReceiptInfoType
}

func (o *GetAdditionalReceiptInfoTypesOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/additionalReceiptInfoTypes][%d] getAdditionalReceiptInfoTypesOK  %+v", 200, o.Payload)
}

func (o *GetAdditionalReceiptInfoTypesOK) GetPayload() *models.ResultListAdditionalReceiptInfoType {
	return o.Payload
}

func (o *GetAdditionalReceiptInfoTypesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResultListAdditionalReceiptInfoType)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalReceiptInfoTypesNoContent creates a GetAdditionalReceiptInfoTypesNoContent with default headers values
func NewGetAdditionalReceiptInfoTypesNoContent() *GetAdditionalReceiptInfoTypesNoContent {
	return &GetAdditionalReceiptInfoTypesNoContent{}
}

/*GetAdditionalReceiptInfoTypesNoContent handles this case with default header values.

Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object.
*/
type GetAdditionalReceiptInfoTypesNoContent struct {
}

func (o *GetAdditionalReceiptInfoTypesNoContent) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/additionalReceiptInfoTypes][%d] getAdditionalReceiptInfoTypesNoContent ", 204)
}

func (o *GetAdditionalReceiptInfoTypesNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAdditionalReceiptInfoTypesBadRequest creates a GetAdditionalReceiptInfoTypesBadRequest with default headers values
func NewGetAdditionalReceiptInfoTypesBadRequest() *GetAdditionalReceiptInfoTypesBadRequest {
	return &GetAdditionalReceiptInfoTypesBadRequest{}
}

/*GetAdditionalReceiptInfoTypesBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetAdditionalReceiptInfoTypesBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetAdditionalReceiptInfoTypesBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/additionalReceiptInfoTypes][%d] getAdditionalReceiptInfoTypesBadRequest  %+v", 400, o.Payload)
}

func (o *GetAdditionalReceiptInfoTypesBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetAdditionalReceiptInfoTypesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalReceiptInfoTypesUnauthorized creates a GetAdditionalReceiptInfoTypesUnauthorized with default headers values
func NewGetAdditionalReceiptInfoTypesUnauthorized() *GetAdditionalReceiptInfoTypesUnauthorized {
	return &GetAdditionalReceiptInfoTypesUnauthorized{}
}

/*GetAdditionalReceiptInfoTypesUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetAdditionalReceiptInfoTypesUnauthorized struct {
}

func (o *GetAdditionalReceiptInfoTypesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/additionalReceiptInfoTypes][%d] getAdditionalReceiptInfoTypesUnauthorized ", 401)
}

func (o *GetAdditionalReceiptInfoTypesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAdditionalReceiptInfoTypesForbidden creates a GetAdditionalReceiptInfoTypesForbidden with default headers values
func NewGetAdditionalReceiptInfoTypesForbidden() *GetAdditionalReceiptInfoTypesForbidden {
	return &GetAdditionalReceiptInfoTypesForbidden{}
}

/*GetAdditionalReceiptInfoTypesForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetAdditionalReceiptInfoTypesForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetAdditionalReceiptInfoTypesForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/additionalReceiptInfoTypes][%d] getAdditionalReceiptInfoTypesForbidden  %+v", 403, o.Payload)
}

func (o *GetAdditionalReceiptInfoTypesForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetAdditionalReceiptInfoTypesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalReceiptInfoTypesNotFound creates a GetAdditionalReceiptInfoTypesNotFound with default headers values
func NewGetAdditionalReceiptInfoTypesNotFound() *GetAdditionalReceiptInfoTypesNotFound {
	return &GetAdditionalReceiptInfoTypesNotFound{}
}

/*GetAdditionalReceiptInfoTypesNotFound handles this case with default header values.

Object not found
*/
type GetAdditionalReceiptInfoTypesNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetAdditionalReceiptInfoTypesNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/additionalReceiptInfoTypes][%d] getAdditionalReceiptInfoTypesNotFound  %+v", 404, o.Payload)
}

func (o *GetAdditionalReceiptInfoTypesNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetAdditionalReceiptInfoTypesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalReceiptInfoTypesTooManyRequests creates a GetAdditionalReceiptInfoTypesTooManyRequests with default headers values
func NewGetAdditionalReceiptInfoTypesTooManyRequests() *GetAdditionalReceiptInfoTypesTooManyRequests {
	return &GetAdditionalReceiptInfoTypesTooManyRequests{}
}

/*GetAdditionalReceiptInfoTypesTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetAdditionalReceiptInfoTypesTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetAdditionalReceiptInfoTypesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/additionalReceiptInfoTypes][%d] getAdditionalReceiptInfoTypesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAdditionalReceiptInfoTypesTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetAdditionalReceiptInfoTypesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
