// Code generated by go-swagger; DO NOT EDIT.

package statistics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetRevenueHourlyReader is a Reader for the GetRevenueHourly structure.
type GetRevenueHourlyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRevenueHourlyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRevenueHourlyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRevenueHourlyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRevenueHourlyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRevenueHourlyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRevenueHourlyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRevenueHourlyTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetRevenueHourlyOK creates a GetRevenueHourlyOK with default headers values
func NewGetRevenueHourlyOK() *GetRevenueHourlyOK {
	return &GetRevenueHourlyOK{}
}

/*GetRevenueHourlyOK handles this case with default header values.

successful operation
*/
type GetRevenueHourlyOK struct {
	Payload *models.StatisticMapStringRevenueData
}

func (o *GetRevenueHourlyOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/statistics/revenueDataHourly][%d] getRevenueHourlyOK  %+v", 200, o.Payload)
}

func (o *GetRevenueHourlyOK) GetPayload() *models.StatisticMapStringRevenueData {
	return o.Payload
}

func (o *GetRevenueHourlyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StatisticMapStringRevenueData)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevenueHourlyBadRequest creates a GetRevenueHourlyBadRequest with default headers values
func NewGetRevenueHourlyBadRequest() *GetRevenueHourlyBadRequest {
	return &GetRevenueHourlyBadRequest{}
}

/*GetRevenueHourlyBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetRevenueHourlyBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetRevenueHourlyBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/statistics/revenueDataHourly][%d] getRevenueHourlyBadRequest  %+v", 400, o.Payload)
}

func (o *GetRevenueHourlyBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetRevenueHourlyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevenueHourlyUnauthorized creates a GetRevenueHourlyUnauthorized with default headers values
func NewGetRevenueHourlyUnauthorized() *GetRevenueHourlyUnauthorized {
	return &GetRevenueHourlyUnauthorized{}
}

/*GetRevenueHourlyUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetRevenueHourlyUnauthorized struct {
}

func (o *GetRevenueHourlyUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/statistics/revenueDataHourly][%d] getRevenueHourlyUnauthorized ", 401)
}

func (o *GetRevenueHourlyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRevenueHourlyForbidden creates a GetRevenueHourlyForbidden with default headers values
func NewGetRevenueHourlyForbidden() *GetRevenueHourlyForbidden {
	return &GetRevenueHourlyForbidden{}
}

/*GetRevenueHourlyForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetRevenueHourlyForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetRevenueHourlyForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/statistics/revenueDataHourly][%d] getRevenueHourlyForbidden  %+v", 403, o.Payload)
}

func (o *GetRevenueHourlyForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetRevenueHourlyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevenueHourlyNotFound creates a GetRevenueHourlyNotFound with default headers values
func NewGetRevenueHourlyNotFound() *GetRevenueHourlyNotFound {
	return &GetRevenueHourlyNotFound{}
}

/*GetRevenueHourlyNotFound handles this case with default header values.

Object not found
*/
type GetRevenueHourlyNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetRevenueHourlyNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/statistics/revenueDataHourly][%d] getRevenueHourlyNotFound  %+v", 404, o.Payload)
}

func (o *GetRevenueHourlyNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetRevenueHourlyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevenueHourlyTooManyRequests creates a GetRevenueHourlyTooManyRequests with default headers values
func NewGetRevenueHourlyTooManyRequests() *GetRevenueHourlyTooManyRequests {
	return &GetRevenueHourlyTooManyRequests{}
}

/*GetRevenueHourlyTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetRevenueHourlyTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetRevenueHourlyTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/statistics/revenueDataHourly][%d] getRevenueHourlyTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRevenueHourlyTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetRevenueHourlyTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
