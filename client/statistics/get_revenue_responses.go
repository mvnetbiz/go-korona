// Code generated by go-swagger; DO NOT EDIT.

package statistics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetRevenueReader is a Reader for the GetRevenue structure.
type GetRevenueReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRevenueReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRevenueOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRevenueBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRevenueUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRevenueForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRevenueNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRevenueTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetRevenueOK creates a GetRevenueOK with default headers values
func NewGetRevenueOK() *GetRevenueOK {
	return &GetRevenueOK{}
}

/*GetRevenueOK handles this case with default header values.

successful operation
*/
type GetRevenueOK struct {
	Payload *models.StatisticRevenueData
}

func (o *GetRevenueOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/statistics/revenueData][%d] getRevenueOK  %+v", 200, o.Payload)
}

func (o *GetRevenueOK) GetPayload() *models.StatisticRevenueData {
	return o.Payload
}

func (o *GetRevenueOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StatisticRevenueData)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevenueBadRequest creates a GetRevenueBadRequest with default headers values
func NewGetRevenueBadRequest() *GetRevenueBadRequest {
	return &GetRevenueBadRequest{}
}

/*GetRevenueBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetRevenueBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetRevenueBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/statistics/revenueData][%d] getRevenueBadRequest  %+v", 400, o.Payload)
}

func (o *GetRevenueBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetRevenueBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevenueUnauthorized creates a GetRevenueUnauthorized with default headers values
func NewGetRevenueUnauthorized() *GetRevenueUnauthorized {
	return &GetRevenueUnauthorized{}
}

/*GetRevenueUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetRevenueUnauthorized struct {
}

func (o *GetRevenueUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/statistics/revenueData][%d] getRevenueUnauthorized ", 401)
}

func (o *GetRevenueUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRevenueForbidden creates a GetRevenueForbidden with default headers values
func NewGetRevenueForbidden() *GetRevenueForbidden {
	return &GetRevenueForbidden{}
}

/*GetRevenueForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetRevenueForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetRevenueForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/statistics/revenueData][%d] getRevenueForbidden  %+v", 403, o.Payload)
}

func (o *GetRevenueForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetRevenueForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevenueNotFound creates a GetRevenueNotFound with default headers values
func NewGetRevenueNotFound() *GetRevenueNotFound {
	return &GetRevenueNotFound{}
}

/*GetRevenueNotFound handles this case with default header values.

Object not found
*/
type GetRevenueNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetRevenueNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/statistics/revenueData][%d] getRevenueNotFound  %+v", 404, o.Payload)
}

func (o *GetRevenueNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetRevenueNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevenueTooManyRequests creates a GetRevenueTooManyRequests with default headers values
func NewGetRevenueTooManyRequests() *GetRevenueTooManyRequests {
	return &GetRevenueTooManyRequests{}
}

/*GetRevenueTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetRevenueTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetRevenueTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/statistics/revenueData][%d] getRevenueTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRevenueTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetRevenueTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
