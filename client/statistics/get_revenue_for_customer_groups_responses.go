// Code generated by go-swagger; DO NOT EDIT.

package statistics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetRevenueForCustomerGroupsReader is a Reader for the GetRevenueForCustomerGroups structure.
type GetRevenueForCustomerGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRevenueForCustomerGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRevenueForCustomerGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRevenueForCustomerGroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRevenueForCustomerGroupsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRevenueForCustomerGroupsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRevenueForCustomerGroupsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRevenueForCustomerGroupsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetRevenueForCustomerGroupsOK creates a GetRevenueForCustomerGroupsOK with default headers values
func NewGetRevenueForCustomerGroupsOK() *GetRevenueForCustomerGroupsOK {
	return &GetRevenueForCustomerGroupsOK{}
}

/*GetRevenueForCustomerGroupsOK handles this case with default header values.

successful operation
*/
type GetRevenueForCustomerGroupsOK struct {
	Payload *models.StatisticMapStringRevenueData
}

func (o *GetRevenueForCustomerGroupsOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/statistics/revenueDataForCustomerGroups][%d] getRevenueForCustomerGroupsOK  %+v", 200, o.Payload)
}

func (o *GetRevenueForCustomerGroupsOK) GetPayload() *models.StatisticMapStringRevenueData {
	return o.Payload
}

func (o *GetRevenueForCustomerGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StatisticMapStringRevenueData)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevenueForCustomerGroupsBadRequest creates a GetRevenueForCustomerGroupsBadRequest with default headers values
func NewGetRevenueForCustomerGroupsBadRequest() *GetRevenueForCustomerGroupsBadRequest {
	return &GetRevenueForCustomerGroupsBadRequest{}
}

/*GetRevenueForCustomerGroupsBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetRevenueForCustomerGroupsBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetRevenueForCustomerGroupsBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/statistics/revenueDataForCustomerGroups][%d] getRevenueForCustomerGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *GetRevenueForCustomerGroupsBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetRevenueForCustomerGroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevenueForCustomerGroupsUnauthorized creates a GetRevenueForCustomerGroupsUnauthorized with default headers values
func NewGetRevenueForCustomerGroupsUnauthorized() *GetRevenueForCustomerGroupsUnauthorized {
	return &GetRevenueForCustomerGroupsUnauthorized{}
}

/*GetRevenueForCustomerGroupsUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetRevenueForCustomerGroupsUnauthorized struct {
}

func (o *GetRevenueForCustomerGroupsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/statistics/revenueDataForCustomerGroups][%d] getRevenueForCustomerGroupsUnauthorized ", 401)
}

func (o *GetRevenueForCustomerGroupsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRevenueForCustomerGroupsForbidden creates a GetRevenueForCustomerGroupsForbidden with default headers values
func NewGetRevenueForCustomerGroupsForbidden() *GetRevenueForCustomerGroupsForbidden {
	return &GetRevenueForCustomerGroupsForbidden{}
}

/*GetRevenueForCustomerGroupsForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetRevenueForCustomerGroupsForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetRevenueForCustomerGroupsForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/statistics/revenueDataForCustomerGroups][%d] getRevenueForCustomerGroupsForbidden  %+v", 403, o.Payload)
}

func (o *GetRevenueForCustomerGroupsForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetRevenueForCustomerGroupsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevenueForCustomerGroupsNotFound creates a GetRevenueForCustomerGroupsNotFound with default headers values
func NewGetRevenueForCustomerGroupsNotFound() *GetRevenueForCustomerGroupsNotFound {
	return &GetRevenueForCustomerGroupsNotFound{}
}

/*GetRevenueForCustomerGroupsNotFound handles this case with default header values.

Object not found
*/
type GetRevenueForCustomerGroupsNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetRevenueForCustomerGroupsNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/statistics/revenueDataForCustomerGroups][%d] getRevenueForCustomerGroupsNotFound  %+v", 404, o.Payload)
}

func (o *GetRevenueForCustomerGroupsNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetRevenueForCustomerGroupsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRevenueForCustomerGroupsTooManyRequests creates a GetRevenueForCustomerGroupsTooManyRequests with default headers values
func NewGetRevenueForCustomerGroupsTooManyRequests() *GetRevenueForCustomerGroupsTooManyRequests {
	return &GetRevenueForCustomerGroupsTooManyRequests{}
}

/*GetRevenueForCustomerGroupsTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetRevenueForCustomerGroupsTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetRevenueForCustomerGroupsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/statistics/revenueDataForCustomerGroups][%d] getRevenueForCustomerGroupsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRevenueForCustomerGroupsTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetRevenueForCustomerGroupsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
