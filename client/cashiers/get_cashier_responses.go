// Code generated by go-swagger; DO NOT EDIT.

package cashiers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetCashierReader is a Reader for the GetCashier structure.
type GetCashierReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCashierReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCashierOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCashierBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetCashierUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCashierForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCashierNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetCashierTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetCashierOK creates a GetCashierOK with default headers values
func NewGetCashierOK() *GetCashierOK {
	return &GetCashierOK{}
}

/*GetCashierOK handles this case with default header values.

successful operation
*/
type GetCashierOK struct {
	Payload *models.Cashier
}

func (o *GetCashierOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/cashiers/{cashierId}][%d] getCashierOK  %+v", 200, o.Payload)
}

func (o *GetCashierOK) GetPayload() *models.Cashier {
	return o.Payload
}

func (o *GetCashierOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Cashier)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCashierBadRequest creates a GetCashierBadRequest with default headers values
func NewGetCashierBadRequest() *GetCashierBadRequest {
	return &GetCashierBadRequest{}
}

/*GetCashierBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetCashierBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetCashierBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/cashiers/{cashierId}][%d] getCashierBadRequest  %+v", 400, o.Payload)
}

func (o *GetCashierBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetCashierBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCashierUnauthorized creates a GetCashierUnauthorized with default headers values
func NewGetCashierUnauthorized() *GetCashierUnauthorized {
	return &GetCashierUnauthorized{}
}

/*GetCashierUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetCashierUnauthorized struct {
}

func (o *GetCashierUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/cashiers/{cashierId}][%d] getCashierUnauthorized ", 401)
}

func (o *GetCashierUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCashierForbidden creates a GetCashierForbidden with default headers values
func NewGetCashierForbidden() *GetCashierForbidden {
	return &GetCashierForbidden{}
}

/*GetCashierForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetCashierForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetCashierForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/cashiers/{cashierId}][%d] getCashierForbidden  %+v", 403, o.Payload)
}

func (o *GetCashierForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetCashierForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCashierNotFound creates a GetCashierNotFound with default headers values
func NewGetCashierNotFound() *GetCashierNotFound {
	return &GetCashierNotFound{}
}

/*GetCashierNotFound handles this case with default header values.

Object not found
*/
type GetCashierNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetCashierNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/cashiers/{cashierId}][%d] getCashierNotFound  %+v", 404, o.Payload)
}

func (o *GetCashierNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetCashierNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCashierTooManyRequests creates a GetCashierTooManyRequests with default headers values
func NewGetCashierTooManyRequests() *GetCashierTooManyRequests {
	return &GetCashierTooManyRequests{}
}

/*GetCashierTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetCashierTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetCashierTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/cashiers/{cashierId}][%d] getCashierTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCashierTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetCashierTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
