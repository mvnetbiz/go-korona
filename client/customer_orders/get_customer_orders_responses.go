// Code generated by go-swagger; DO NOT EDIT.

package customer_orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// GetCustomerOrdersReader is a Reader for the GetCustomerOrders structure.
type GetCustomerOrdersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCustomerOrdersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCustomerOrdersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetCustomerOrdersNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCustomerOrdersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetCustomerOrdersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCustomerOrdersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCustomerOrdersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetCustomerOrdersTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetCustomerOrdersOK creates a GetCustomerOrdersOK with default headers values
func NewGetCustomerOrdersOK() *GetCustomerOrdersOK {
	return &GetCustomerOrdersOK{}
}

/*GetCustomerOrdersOK handles this case with default header values.

successful operation
*/
type GetCustomerOrdersOK struct {
	Payload *models.ResultListCustomerOrder
}

func (o *GetCustomerOrdersOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/customerOrders][%d] getCustomerOrdersOK  %+v", 200, o.Payload)
}

func (o *GetCustomerOrdersOK) GetPayload() *models.ResultListCustomerOrder {
	return o.Payload
}

func (o *GetCustomerOrdersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResultListCustomerOrder)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCustomerOrdersNoContent creates a GetCustomerOrdersNoContent with default headers values
func NewGetCustomerOrdersNoContent() *GetCustomerOrdersNoContent {
	return &GetCustomerOrdersNoContent{}
}

/*GetCustomerOrdersNoContent handles this case with default header values.

Request successful, but the list is empty. Either there is in general no object on the list or a set filter/restriction in querystring doesn't match any object.
*/
type GetCustomerOrdersNoContent struct {
}

func (o *GetCustomerOrdersNoContent) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/customerOrders][%d] getCustomerOrdersNoContent ", 204)
}

func (o *GetCustomerOrdersNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCustomerOrdersBadRequest creates a GetCustomerOrdersBadRequest with default headers values
func NewGetCustomerOrdersBadRequest() *GetCustomerOrdersBadRequest {
	return &GetCustomerOrdersBadRequest{}
}

/*GetCustomerOrdersBadRequest handles this case with default header values.

Malformed querystring or model
*/
type GetCustomerOrdersBadRequest struct {
	Payload *models.BadRequestError
}

func (o *GetCustomerOrdersBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/customerOrders][%d] getCustomerOrdersBadRequest  %+v", 400, o.Payload)
}

func (o *GetCustomerOrdersBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *GetCustomerOrdersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCustomerOrdersUnauthorized creates a GetCustomerOrdersUnauthorized with default headers values
func NewGetCustomerOrdersUnauthorized() *GetCustomerOrdersUnauthorized {
	return &GetCustomerOrdersUnauthorized{}
}

/*GetCustomerOrdersUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type GetCustomerOrdersUnauthorized struct {
}

func (o *GetCustomerOrdersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/customerOrders][%d] getCustomerOrdersUnauthorized ", 401)
}

func (o *GetCustomerOrdersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCustomerOrdersForbidden creates a GetCustomerOrdersForbidden with default headers values
func NewGetCustomerOrdersForbidden() *GetCustomerOrdersForbidden {
	return &GetCustomerOrdersForbidden{}
}

/*GetCustomerOrdersForbidden handles this case with default header values.

Requested action is not allowed
*/
type GetCustomerOrdersForbidden struct {
	Payload *models.ForbiddenError
}

func (o *GetCustomerOrdersForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/customerOrders][%d] getCustomerOrdersForbidden  %+v", 403, o.Payload)
}

func (o *GetCustomerOrdersForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *GetCustomerOrdersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCustomerOrdersNotFound creates a GetCustomerOrdersNotFound with default headers values
func NewGetCustomerOrdersNotFound() *GetCustomerOrdersNotFound {
	return &GetCustomerOrdersNotFound{}
}

/*GetCustomerOrdersNotFound handles this case with default header values.

Object not found
*/
type GetCustomerOrdersNotFound struct {
	Payload *models.NotFoundError
}

func (o *GetCustomerOrdersNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/customerOrders][%d] getCustomerOrdersNotFound  %+v", 404, o.Payload)
}

func (o *GetCustomerOrdersNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *GetCustomerOrdersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCustomerOrdersTooManyRequests creates a GetCustomerOrdersTooManyRequests with default headers values
func NewGetCustomerOrdersTooManyRequests() *GetCustomerOrdersTooManyRequests {
	return &GetCustomerOrdersTooManyRequests{}
}

/*GetCustomerOrdersTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type GetCustomerOrdersTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *GetCustomerOrdersTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{koronaAccountId}/customerOrders][%d] getCustomerOrdersTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCustomerOrdersTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *GetCustomerOrdersTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
