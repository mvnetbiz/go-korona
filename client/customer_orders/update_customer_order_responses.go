// Code generated by go-swagger; DO NOT EDIT.

package customer_orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// UpdateCustomerOrderReader is a Reader for the UpdateCustomerOrder structure.
type UpdateCustomerOrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCustomerOrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateCustomerOrderNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCustomerOrderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateCustomerOrderUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateCustomerOrderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateCustomerOrderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateCustomerOrderTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateCustomerOrderNoContent creates a UpdateCustomerOrderNoContent with default headers values
func NewUpdateCustomerOrderNoContent() *UpdateCustomerOrderNoContent {
	return &UpdateCustomerOrderNoContent{}
}

/*UpdateCustomerOrderNoContent handles this case with default header values.

Request successful, patch on single resource does not return any content
*/
type UpdateCustomerOrderNoContent struct {
}

func (o *UpdateCustomerOrderNoContent) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/customerOrders/{customerOrderId}][%d] updateCustomerOrderNoContent ", 204)
}

func (o *UpdateCustomerOrderNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCustomerOrderBadRequest creates a UpdateCustomerOrderBadRequest with default headers values
func NewUpdateCustomerOrderBadRequest() *UpdateCustomerOrderBadRequest {
	return &UpdateCustomerOrderBadRequest{}
}

/*UpdateCustomerOrderBadRequest handles this case with default header values.

Malformed querystring or model
*/
type UpdateCustomerOrderBadRequest struct {
	Payload *models.BadRequestError
}

func (o *UpdateCustomerOrderBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/customerOrders/{customerOrderId}][%d] updateCustomerOrderBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCustomerOrderBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UpdateCustomerOrderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCustomerOrderUnauthorized creates a UpdateCustomerOrderUnauthorized with default headers values
func NewUpdateCustomerOrderUnauthorized() *UpdateCustomerOrderUnauthorized {
	return &UpdateCustomerOrderUnauthorized{}
}

/*UpdateCustomerOrderUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type UpdateCustomerOrderUnauthorized struct {
}

func (o *UpdateCustomerOrderUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/customerOrders/{customerOrderId}][%d] updateCustomerOrderUnauthorized ", 401)
}

func (o *UpdateCustomerOrderUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCustomerOrderForbidden creates a UpdateCustomerOrderForbidden with default headers values
func NewUpdateCustomerOrderForbidden() *UpdateCustomerOrderForbidden {
	return &UpdateCustomerOrderForbidden{}
}

/*UpdateCustomerOrderForbidden handles this case with default header values.

Requested action is not allowed
*/
type UpdateCustomerOrderForbidden struct {
	Payload *models.ForbiddenError
}

func (o *UpdateCustomerOrderForbidden) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/customerOrders/{customerOrderId}][%d] updateCustomerOrderForbidden  %+v", 403, o.Payload)
}

func (o *UpdateCustomerOrderForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *UpdateCustomerOrderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCustomerOrderNotFound creates a UpdateCustomerOrderNotFound with default headers values
func NewUpdateCustomerOrderNotFound() *UpdateCustomerOrderNotFound {
	return &UpdateCustomerOrderNotFound{}
}

/*UpdateCustomerOrderNotFound handles this case with default header values.

Object not found
*/
type UpdateCustomerOrderNotFound struct {
	Payload *models.NotFoundError
}

func (o *UpdateCustomerOrderNotFound) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/customerOrders/{customerOrderId}][%d] updateCustomerOrderNotFound  %+v", 404, o.Payload)
}

func (o *UpdateCustomerOrderNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UpdateCustomerOrderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCustomerOrderTooManyRequests creates a UpdateCustomerOrderTooManyRequests with default headers values
func NewUpdateCustomerOrderTooManyRequests() *UpdateCustomerOrderTooManyRequests {
	return &UpdateCustomerOrderTooManyRequests{}
}

/*UpdateCustomerOrderTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type UpdateCustomerOrderTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *UpdateCustomerOrderTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/customerOrders/{customerOrderId}][%d] updateCustomerOrderTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateCustomerOrderTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *UpdateCustomerOrderTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
