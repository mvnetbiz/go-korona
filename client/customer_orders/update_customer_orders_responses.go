// Code generated by go-swagger; DO NOT EDIT.

package customer_orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mvnetbiz/go-korona/models"
)

// UpdateCustomerOrdersReader is a Reader for the UpdateCustomerOrders structure.
type UpdateCustomerOrdersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCustomerOrdersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCustomerOrdersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCustomerOrdersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateCustomerOrdersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateCustomerOrdersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateCustomerOrdersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateCustomerOrdersTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateCustomerOrdersOK creates a UpdateCustomerOrdersOK with default headers values
func NewUpdateCustomerOrdersOK() *UpdateCustomerOrdersOK {
	return &UpdateCustomerOrdersOK{}
}

/*UpdateCustomerOrdersOK handles this case with default header values.

successful operation
*/
type UpdateCustomerOrdersOK struct {
	Payload []*models.AddOrUpdateResult
}

func (o *UpdateCustomerOrdersOK) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/customerOrders][%d] updateCustomerOrdersOK  %+v", 200, o.Payload)
}

func (o *UpdateCustomerOrdersOK) GetPayload() []*models.AddOrUpdateResult {
	return o.Payload
}

func (o *UpdateCustomerOrdersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCustomerOrdersBadRequest creates a UpdateCustomerOrdersBadRequest with default headers values
func NewUpdateCustomerOrdersBadRequest() *UpdateCustomerOrdersBadRequest {
	return &UpdateCustomerOrdersBadRequest{}
}

/*UpdateCustomerOrdersBadRequest handles this case with default header values.

Malformed querystring or model
*/
type UpdateCustomerOrdersBadRequest struct {
	Payload *models.BadRequestError
}

func (o *UpdateCustomerOrdersBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/customerOrders][%d] updateCustomerOrdersBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCustomerOrdersBadRequest) GetPayload() *models.BadRequestError {
	return o.Payload
}

func (o *UpdateCustomerOrdersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequestError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCustomerOrdersUnauthorized creates a UpdateCustomerOrdersUnauthorized with default headers values
func NewUpdateCustomerOrdersUnauthorized() *UpdateCustomerOrdersUnauthorized {
	return &UpdateCustomerOrdersUnauthorized{}
}

/*UpdateCustomerOrdersUnauthorized handles this case with default header values.

Missing or invalid http-authentication
*/
type UpdateCustomerOrdersUnauthorized struct {
}

func (o *UpdateCustomerOrdersUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/customerOrders][%d] updateCustomerOrdersUnauthorized ", 401)
}

func (o *UpdateCustomerOrdersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCustomerOrdersForbidden creates a UpdateCustomerOrdersForbidden with default headers values
func NewUpdateCustomerOrdersForbidden() *UpdateCustomerOrdersForbidden {
	return &UpdateCustomerOrdersForbidden{}
}

/*UpdateCustomerOrdersForbidden handles this case with default header values.

Requested action is not allowed
*/
type UpdateCustomerOrdersForbidden struct {
	Payload *models.ForbiddenError
}

func (o *UpdateCustomerOrdersForbidden) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/customerOrders][%d] updateCustomerOrdersForbidden  %+v", 403, o.Payload)
}

func (o *UpdateCustomerOrdersForbidden) GetPayload() *models.ForbiddenError {
	return o.Payload
}

func (o *UpdateCustomerOrdersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ForbiddenError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCustomerOrdersNotFound creates a UpdateCustomerOrdersNotFound with default headers values
func NewUpdateCustomerOrdersNotFound() *UpdateCustomerOrdersNotFound {
	return &UpdateCustomerOrdersNotFound{}
}

/*UpdateCustomerOrdersNotFound handles this case with default header values.

Object not found
*/
type UpdateCustomerOrdersNotFound struct {
	Payload *models.NotFoundError
}

func (o *UpdateCustomerOrdersNotFound) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/customerOrders][%d] updateCustomerOrdersNotFound  %+v", 404, o.Payload)
}

func (o *UpdateCustomerOrdersNotFound) GetPayload() *models.NotFoundError {
	return o.Payload
}

func (o *UpdateCustomerOrdersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFoundError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCustomerOrdersTooManyRequests creates a UpdateCustomerOrdersTooManyRequests with default headers values
func NewUpdateCustomerOrdersTooManyRequests() *UpdateCustomerOrdersTooManyRequests {
	return &UpdateCustomerOrdersTooManyRequests{}
}

/*UpdateCustomerOrdersTooManyRequests handles this case with default header values.

Too many requests in a specified period
*/
type UpdateCustomerOrdersTooManyRequests struct {
	Payload *models.TooManyRequestsError
}

func (o *UpdateCustomerOrdersTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /accounts/{koronaAccountId}/customerOrders][%d] updateCustomerOrdersTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateCustomerOrdersTooManyRequests) GetPayload() *models.TooManyRequestsError {
	return o.Payload
}

func (o *UpdateCustomerOrdersTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TooManyRequestsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
