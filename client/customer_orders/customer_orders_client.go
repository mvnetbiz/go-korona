// Code generated by go-swagger; DO NOT EDIT.

package customer_orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new customer orders API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for customer orders API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddCustomerOrders(params *AddCustomerOrdersParams, authInfo runtime.ClientAuthInfoWriter) (*AddCustomerOrdersOK, error)

	DeleteCustomerOrder(params *DeleteCustomerOrderParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomerOrderNoContent, error)

	GetCustomerOrder(params *GetCustomerOrderParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomerOrderOK, error)

	GetCustomerOrders(params *GetCustomerOrdersParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomerOrdersOK, *GetCustomerOrdersNoContent, error)

	UpdateCustomerOrder(params *UpdateCustomerOrderParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCustomerOrderNoContent, error)

	UpdateCustomerOrders(params *UpdateCustomerOrdersParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCustomerOrdersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddCustomerOrders adds a batch of new customer orders
*/
func (a *Client) AddCustomerOrders(params *AddCustomerOrdersParams, authInfo runtime.ClientAuthInfoWriter) (*AddCustomerOrdersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCustomerOrdersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addCustomerOrders",
		Method:             "POST",
		PathPattern:        "/accounts/{koronaAccountId}/customerOrders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddCustomerOrdersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddCustomerOrdersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addCustomerOrders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCustomerOrder deletes the single customer order
*/
func (a *Client) DeleteCustomerOrder(params *DeleteCustomerOrderParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomerOrderNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomerOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCustomerOrder",
		Method:             "DELETE",
		PathPattern:        "/accounts/{koronaAccountId}/customerOrders/{customerOrderId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCustomerOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCustomerOrderNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCustomerOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCustomerOrder returns the single customer order
*/
func (a *Client) GetCustomerOrder(params *GetCustomerOrderParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomerOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomerOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCustomerOrder",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/customerOrders/{customerOrderId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCustomerOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCustomerOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCustomerOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCustomerOrders lists all customer orders
*/
func (a *Client) GetCustomerOrders(params *GetCustomerOrdersParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomerOrdersOK, *GetCustomerOrdersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomerOrdersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCustomerOrders",
		Method:             "GET",
		PathPattern:        "/accounts/{koronaAccountId}/customerOrders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCustomerOrdersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetCustomerOrdersOK:
		return value, nil, nil
	case *GetCustomerOrdersNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for customer_orders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCustomerOrder updates the single customer order
*/
func (a *Client) UpdateCustomerOrder(params *UpdateCustomerOrderParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCustomerOrderNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCustomerOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCustomerOrder",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/customerOrders/{customerOrderId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCustomerOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCustomerOrderNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCustomerOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCustomerOrders updates a batch of customer orders

  [number] must be set in the objects, otherwise the object cannot be updated
*/
func (a *Client) UpdateCustomerOrders(params *UpdateCustomerOrdersParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCustomerOrdersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCustomerOrdersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCustomerOrders",
		Method:             "PATCH",
		PathPattern:        "/accounts/{koronaAccountId}/customerOrders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCustomerOrdersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCustomerOrdersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCustomerOrders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
